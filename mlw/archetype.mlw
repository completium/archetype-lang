theory Types

  use int.Int

  (* default type mapping *)
  type key       = int
  type key_hash  = int
  type role      = int
  type address   = int
  type tez       = int
  type date      = int
  type astring   = int
  type bytes     = int
  type signature = int
  type chain_id  = int
  type uint      = int

  exception Break
  exception NotFound
  exception KeyExist
  exception InvalidCaller
  exception InvalidCondition
  exception NoTransfer
  exception InvalidState
  exception Invalid string
end

module Utils
  use int.Int
  use Types

  (* ------------------------------------------------------------------------ *)
  (* Tuples *)

  let function fst (a : (int, int)) : int
  =
  match a with
  | (l,_) -> l
  end

  let function snd (a: (int, int)) : int
  =
  match a with
  | (_,r) -> r
  end

  let function nth1_of_2 (a: ('t1,'t2))     : 't1 = match a with | (v,_) -> v end
  let function nth1_of_3 (a: ('t1,'t2,'t3)) : 't1 = match a with | (v,_,_) -> v end
  let function nth1_of_4 (a: ('t1,'t2,'t3,'t4)) : 't1 = match a with | (v,_,_,_) -> v end
  let function nth1_of_5 (a: ('t1,'t2,'t3,'t4,'t5)) : 't1 = match a with | (v,_,_,_,_) -> v end

  let function nth2_of_2 (a: ('t1,'t2))     : 't2 = match a with | (_,v) -> v end
  let function nth2_of_3 (a: ('t1,'t2,'t3)) : 't2 = match a with | (_,v,_) -> v end
  let function nth2_of_4 (a: ('t1,'t2,'t3,'t4)) : 't2 = match a with | (_,v,_,_) -> v end
  let function nth2_of_5 (a: ('t1,'t2,'t3,'t4,'t5)) : 't2 = match a with | (_,v,_,_,_) -> v end

  let function nth3_of_3 (a: ('t1,'t2,'t3)) : 't3 = match a with | (_,_,v) -> v end
  let function nth3_of_4 (a: ('t1,'t2,'t3,'t4)) : 't3 = match a with | (_,_,v,_) -> v end
  let function nth3_of_5 (a: ('t1,'t2,'t3,'t4,'t5)) : 't3 = match a with | (_,_,v,_,_) -> v end

  let function nth4_of_4 (a: ('t1,'t2,'t3,'t4)) : 't4 = match a with | (_,_,_,v) -> v end
  let function nth4_of_5 (a: ('t1,'t2,'t3,'t4,'t5)) : 't4 = match a with | (_,_,_,v,_) -> v end

  let function nth5_of_5 (a: ('t1,'t2,'t3,'t4,'t5)) : 't5 = match a with | (_,_,_,_,v) -> v end

  (* ------------------------------------------------------------------------ *)
  (* Math *)

  let function abs (a : int) : int
  ensures { result >= 0 }
  =
  if a >= 0 then a else -a

  use int.EuclideanDivision

  let function floor (a : (int,int)) : int
  requires { not (snd a) = 0 }
  =
  match a with
  | (n,d) ->
   if d > 0 then
     div n d
   else
     (div n d) - 1
  end

  let function ceil (a : (int,int)) : int
  requires { not (snd a) = 0 }
  =
  match a with
  | (n,d) ->
   if d > 0 then
     (div n d) + 1
   else
     div n d
  end

  (* ------------------------------------------------------------------------ *)
  (* Rational *)

  type op_cmp =
   | OpCmpLt
   | OpCmpLe
   | OpCmpGt
   | OpCmpGe

  let function rat_cmp (op : op_cmp) (lhs : (int, int)) (rhs : (int, int)) : bool
  =  let a = (fst lhs) * (snd rhs) in
     let b = (snd lhs) * (fst rhs) in
     let pos = (fst lhs) * (fst rhs) > 0 in
     match op with
     | OpCmpLt -> if pos then
                    a < b
                  else
                    a > b
     |OpCmpLe -> if pos then
                   a <= b
                 else
                   a >= b
     |OpCmpGt -> if pos then
                   a > b
                 else
                   a < b
     |OpCmpGe -> if pos then
                   a >= b
                 else
                   a <= b
     end

  let function rat_eq (lhs : (int, int)) (rhs : (int, int)) : bool
  = fst lhs * snd rhs = fst rhs * snd lhs

  type op_arith =
   | OpArithPlus
   | OpArithMinus
   | OpArithMult
   | OpArithDiv

  let function rat_arith (op : op_arith) (lhs : (int, int)) (rhs : (int, int)) : (int, int)
  =  match op with
     | OpArithPlus -> (((fst lhs) * (snd rhs)) + ((snd rhs) * (snd lhs)) , (snd lhs) * (snd rhs))
     | OpArithMinus -> (((fst lhs) * (snd rhs)) - ((snd rhs) * (snd lhs)) , (snd lhs) * (snd rhs))
     | OpArithMult -> ((fst lhs) * (fst rhs) , (snd lhs) * (snd rhs))
     | OpArithDiv -> ((fst lhs) * (snd rhs) , (snd lhs) * (fst rhs))
     end

  let function div_tez (a : tez) (b : tez) : tez
  requires { not b = 0 }
   = div a b

  let function rat_tez (c : (int, int)) (t : tez) : tez
  requires { not (snd c) = 0 }
  =  div ((abs (fst c)) * t) (abs (snd c))

  let function abs_rat (a : (int, int)) : (int, int)
  =
  match a with
  | (l,r) -> (abs l, abs r)
  end

  let function int_to_rat (a : int) : (int, int)
  = (a,1)

  let function rat_uminus (r : (int, int)) : (int, int)
  =
  match r with
  | (l,r) -> (-l,r)
  end

  let function rat_min (a : (int, int)) (b : (int, int)) : (int, int)
  = if rat_cmp OpCmpLe a b then a else b

  let function rat_max (a : (int, int)) (b : (int, int)) : (int, int)
  = if rat_cmp OpCmpLe a b then b else a

  let function rat_dur (a : (int, int)) (b : int) : int
  requires { not (snd a) = 0 }
  = div ((fst a) * b) (snd a)

  (* ----------------------------------------------------------------------- *)
  (* String *)

  let function str_concat (s1 : astring) (s2 : astring) : astring = s1 + s2

  let function substring  (_ : astring) (_ : int) (_ : int) = 0

  let function str_length (_ : astring) : int = 0

  let function byt_concat (b1 : bytes) (b2 : bytes) : bytes = b1 + b2

  (* ----------------------------------------------------------------------- *)
  (* Option *)
  use option.Option

  let function issome (v : option 'a) : bool
  =
  match v with
  | Some _ -> true
  | None -> false
  end

  let function isnone (v : option 'a) : bool
  =
  match v with
  | Some _ -> false
  | None -> true
  end

  let getopt (o : option 'a) : 'a
  raises { NotFound }
  =
  match o with
  | Some v -> v
  | None -> raise NotFound
  end

  (* ----------------------------------------------------------------------- *)
  (* Set *)
  use list.List as S
  use list.Length as SL

  let rec function set_add s a =
  match s with
  | S.Nil -> S.Cons a s
  | S.Cons e ts -> if a = e then ts else S.Cons e (set_add ts a)
  end

  let rec function set_remove s a =
  match s with
  | S.Nil -> S.Nil
  | S.Cons e ts -> if a = e then (set_remove ts a) else S.Cons e (set_remove ts a)
  end

  let rec function set_contains s a =
  match s with
  | S.Nil -> false
  | S.Cons e ts -> a = e || set_contains ts a
  end

  let function set_length l = SL.length l

  (* ----------------------------------------------------------------------- *)
  (* List *)
  use list.List as A
  use list.Length as L
  use list.Nth as N

  let function lcard l = L.length l

  let lnth l n
  raises { NotFound }
  =
  match N.nth l n with
  | Some e -> e
  | None -> raise NotFound
  end

  let rec function lcontains l a
  =
  match l with
  | A.Nil -> false
  | A.Cons e tl -> a = e || lcontains tl a
  end

  let function lprepend l a
  = A.Cons a l

  (* ----------------------------------------------------------------------- *)
  (* crypto *)
  let function blake2b (b : bytes) : bytes = b
  let function sha256 (b : bytes) : bytes = b
  let function sha512 (b : bytes) : bytes = b
  let function hash_key (_k : key) : bytes = 0
  let check_signature (_k : key) (_s : signature) (_b : bytes) = true

  (* ----------------------------------------------------------------------- *)
  (* serialization *)
  let function pack (_x : 'a) : bytes = 0
  let function unpack (_b : bytes) : option 'a = None

  (* ----------------------------------------------------------------------- *)
  (* bool *)
  let function neq_bool (a : bool) (b : bool) : bool = not (a && b)

  (* ------------------------------------------------------------------------ *)
  axiom inv_pack_unpack: forall x : bytes. exists a : int. unpack(x) = Some(a) -> pack(a) = x

end

module Trace

  use Types
  use list.List
  use list.Mem
  use option.Option

  type _asset
  type _entry
  type _field

  type _action =
  | TrRm_ _asset
  | TrAdd_ _asset
  | TrUpdate_ _field
  | TrGet_ _asset
  | TrIterate _asset
  | TrTransfer int
  | TrCallContract int

  type _traces = list _action

  predicate changes_performed_by (changes : _traces) (tr : _traces) (p : bool) =
  forall x : _action.
  mem x tr ->
  mem x changes ->
  p

  predicate performed_by  (tr : _traces) (p : bool) =
  forall x : _action.
  mem x tr ->
  p

end

theory Contract

  use Types
  use int.Int
  use list.List
  use list.Mem as L

  type operation = {
     _destination_ : address;
     _amount_      : tez;
  }

  let _mk_operation (d : address) (a : tez) : operation = {
    _destination_ = d;
    _amount_ = a;
  }

  type operations = list operation

  let no_operation : operations = Nil

  let mk_call (c : address) : operation = {
    _destination_ = c;
    _amount_ = 0;
  }

end

(* source : http://toccata.lri.fr/gallery/insertion_sort_list.fr.html *)
module InsertionSort

  type elt
  val predicate le elt elt

  clone relations.TotalPreOrder with
    type t = elt, predicate rel = le, axiom .
  clone export list.Sorted with
    type t = elt, predicate le  = le, goal Transitive.Trans

  use list.List
  use list.Permut

  let rec function insert (x: elt) (l: list elt) : list elt
    requires { sorted l }
    ensures  { sorted result }
    ensures  { permut (Cons x l) result }
    variant  { l }
  = match l with
    | Nil -> Cons x Nil
    | Cons y r -> if le x y then Cons x l else Cons y (insert x r)
    end

  let rec function insertion_sort (l: list elt) : list elt
    ensures { sorted result }
    ensures { permut l result }
    variant { l }
  = match l with
    | Nil -> Nil
    | Cons x r -> insert x (insertion_sort r)
    end

end

module Undup

  use list.List
  use list.Mem as M
  use list.Length as L
  use fset.Undup as U

  (* ------------------------------------------------------------------------ *)
  type t

  (* ------------------------------------------------------------------------ *)
  val function eqt t t : bool

  (* ------------------------------------------------------------------------ *)
  axiom eqP : forall x y. eqt x y <-> x = y

  (* ------------------------------------------------------------------------ *)
  let rec function mem (a : t) (l : list t) : bool
  variant { l }
  ensures { result <-> M.mem a l }
  =
    match l with
    | Nil -> false
    | Cons e tl -> eqt a e || mem a tl
    end

  (* ------------------------------------------------------------------------ *)
  let rec function undup (l : list t) : list t
  variant { l }
  ensures { result = U.undup l }
  =
    match l with
    | Nil -> Nil
    | Cons e tl ->
        if mem e tl then undup tl else Cons e (undup tl)
    end

  (* ------------------------------------------------------------------------ *)
  predicate unduped (l : list t) = undup l = l

end

module IntListUtils
  use int.Int
  use list.List
  use list.Mem
  use list.Nth
  use list.Length
  use list.Reverse
  use option.Option

  (* ------------------------------------------------------------------------ *)
  let rec nth (i : int) (l : list int) : option int
  variant { l }
  ensures { 0 <= i < length l -> forall k. result = Some k -> mem k l }
  ensures { not (0 <= i < length l) -> result = None }
  ensures { result = nth i l }
  =
  match l with
  | Cons k tl -> if i = 0 then Some k else nth (i - 1) tl
  | Nil -> None
  end

  (* ------------------------------------------------------------------------ *)
  lemma nth_con : forall k : int. nth 0 (Cons k Nil) = Some k

  (* ------------------------------------------------------------------------ *)
  let rec function head (n : int) (l : list int) : list int
  variant { l }
  ensures { forall k. mem k result -> mem k l }
  ensures { 0 <= n <= length l -> length result = n }
  ensures { n > length l -> result = l }
  ensures { n < 0 -> result = Nil }
  =
  match l with
  | Cons e tl ->
    if 0 < n then
      Cons e (head (n-1) tl)
    else Nil
  | Nil -> Nil
  end

  (* ------------------------------------------------------------------------ *)
  let rec function tail (n : int) (l : list int) : list int
  variant { l }
  ensures { forall k. mem k result -> mem k l }
  ensures { 0 <= n <= length l -> length result = n }
  = reverse (head n (reverse l))

  (* ------------------------------------------------------------------------ *)
  let rec function eql l1 l2 : bool
  variant { l1, l2 }
  ensures { result <-> l1 = l2 }
  =
  match l1, l2 with
  | Cons e1 tl1, Cons e2 tl2 ->
    if e1 = e2 then eql tl1 tl2 else false
  | Nil, Nil -> true
  | _ -> false
  end

  (* ------------------------------------------------------------------------ *)
  lemma eqP : forall l1 l2. eql l1 l2 <-> l1 = l2

end

(* Collection Set is a fset with get, add and remove ------------------------ *)
module CollectionSet
  use int.Int
  use list.List
  use list.Mem as M
  use option.Option

  (* ------------------------------------------------------------------------ *)
  type t

  (* ------------------------------------------------------------------------ *)
  val function proj t : int

  (* ------------------------------------------------------------------------ *)
  val function eqt t t : bool

  (* ------------------------------------------------------------------------ *)
  axiom eqP : forall x y. eqt x y <-> x = y

  (* ------------------------------------------------------------------------ *)
  val function norm (list t) : list t

  (* ------------------------------------------------------------------------ *)
  clone fset.FSet as F  with  type t     = t,
                              val  eqt   = eqt,
                              val  norm  = norm,
                              axiom .
  (* ------------------------------------------------------------------------ *)
  type cset = F.fset

  (* ------------------------------------------------------------------------ *)
  predicate mem (e : t) (s : cset) = F.fmem e s

  (* ------------------------------------------------------------------------ *)
  let function elts (s : cset) = F.content s

  (* ------------------------------------------------------------------------ *)
  let function mk (l : list t) = F.mk l

  (* GET INTERNAL ----------------------------------------------------------- *)
  let rec function internal_get (k : int) (l : list t) : option t
  variant { l }
  ensures { forall e. result = Some e -> proj e = k }
  ensures { result = None -> forall e. M.mem e l -> proj e <> k }
  =
  match l with
  | Cons e tl ->
    if proj e = k
    then Some e
    else internal_get k tl
  | Nil -> None
  end

  (* GET -------------------------------------------------------------------- *)
  let function get (k : int) (s : cset) : option t
  ensures { result = None -> forall e. F.fmem e s -> proj e <> k }
  ensures { forall e. result = Some e -> proj e = k }
  = internal_get k (F.content s)

  (* ADD -------------------------------------------------------------------- *)
  let function add (a : t) (s : cset) : cset
  = F.mk (Cons a (F.content s))  (* normalisation is done by F.mk *)

  (* REMOVE ----------------------------------------------------------------- *)
  let function remove (k : int) (s : cset) : cset
  =
  let rec internal_remove (l : list t) : list t
  variant { l }
  = match l with
  | Cons e tl ->
    if proj e = k then tl
    else Cons e (internal_remove tl)
  | Nil -> Nil
  end in
  F.mk (internal_remove (F.content s))

  (* ------------------------------------------------------------------------ *)
  function union (s1 s2 : cset) : cset = F.fsetU s1 s2

  (* ------------------------------------------------------------------------ *)
  function inter (s1 s2 : cset) : cset = F.fsetI s1 s2

  (* ------------------------------------------------------------------------ *)
  function diff (s1 s2 : cset) : cset = F.fsetD s1 s2

  (* ------------------------------------------------------------------------ *)
  function singleton (a : t) : cset = F.mk (Cons a Nil)

  (* ------------------------------------------------------------------------ *)
  let function empty = F.fset0

  (* ------------------------------------------------------------------------ *)
  predicate is_empty (s : cset) = F.content s = Nil

  (* ------------------------------------------------------------------------ *)
  predicate subset (s1 s2 : cset) = F.fsubset s1 s2

  (* ------------------------------------------------------------------------ *)
  predicate (==) (s1 s2 : cset) = F.(==) s1 s2

  (* ------------------------------------------------------------------------ *)
  let function card (s : cset) = F.fcard s

end

(* VIEW is a unduped fset of key -------------------------------------------- *)
module View
  use int.Int
  use list.List
  use list.Mem as M
  use list.Length as L
  use list.Distinct
  use option.Option
  use Types
  use IntListUtils as I

  (* ------------------------------------------------------------------------ *)
  let function eqk (k1 k2: key) : bool = k1 = k2

  (* ------------------------------------------------------------------------ *)
  lemma eqP : forall k1 k2: key. eqk k1 k2 <-> k1 = k2

  (* ------------------------------------------------------------------------ *)
  clone Undup as U with type t = key,
                        val eqt = eqk

  (* ------------------------------------------------------------------------ *)
  predicate unduped (l : list key) = l = U.undup l

  (* ------------------------------------------------------------------------ *)
  type view = {
    content : list key
  } invariant {
    unduped content
  } by { content = Nil }

  (* ------------------------------------------------------------------------ *)
  let function elts (v : view)
  ensures { unduped result }
  = content v

  (* ------------------------------------------------------------------------ *)
  let function contains (k : key) (v:view) : bool
  ensures { result <-> M.mem k (elts v) }
  = U.mem k (elts v)

  (* ------------------------------------------------------------------------ *)
  let function card (v : view) : int
  ensures { result = L.length (elts v) }
  =
  L.length (elts v)

  (* ------------------------------------------------------------------------ *)
  lemma undupI : forall l. U.unduped (U.undup l)

  (* ------------------------------------------------------------------------ *)
  let function mk (l: list key)
  = { content = U.undup l }

  (* ------------------------------------------------------------------------ *)
  let function empty = mk Nil

  (* ------------------------------------------------------------------------ *)
  predicate is_empty (v : view) = v = empty

  (* ------------------------------------------------------------------------ *)
  let function nth (i : int) (v : view) : option key
  ensures { 0 <= i < card v -> forall k. result = Some k -> contains k v }
  ensures { not (0 <= i < card v) -> result = None }
  = I.nth i (elts v)

  (* ------------------------------------------------------------------------ *)
  lemma nth_singleton: forall k. nth 0 (mk (Cons k Nil)) = Some k

  (* ------------------------------------------------------------------------ *)
  lemma undup_head : forall k l. U.unduped l -> U.unduped (I.head k l)

  (* ------------------------------------------------------------------------ *)
  lemma eqview : forall v1 v2. content v1 = content v2 -> v1 = v2

  (* KEEP first i elements -------------------------------------------------- *)
  let function head (i : int) (v : view) : view
  ensures { forall k. contains k result -> contains k v }
  ensures { 0 <= i <= card v -> card result = i }
  ensures { i > card v -> result = v }
  = mk (I.head i (elts v))

  (* ------------------------------------------------------------------------ *)
  lemma keep_none: forall v. head 0 v = mk Nil

  (* ------------------------------------------------------------------------ *)
  lemma undup_tail : forall k l. U.unduped l -> U.unduped (I.tail k l)

  (* ------------------------------------------------------------------------ *)
  (* keeps last i elements *)
  let function tail (i : int) (v : view) : view
  ensures { forall k. contains k result -> contains k v }
  ensures { 0 <= i <= card v -> card result = i }
  = mk (I.tail i (elts v))

  (* ------------------------------------------------------------------------ *)
  lemma drop_none: forall v. tail 0 v = mk Nil

end

(* FIELD is a sorted and unduped fset of key -------------------------------- *)
module Field
  use int.Int
  use list.List
  use list.Mem as M
  use Types
  use View as V

  (* ------------------------------------------------------------------------ *)
  let function proj (x : key) = x

  (* ------------------------------------------------------------------------ *)
  let function eqt (x1 : key) (x2 : key) = x1 = x2

  (* ------------------------------------------------------------------------ *)
  let predicate le k1 k2 = k1 <= k2

  (* ------------------------------------------------------------------------ *)
  clone InsertionSort as S with type elt = key,
                                val le = le

  (* ------------------------------------------------------------------------ *)
  clone Undup as U with type t = key,
                        val eqt = eqt

  (* ------------------------------------------------------------------------ *)
  let function norm (l : list key) = S.insertion_sort (U.undup l)

  (* ------------------------------------------------------------------------ *)
  clone CollectionSet as N with type t     = key,
                                val proj   = proj,
                                val  eqt   = eqt,
                                val  norm  = norm,
                                axiom .

  (* ------------------------------------------------------------------------ *)
  type field = N.cset

  (* ------------------------------------------------------------------------ *)
  predicate mem (k : key) (f : field) = N.mem k f

  (* ------------------------------------------------------------------------ *)
  let function elts (f : field) = N.elts f

  (* ------------------------------------------------------------------------ *)
  let function empty = N.empty

  (* ------------------------------------------------------------------------ *)
  predicate is_empty (f : field) = N.is_empty f

  (* ------------------------------------------------------------------------ *)
  let function eq (f1 f2 : field) : bool
  =
  let rec internal_eq (l1 l2 : list key) : bool
  variant { l1, l2 }
  = match l1,l2 with
  | Cons k1 tl1, Cons k2 tl2 ->
    if k1 = k2 then
      internal_eq tl1 tl2
    else false
  | Nil,Nil -> true
  | _ -> false
  end in
  internal_eq (N.elts f1) (N.elts f2)

  (* ------------------------------------------------------------------------ *)
  let function add (k : key) (f : field) = N.add k f

  (* ------------------------------------------------------------------------ *)
  let function remove (k : key) (f : field) = N.remove k f

  (* ------------------------------------------------------------------------ *)
  let function to_view (f : field) : V.view
  ensures { S.sorted (V.elts result) }
  ensures { forall k. V.contains k result <-> M.mem k (N.elts f) }
  = V.mk (N.elts f)

end

(* COLLECTION is a a unduped fset of asset
   plus an invariant on key injectivity ------------------------------------- *)
module Collection
  use Types
  use int.Int
  use list.List
  use list.Mem as M
  use option.Option
  use View as V

  (* ------------------------------------------------------------------------ *)
  type t

  (* ------------------------------------------------------------------------ *)
  val function keyt t : key

  (* ------------------------------------------------------------------------ *)
  val function eqt t t : bool

  (* ------------------------------------------------------------------------ *)
  let predicate le t1 t2 = keyt t1 <= keyt t2

  (* ------------------------------------------------------------------------ *)
  clone InsertionSort as S with type elt = t,
                                val le = le

  (* ------------------------------------------------------------------------ *)
  clone Undup as U with type t = t,
                        val eqt = eqt

  (* ------------------------------------------------------------------------ *)
  let function norm (l : list t) = S.insertion_sort (U.undup l)

  (* ------------------------------------------------------------------------ *)
  clone CollectionSet as N with type t     = t,
                                val proj   = keyt,
                                val eqt    = eqt,
                                val norm   = norm,
                                axiom .

  (* ------------------------------------------------------------------------ *)
  predicate key_injective (l : list t) = forall a1 a2.
    M.mem a1 l -> M.mem a2 l -> keyt a1 = keyt a2 -> eqt a1 a2

  (* ------------------------------------------------------------------------ *)
  type collection = {
    content : N.cset
  } invariant {
    key_injective (N.elts content)
  } by {
    content = N.empty;
  }

  (* ------------------------------------------------------------------------ *)
  predicate mem (a : t) (c : collection) = N.mem a c.content

  (* ------------------------------------------------------------------------ *)
  let function mk (s : N.cset) : collection
  requires { key_injective (N.elts s) }
  = { content = s }

  (* ------------------------------------------------------------------------ *)
  let function get (k : key) (c : collection) : option t
  ensures { result = None -> forall e. mem e c -> keyt e <> k }
  ensures { forall e. result = Some e -> keyt e = k }
  ensures { forall e. result = Some e <-> mem e c }
  = N.get k c.content

  (* ------------------------------------------------------------------------ *)
  lemma cont_mk [@rewrite] : forall l. N.elts (N.mk l) = norm l

  (* ------------------------------------------------------------------------ *)
  lemma intget_cons [@rewrite] : forall l [@induction].
    forall e k. keyt e <> k -> N.internal_get k (Cons e l) = N.internal_get k l

  (* ------------------------------------------------------------------------ *)
  lemma cons_key_injective : forall a l.
  key_injective l -> (forall e. M.mem e l -> keyt e <> keyt a) ->
  key_injective (Cons a l)

  (* ------------------------------------------------------------------------ *)
  let function add (a : t) (c : collection) : collection
  ensures { mem a result }
  ensures { forall k. k <> keyt a -> get k c = get k result }
  ensures { get (keyt a) result = Some a }
  =
  mk (N.add a c.content)

  (* ------------------------------------------------------------------------ *)
  let function remove (k : key) (c : collection) : collection
  ensures { forall i. i <> k -> get i c = get i result }
  ensures { get k result = None }
  =
  mk (N.remove k c.content)

  (* ------------------------------------------------------------------------ *)
  let function set (k : key) (a : t) (c : collection) : collection
  requires { keyt a = k }
  requires { get k c <> None }
  ensures { get k result = Some a }
  ensures { forall i. i <> k -> get i result = get i c }
  =
  let rec internal_set (l : list t) : list t
  requires { key_injective l }
  variant { l }
  ensures { key_injective result }
  ensures { N.internal_get k result = Some a }
  ensures { forall i. i <> k -> N.internal_get i result = N.internal_get i l }
  =
  match l with
  | Cons e tl ->
    if keyt e = k
    then Cons a (internal_set tl)
    else Cons e (internal_set tl)
  | Nil -> Nil
  end in
  mk (N.mk (internal_set (N.elts c.content)))

  (* ------------------------------------------------------------------------ *)
  let function view_to_list (v : V.view) (c : collection) : list t
  (* TODO : adds postcondition: this is used in 'select' storage API *)
  =
  let rec function internal_view_to_list (l : list t) : list t
  variant { l }
  =
  match l with
  | Cons e tl ->
    if V.contains (keyt e) v then
      Cons e (internal_view_to_list tl)
    else
      internal_view_to_list tl
  | Nil -> Nil
  end in
  internal_view_to_list (N.elts c.content)

  (* ------------------------------------------------------------------------ *)
  let function list_to_view (l : list t) : V.view
  ensures { forall k. V.contains k result <-> forall e. M.mem e l -> keyt e = k }
  =
  let rec function internal_list_to_view (il : list t) : list key
  variant { l }
  ensures { forall k. M.mem k result <-> forall e. M.mem e l -> keyt e = k }
    =
  match il with
  | Cons e tl -> Cons (keyt e) (internal_list_to_view tl)
  | Nil -> Nil
  end in
  V.mk (internal_list_to_view l)

  (* ------------------------------------------------------------------------ *)
  let rec function to_view (c : collection) : V.view
  ensures { forall k. V.contains k result <-> forall e. get k c = Some e <-> keyt e = k }
  =
  list_to_view (N.elts c.content)

  (* ------------------------------------------------------------------------ *)
  function union (c1 c2 : collection) : collection
  = mk (N.union c1.content c2.content)

  (* ------------------------------------------------------------------------ *)
  function inter (c1 c2 : collection) : collection
  = mk (N.inter c1.content c2.content)

  (* ------------------------------------------------------------------------ *)
  function diff (c1 c2 : collection) : collection
  = mk (N.diff c1.content c2.content)

  (* ------------------------------------------------------------------------ *)
  function singleton (a : t) : collection = mk (N.singleton a)

   (* ------------------------------------------------------------------------ *)
  let function empty = mk N.empty

  (* ------------------------------------------------------------------------ *)
  predicate is_empty (c : collection) = N.is_empty c.content

  (* ------------------------------------------------------------------------ *)
  predicate subset (c1 c2 : collection) = N.subset c1.content c2.content

  (* ------------------------------------------------------------------------ *)
  predicate (==) (c1 c2 : collection) = N.(==) c1.content c2.content

  (* ------------------------------------------------------------------------ *)
  let function card (c : collection) = N.card c.content

end

module Sort
  use list.List
  use int.Int
  use Types
  use View as V

  (* ------------------------------------------------------------------------ *)
  type t
  (* ------------------------------------------------------------------------ *)
  type collection
  (* ------------------------------------------------------------------------ *)
  val function cmp t t : bool
  (* ------------------------------------------------------------------------ *)
  val function view_to_list V.view collection : list t
  (* ------------------------------------------------------------------------ *)
  val function list_to_view (list t) : V.view

  (* ------------------------------------------------------------------------ *)
  let predicate ple (a b : t) = cmp a b

  (* ------------------------------------------------------------------------ *)
  clone InsertionSort as IS with type elt = t,
                                 val le = ple

  let function sort (v : V.view) (c : collection)
  =
  list_to_view (IS.insertion_sort (view_to_list v c))

end

module Sum

  use  int.Int
  use  list.List
  use  option.Option
  use  View as V

  (* ------------------------------------------------------------------------ *)
  type t
  (* ------------------------------------------------------------------------ *)
  type collection

  (* ------------------------------------------------------------------------ *)
  val function field t : int
  (* ------------------------------------------------------------------------ *)
  val function get int collection : option t

  (* ------------------------------------------------------------------------ *)
  let function sum (v : V.view) (c : collection) : int
  =
  let rec function internal_sum (l : list int) (acc : int) : int
  variant { l }
  =
    match l with
     | Cons k tl ->
      match get k c with
      | Some e -> internal_sum tl (acc + field e)
      | None -> internal_sum tl acc
      end
     | Nil -> acc
    end
  in
  internal_sum (V.elts v) 0

  (* ------------------------------------------------------------------------ *)
  lemma sum_empty:
    forall v : V.view, c : collection. V.card v = 0 -> sum v c = 0

  (* ------------------------------------------------------------------------ *)
  lemma sum_singleton: forall k : int, a : t, c : collection.
  get k c = Some a ->
  sum (V.mk (Cons k Nil)) c = field a

end

theory Lib

  use export int.Int
  use export option.Option
  use export Utils
  use export Types
  use export Contract
  use export Trace

end