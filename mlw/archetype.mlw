theory Types

  use int.Int

  (* default type mapping *)
  type key       = int
  type key_hash  = int
  type role      = int
  type address   = int
  type tez       = int
  type date      = int
  type astring   = int
  type bytes     = int
  type signature = int

  exception Break
  exception NotFound
  exception KeyExist
  exception InvalidCaller
  exception InvalidCondition
  exception NoTransfer
  exception InvalidState
  exception Invalid string
end

module Utils
  use int.Int
  use Types

  (* ------------------------------------------------------------------------ *)
  (* Tuples *)

  let function fst (a : (int, int)) : int
  =
  match a with
  | (l,_) -> l
  end

  let function snd (a: (int, int)) : int
  =
  match a with
  | (_,r) -> r
  end

  (* ------------------------------------------------------------------------ *)
  (* Math *)

  let function abs (a : int) : int
  ensures { result >= 0 }
  =
  if a >= 0 then a else -a

  use int.EuclideanDivision

  let function floor (a : (int,int)) : int
  requires { not (snd a) = 0 }
  =
  match a with
  | (n,d) ->
   if d > 0 then
     div n d
   else
     (div n d) - 1
  end

  let function ceil (a : (int,int)) : int
  requires { not (snd a) = 0 }
  =
  match a with
  | (n,d) ->
   if d > 0 then
     (div n d) + 1
   else
     div n d
  end

  (* ------------------------------------------------------------------------ *)
  (* Rational *)

  type op_cmp =
   | OpCmpLt
   | OpCmpLe
   | OpCmpGt
   | OpCmpGe

  let function rat_cmp (op : op_cmp) (lhs : (int, int)) (rhs : (int, int)) : bool
  =  let a = (fst lhs) * (snd rhs) in
     let b = (snd lhs) * (fst rhs) in
     let pos = (fst lhs) * (fst rhs) > 0 in
     match op with
     | OpCmpLt -> if pos then
                    a < b
                  else
                    a > b
     |OpCmpLe -> if pos then
                   a <= b
                 else
                   a >= b
     |OpCmpGt -> if pos then
                   a > b
                 else
                   a < b
     |OpCmpGe -> if pos then
                   a >= b
                 else
                   a <= b
     end

  let function rat_eq (lhs : (int, int)) (rhs : (int, int)) : bool
  = fst lhs * snd rhs = fst rhs * snd lhs

  type op_arith =
   | OpArithPlus
   | OpArithMinus
   | OpArithMult
   | OpArithDiv

  let function rat_arith (op : op_arith) (lhs : (int, int)) (rhs : (int, int)) : (int, int)
  =  match op with
     | OpArithPlus -> (((fst lhs) * (snd rhs)) + ((snd rhs) * (snd lhs)) , (snd lhs) * (snd rhs))
     | OpArithMinus -> (((fst lhs) * (snd rhs)) - ((snd rhs) * (snd lhs)) , (snd lhs) * (snd rhs))
     | OpArithMult -> ((fst lhs) * (fst rhs) , (snd lhs) * (snd rhs))
     | OpArithDiv -> ((fst lhs) * (snd rhs) , (snd lhs) * (fst rhs))
     end

  let function div_tez (a : tez) (b : tez) : tez = div a b

  let function rat_tez (c : (int, int)) (t : tez) : tez
  requires { not (snd c) = 0 }
  =  div ((abs (fst c)) * t) (abs (snd c))

  let function abs_rat (a : (int, int)) : (int, int)
  =
  match a with
  | (l,r) -> (abs l, abs r)
  end

  let function int_to_rat (a : int) : (int, int)
  = (a,1)

  let function rat_uminus (r : (int, int)) : (int, int)
  =
  match r with
  | (l,r) -> (-l,r)
  end

  let function rat_min (a : (int, int)) (b : (int, int)) : (int, int)
  = if rat_cmp OpCmpLe a b then a else b

  let function rat_max (a : (int, int)) (b : (int, int)) : (int, int)
  = if rat_cmp OpCmpLe a b then b else a

  let function rat_dur (a : (int, int)) (b : int) : int
  = div ((fst a) * b) (snd a)


  (* ----------------------------------------------------------------------- *)
  (* String *)

  let function str_concat (s1 : astring) (s2 : astring) : astring = s1 + s2

  let function substring  (_ : astring) (_ : int) (_ : int) = 0

  let function str_length (_ : astring) : int = 0

  let function byt_concat (b1 : bytes) (b2 : bytes) : bytes = b1 + b2

  (* ----------------------------------------------------------------------- *)
  (* Option *)
  use option.Option

  let function issome (v : option 'a) : bool
  =
  match v with
  | Some _ -> true
  | None -> false
  end

  let function isnone (v : option 'a) : bool
  =
  match v with
  | Some _ -> false
  | None -> true
  end

  let getopt (o : option 'a) : 'a
  raises { NotFound }
  =
  match o with
  | Some v -> v
  | None -> raise NotFound
  end

  (* ----------------------------------------------------------------------- *)
  (* List *)
  use list.List as A
  use list.Length as L
  use list.Nth as N

  let function lcard l = L.length l

  let lnth l n
  raises { NotFound }
  =
  match N.nth l n with
  | Some e -> e
  | None -> raise NotFound
  end

  let rec function lcontains l a
  =
  match l with
  | A.Nil -> false
  | A.Cons e tl -> a = e || lcontains tl a
  end

  let function lprepend l a
  = A.Cons a l

  (* ----------------------------------------------------------------------- *)
  (* crypto *)
  let function blake2b (b : bytes) : bytes = b
  let function sha256 (b : bytes) : bytes = b
  let function sha512 (b : bytes) : bytes = b
  let function hash_key (_k : key) : bytes = 0
  let check_signature (_k : key) (_s : signature) (_b : bytes) = true

  (* ----------------------------------------------------------------------- *)
  (* serialization *)
  let function pack (_x : 'a) : bytes = 0
  let function unpack (b : bytes) : option 'a = None

  (* ----------------------------------------------------------------------- *)
  (* bool *)
  let function neq_bool (a : bool) (b : bool) : bool = not (a && b)

  (* ------------------------------------------------------------------------ *)
  axiom inv_pack_unpack: forall x : bytes. exists a : int. unpack(x) = Some(a) -> pack(a) = x

end

module Trace

  use Types
  use list.List
  use list.Mem
  use option.Option

  type _asset
  type _entry
  type _field

  type _action =
  | TrRm_ _asset
  | TrAdd_ _asset
  | TrUpdate_ _field
  | TrGet_ _asset
  | TrIterate _asset
  | TrTransfer int
  | TrCallContract int

  type _traces = list _action

  predicate changes_performed_by (changes : _traces) (tr : _traces) (p : bool) =
  forall x : _action.
  mem x tr ->
  mem x changes ->
  p

  predicate performed_by  (tr : _traces) (p : bool) =
  forall x : _action.
  mem x tr ->
  p

end

theory Contract

  use Types
  use int.Int
  use list.List
  use list.Mem as L

  type transfer = {
     destination_ : address;
     amount_      : tez;
  }

  let mk_transfer (d : address) (a : tez) : transfer = {
    destination_ = d;
    amount_ = a;
  }

  type transfers = list transfer

  let no_transfer : transfers = Nil

  let mk_call (c : address) : transfer = {
    destination_ = c;
    amount_ = 0;
  }

end

(* source : http://toccata.lri.fr/gallery/insertion_sort_list.fr.html *)
module InsertionSort

  type elt
  val predicate le elt elt

  clone relations.TotalPreOrder with
    type t = elt, predicate rel = le, axiom .
  clone export list.Sorted with
    type t = elt, predicate le  = le, goal Transitive.Trans

  use list.List
  use list.Permut

  let rec function insert (x: elt) (l: list elt) : list elt
    requires { sorted l }
    ensures  { sorted result }
    ensures  { permut (Cons x l) result }
    variant  { l }
  = match l with
    | Nil -> Cons x Nil
    | Cons y r -> if le x y then Cons x l else Cons y (insert x r)
    end

  let rec function insertion_sort (l: list elt) : list elt
    ensures { sorted result }
    ensures { permut l result }
    variant { l }
  = match l with
    | Nil -> Nil
    | Cons x r -> insert x (insertion_sort r)
    end

end

module AssetCollection

  use Types
  use int.Int
  use list.List
  use list.Length as L
  use list.Append as A
  use list.Distinct as D
  use list.Mem as M
  use option.Option
  use fset.Undup
  use fset.ListFilter

  (* ------------------------------------------------------------------------ *)
  type t = abstract {}        (* asset type           *)

  (* ------------------------------------------------------------------------ *)
  val function fkey  t : key  (* asset key function   *)

  (* ------------------------------------------------------------------------ *)
  val function feq t t : bool (* asset equality *)

  (* ------------------------------------------------------------------------ *)
  let predicate ple t1 t2 = fkey t1 <= fkey t2

  (* ------------------------------------------------------------------------ *)
  clone InsertionSort as IS with type elt = t,
                                 val le = ple

  let rec function fmem (a : t) (l : list t) : bool =
    match l with
    | Nil -> false
    | Cons e tl -> feq a e || fmem a tl
    end

  let rec function undup (l : list t) : list t =
    match l with
    | Nil -> Nil
    | Cons e tl ->
        if fmem e tl then undup tl else Cons e (undup tl)
    end

  let function norm (l : list t) : list t =
    IS.insertion_sort (undup l)

  clone fset.FSet      as F with type t     = t,
                                 val  eqt   = feq,
                                 val  norm  = norm,
                                 axiom .

  (* fkey is injective *)
  predicate key_injective (l : list t) =
    forall a1 a2.
    mem a1 l -> mem a2 l ->
    fkey a1 = fkey a2 -> feq a1 a2

  type collection = {
    content : F.fset
  } invariant {
    key_injective (F.content content)
  } by {
    content = F.fset0;
  }

  (* ------------------------------------------------------------------------ *)
  type view = {
    vcontent : list key
  } invariant {
    D.distinct vcontent
  } by {
    vcontent = Nil;
  }

  (* ------------------------------------------------------------------------ *)
  let function veq (v1 v2 : view) : bool
  =
  let rec internal_eq_view (l1 l2 : list key) : bool
  variant { l1, l2 }
  = match l1,l2 with
  | Cons k1 tl1, Cons k2 tl2 ->
    if k1 = k2 then
      internal_eq_view tl1 tl2
    else false
  | Nil,Nil -> true
  | _ -> false
  end in
  internal_eq_view v1.vcontent v2.vcontent

  (* ------------------------------------------------------------------------ *)
  let function vmk (l : list key) : view
  requires { D.distinct l }
  = { vcontent = l }

  (* ------------------------------------------------------------------------ *)
  let function velts (v : view) : list key
  ensures { D.distinct result }
  = vcontent v

   (* ------------------------------------------------------------------------ *)
  let function vempty = { vcontent = Nil }

  (* ------------------------------------------------------------------------ *)
  let function vmem (k: key) (v: view) : bool
  ensures { result <-> M.mem k v.vcontent }
  =
  let rec internal_vmem (l : list key) : bool
  variant { l }
  ensures { result <-> M.mem k l }
  =
  match l with
    | Nil      -> false
    | Cons e tl -> k = e || internal_vmem tl
  end in
  internal_vmem v.vcontent

  (* ------------------------------------------------------------------------ *)
  predicate (==) (c1 c2 : collection) = F.(==) c1.content c2.content

  (* ------------------------------------------------------------------------ *)
  let function mk (s : F.fset) : collection
  requires { key_injective (F.content s) }
  ensures { F.(==) s (content result) }
  ensures { content result = s }
  = { content = s }

  (* ------------------------------------------------------------------------ *)
  lemma mk_content: forall c.
  (mk (c.content)) == c

  (* ------------------------------------------------------------------------ *)
  lemma content_mk [@rewrite] :
  forall s. key_injective (F.content s) -> (content (mk s)) = s

  (* ------------------------------------------------------------------------ *)
  let function elts (c : collection) : list t
  ensures { IS.sorted result }
  ensures { D.distinct result }
  (* ensures { F.sorted result } *)
  =
  F.content c.content

  (* Set theory ************************************************************* *)

  (* ------------------------------------------------------------------------ *)
  let function cempty : collection = mk F.fset0

  (* ------------------------------------------------------------------------ *)
  predicate is_empty (c : collection) = is_nil (elts c)

  (* ------------------------------------------------------------------------ *)
  predicate mem (a : t) (c : collection) = F.fmem a c.content

  (* ------------------------------------------------------------------------ *)
  lemma mem_empty : is_empty cempty

  (* ------------------------------------------------------------------------ *)
  let function vcard (v : view) : int
  ensures { result = L.length v.vcontent }
  =
  L.length v.vcontent

  (* ------------------------------------------------------------------------ *)
  let function ccard (c : collection) : int
  ensures { result >= 0 }
  = F.fcard c.content

  (* ------------------------------------------------------------------------ *)
  (* shall this be a lemma ? *)
  axiom eqEquality : forall c1 c2. c1 == c2 <-> c1 = c2

  (* ------------------------------------------------------------------------ *)
  lemma mk_injective: forall s1 s2.
  key_injective (F.content s1) -> key_injective (F.content s2) ->
  mk s1 == mk s2 -> F.(==) s1 s2

  (* ------------------------------------------------------------------------ *)
  predicate subset (c1 c2 : collection) = F.fsubset c1.content c2.content

  (* ------------------------------------------------------------------------ *)
  predicate vsubset (v1 v2 : view) = forall k. vmem k v1 -> vmem k v2

  (* ------------------------------------------------------------------------ *)
  predicate csubset (c1 : collection) (v2 : view) = forall a. mem a c1 -> vmem (fkey a) v2

  (* ------------------------------------------------------------------------ *)
  function diff (c1 c2 : collection) : collection
  = mk (F.fsetD c1.content c2.content)

  (* ------------------------------------------------------------------------ *)
  function inter (c1 c2 : collection) : collection
  = mk (F.fsetI c1.content c2.content)

  (* ------------------------------------------------------------------------ *)
  function union (c1 c2 : collection) : collection
  = mk (F.fsetU c1.content c2.content)

  (* Singleton ************************************************************** *)

  (* ------------------------------------------------------------------------ *)
  lemma one_unary_injective: forall a. key_injective (Cons a Nil)

  (* ------------------------------------------------------------------------ *)
  let function singleton (a : t) : collection = mk (F.mk (Cons a Nil))

  (* ------------------------------------------------------------------------ *)
  lemma mem_singleton: forall a1 a2 : t.
  mem a1 (singleton a2) -> a1 = a2

  (* ------------------------------------------------------------------------ *)
  lemma card_singleton: forall a : t. ccard (singleton a) = 1

  (* ------------------------------------------------------------------------ *)
  lemma subset_singleton: forall a : t, c : collection.
  subset (singleton a) c <-> mem a c

  (* Collection API ********************************************************* *)

  (* ------------------------------------------------------------------------ *)
  let rec function internal_list_to_view (l : list t) : list key
  requires { D.distinct l }
  requires { key_injective l }
  variant { l }
  ensures { D.distinct result }
  ensures { forall k. M.mem k result <-> exists e. M.mem e l /\ fkey e = k }
  ensures { L.length result = L.length l }
  =
  match l with
  | Cons e tl -> Cons (fkey e) (internal_list_to_view tl)
  | Nil -> Nil
  end

  (* ------------------------------------------------------------------------ *)
  lemma cons_key_injective : forall a l.
  key_injective l ->
  (forall e. M.mem e l -> fkey e <> fkey a) ->
  key_injective (Cons a l)

  (* ------------------------------------------------------------------------ *)
  let function list_to_view (l : list t) : view
  requires { D.distinct l }
  requires { key_injective l }
  ensures { forall k. vmem k result <-> exists e. M.mem e l /\ fkey e = k }
  ensures { vcard result = L.length l }
  = vmk (internal_list_to_view l)

  (* ------------------------------------------------------------------------ *)
  let rec function to_view (c : collection) : view
  ensures { forall k. vmem k result <-> exists e. mem e c /\ fkey e = k }
  ensures { vcard result = ccard c }
  =
  list_to_view (elts c)

  (* ------------------------------------------------------------------------ *)
  let function ccontains (k : key) (c : collection)
  ensures { result <-> exists e. mem e c /\ fkey e = k }
  = vmem k (to_view c)

  (* ------------------------------------------------------------------------ *)
  let function vcontains (k : key) (v : view)
  ensures { result <-> M.mem k v.vcontent }
  = vmem k v

  (* ------------------------------------------------------------------------ *)
  let rec function internal_get (l : list t) (k : key) : option t
  requires { D.distinct l }
  requires { key_injective l }
  variant { l }
  ensures { vmem k (list_to_view l) ->
    exists e. result = Some e  /\ fkey e = k
  }
  =
  match l with
  | Cons e tl ->
    if fkey e = k
    then Some e
    else internal_get tl k
  | Nil -> None
  end

  (* ------------------------------------------------------------------------ *)
  lemma cons_internal_get : forall k x a l.
  D.distinct l ->
  key_injective l ->
  fkey x <> k ->
  internal_get l k = Some a ->
  internal_get (Cons x l) k = Some a

  (* ------------------------------------------------------------------------ *)
  let function get (c : collection) (k : key) : option t
  requires { ccontains k c }
  ensures { exists e. result = Some e /\ fkey e = k }
  = internal_get (elts c) k

  (* ------------------------------------------------------------------------ *)
  function fget collection key : t

  (* ------------------------------------------------------------------------ *)
  axiom fget_require_ensure: forall c k.
    ccontains k c -> mem (fget c k) c

  (* ------------------------------------------------------------------------ *)
  predicate list_subset (l1 : list t) (l2 : list t) = forall e. M.mem e l1 -> M.mem e l2

  let function view_to_list (v : view) (c : collection) : list t
  ensures { D.distinct result }
  ensures { key_injective result }
  =
  let rec function internal_view_to_list (l : list t) : list t
  requires { D.distinct l }
  requires { key_injective l }
  variant { l }
  ensures { list_subset result l }
  ensures { D.distinct result }
  ensures { key_injective result }
  =
  match l with
  | Cons e tl ->
    if vmem (fkey e) v then
      Cons e (internal_view_to_list tl)
    else
      internal_view_to_list tl
  | Nil -> Nil
  end in
  internal_view_to_list (elts c)

  (* ------------------------------------------------------------------------ *)
  let function to_coll (v : view) (c : collection) : collection
  =
  mk (F.mk (view_to_list v c))

  (* ------------------------------------------------------------------------ *)
  lemma union_insert: forall a s.
  F.fmem a (F.fsetU (F.mk (Cons a Nil)) s)

  lemma eq_col_set: forall s1 s2.
  key_injective (F.content s1) ->
  key_injective (F.content s2) ->
  F.(==) s1 s2 <-> mk s1 == mk s2

  let add (c : collection) (a : t)
  requires { not (ccontains (fkey a) c) }
  ensures { mem a result }
  ensures { result == union (singleton a) c }
  = mk (F.mk (Cons a (elts c)))

  (* ------------------------------------------------------------------------ *)
  lemma mem_coll : forall a l.
  key_injective l ->
  M.mem a (elts (mk (F.mk l))) <-> M.mem a l

  (* ------------------------------------------------------------------------ *)
  let remove (c : collection) (k : key) : collection
  requires { ccontains k c }
  ensures { ccard result = ccard c - 1 }
  ensures { exists e. get c k = Some e /\ result == diff c (singleton e) }
  =
  let rec internal_remove (l : list t) : list t
  requires { D.distinct l }
  requires { key_injective l }
  variant { l }
  ensures { D.distinct result }
  ensures { key_injective result }
  ensures { (exists e. fkey e  = k /\ M.mem e l) -> L.length result = L.length l - 1 }
  ensures { forall a. M.mem a result <-> M.mem a (filter (fun x -> fkey x <> k) l) }
  = match l with
  | Cons e tl ->
    if fkey e = k then tl
    else Cons e (internal_remove tl)
  | Nil -> Nil
  end in
  mk (F.mk (internal_remove (F.content (content c))))

(* let remove (c : collection) (a : t) : collection
  requires { mem a c }
  ensures { card result = card c - 1 }
  ensures { result == (diff c (singleton a)) }
  =
  let rec internal_remove (l : list t) : list t
  requires { D.distinct l }
  requires { key_injective l }
  variant { l }
  ensures { D.distinct result }
  ensures { key_injective result }
  ensures { M.mem a l -> L.length result = L.length l - 1 }
  ensures { forall e. M.mem e result <-> M.mem e (filter (fun x -> not (M.mem x (Cons a Nil))) l) }
  = match l with
  | Cons e tl ->
    if feq e a then tl
    else Cons e (internal_remove tl)
  | Nil -> Nil
  end in
  mk (F.mk (internal_remove (F.content (content c)))) *)

  (* ------------------------------------------------------------------------ *)
  let set (c : collection) (k : key) (a : t) : collection
  requires { ccontains k c }
  requires { fkey a = k }
  ensures { get result k = Some a }
  =
  let rec internal_set (l : list t) : list t
  requires { key_injective l }
  variant { l }
  ensures { key_injective result }
  ensures { internal_get result k = Some a }
  =
  match l with
  | Cons e tl ->
    if fkey e = k
    then Cons a (internal_set tl)
    else Cons e (internal_set tl)
  | Nil -> Nil
  end in
  mk (F.mk (internal_set (elts c)))

 (*  let set (c : collection) (r : t) (a : t) : collection
  requires { ccontains (fkey r) c }
  requires { fkey a = fkey r }
  ensures { get result (fkey r) = Some a }
  =
  let rec internal_set (l : list t) : list t
  requires { D.distinct l }
  requires { key_injective l }
  variant { l }
  ensures { D.distinct result }
  ensures { key_injective result }
  ensures { forall e. fkey e <> fkey r -> M.mem e result <-> M.mem e l }
  ensures {  M.mem r result -> internal_get result (fkey r) = Some a }
  =
  match l with
  | Cons e tl ->
    if feq e r
    then Cons a tl
    else Cons e (internal_set tl)
  | Nil -> Nil
  end in
  mk (F.mk (internal_set (elts c))) *)

  (* ------------------------------------------------------------------------ *)
  predicate view_is_empty (v : view) = v.vcontent = Nil

  (* ------------------------------------------------------------------------ *)
  let function vadd (k : int) (v : view) : view
  requires { not (vmem k v) }
  =
  vmk (Cons k (v.vcontent))

  (* ------------------------------------------------------------------------ *)
  let function vremove (k : int) (v : view) : view
  =
  let rec internal_vremove l : list key
  requires { D.distinct l }
  variant { v }
  ensures { D.distinct result }
  =
  match l with
  | Cons i tl ->
    if i = k then
      internal_vremove tl
    else
      Cons i (internal_vremove tl)
  | Nil -> Nil
  end in
  vmk (internal_vremove v.vcontent)

  (* ------------------------------------------------------------------------ *)
  let function vnth (i : int) (v : view) : option key
  ensures {
    0 <= i < vcard v ->
    exists k. result = Some k /\ vmem k v
  }
  =
  let rec internal_nth (i : int) (l : list key) : option key
  variant { l }
  ensures {
    0 <= i < L.length l ->
    exists k. result = Some k /\ M.mem k l
  }
  =
  match l with
  | Cons k tl -> if i = 0 then Some k else internal_nth (i - 1) tl
  | Nil -> None
  end in
  internal_nth i v.vcontent

  (* ------------------------------------------------------------------------ *)
  let function cnth (i : int) (c : collection) : option key
  ensures {
    0 <= i < ccard c ->
    exists k. result = Some k /\ ccontains k c
  }
  =
  vnth i (to_view c)

  (* ------------------------------------------------------------------------ *)
  lemma nth_singleton: forall k. vnth 0 (vmk (Cons k Nil)) = Some k

  (* ------------------------------------------------------------------------ *)
   (* keep first i elements *)
  let function vkeep (i : int) (v : view) : view
  ensures { forall k. vmem k result -> vmem k v }
  ensures {
    0 <= i <= vcard v ->
    vcard result = i
  }
  =
  let rec function internal_vkeep (k : int) (l : list key) : list key
  requires { D.distinct l }
  variant { v }
  ensures { D.distinct result }
  ensures { forall k. M.mem k result -> M.mem k l }
  ensures {
    0 <= i <= L.length l ->
    L.length result = i
  }
  =
  match l with
  | Cons e tl ->
    if k < i then
      Cons e (internal_vkeep (k+1) tl)
    else Nil
  | Nil -> Nil
  end in
  vmk (internal_vkeep 0 v.vcontent)

  (* ------------------------------------------------------------------------ *)
   (* keep first i elements *)
  let function ckeep (i : int) (c : collection) : view
  ensures { forall k. vmem k result -> ccontains k c }
  ensures {
    0 <= i <= ccard c ->
    vcard result = i
  }
  = vkeep i (to_view c)

  (* ------------------------------------------------------------------------ *)
  lemma keep_none: forall v. vkeep 0 v = vempty

  (* ------------------------------------------------------------------------ *)
  lemma keep_all: forall v : view, i : int.
  i >= vcard v -> vkeep i v = v

  (* ------------------------------------------------------------------------ *)
  (* vdrop first i elements *)
  let function vdrop (i : int) (v : view) : view
  ensures { forall k. vmem k result -> vmem k v }
  ensures {
    0 <= i <= vcard v ->
    vcard result = vcard v - i
  }
  =
  let rec function internal_vdrop (k : int) (l : list key) : list key
  requires { D.distinct l }
  variant { v }
  ensures { D.distinct result }
  ensures { forall k. M.mem k result -> M.mem k l }
  ensures {
    0 <= i <= L.length l ->
    L.length result = i
  }
  =
  match l with
  | Cons e tl ->
    if k < i then
      internal_vdrop (k+1) tl
    else
      Cons e (internal_vdrop (k+1) tl)
  | Nil -> Nil
  end in
  vmk (internal_vdrop 0 v.vcontent)

  (* ------------------------------------------------------------------------ *)
  (* drop first i elements *)
  let function cdrop (i : int) (c : collection) : view
  ensures { forall k. vmem k result -> ccontains k c }
  ensures {
    0 <= i <= ccard c ->
    vcard result = ccard c - i
  }
  = vdrop i (to_view c)

  (* ------------------------------------------------------------------------ *)
  lemma drop_none: forall v. vdrop 0 v = v

  (* (* ------------------------------------------------------------------------ *)
  lemma drop_next: forall v, i : int.
  0 <= i < L.length v ->
  exists e. drop i v = Cons e (drop (i+1) v) *)

  (* ------------------------------------------------------------------------ *)
  lemma drop_all: forall v. vdrop (vcard v) v = vempty

  goal sanity_check : false

end

module Sort
  use list.List
  use int.Int

  (* ------------------------------------------------------------------------ *)
  type collection

  (* ------------------------------------------------------------------------ *)
  type t

  (* ------------------------------------------------------------------------ *)
  type view

  (* ------------------------------------------------------------------------ *)
  val function cmp (a b : t) : bool

  (* ------------------------------------------------------------------------ *)
  val function view_to_list (v : view) (c : collection) : list t

  (* ------------------------------------------------------------------------ *)
  val function list_to_view (l : list t) : view

  (* ------------------------------------------------------------------------ *)
  val function elts (c : collection) : list t

  (* ------------------------------------------------------------------------ *)
  let predicate ple (a b : t) = cmp a b

  (* ------------------------------------------------------------------------ *)
  clone InsertionSort as IS with type elt = t,
                                 val le = ple

  let function vsort (v : view) (c : collection)
  =
  list_to_view (IS.insertion_sort (view_to_list v c))

  let function csort (c : collection)
  =
  list_to_view (IS.insertion_sort (elts c))

end

module Sum

  use  int.Int
  use  list.List
  use  option.Option

  (* ------------------------------------------------------------------------ *)
  type collection

  (* ------------------------------------------------------------------------ *)
  type t

  (* ------------------------------------------------------------------------ *)
  type view

  (* ------------------------------------------------------------------------ *)
  val function field t : int
  (* ------------------------------------------------------------------------ *)
  val function get collection int : option t
  (* ------------------------------------------------------------------------ *)
  val function velts view : list int
  (* ------------------------------------------------------------------------ *)
  val function vcard view : int
  (* ------------------------------------------------------------------------ *)
  val function vmk (list int) : view
  (* ------------------------------------------------------------------------ *)
  val function to_view collection : view
  (* ------------------------------------------------------------------------ *)
  let function vsum (v : view) (c : collection) : int
  =
  let rec function internal_vsum (l : list int) (acc : int) : int
  variant { l }
  =
    match l with
     | Cons k tl ->
      match get c k with
      | Some e -> internal_vsum tl (acc + field e)
      | None -> internal_vsum tl acc
      end
     | Nil -> acc
    end
  in
  internal_vsum (velts v) 0
  (* ------------------------------------------------------------------------ *)
  let function csum (c : collection) : int
  =
  vsum (to_view c) c

  (* ------------------------------------------------------------------------ *)
  lemma sum_empty:
    forall v : view, c : collection. vcard v = 0 -> vsum v c = 0

  (* ------------------------------------------------------------------------ *)
  lemma sum_singleton: forall k : int, a : t, c : collection.
  get c k = Some a ->
  vsum (vmk (Cons k Nil)) c = field a

end


theory Lib

  use export int.Int
  use export option.Option
  use export Utils
  use export Types
  use export Contract
  use export AssetCollection
  use export Trace

end