theory Types

  use int.Int

  (* default type mapping *)
  type key     = int
  type role    = int
  type address = int
  type tez     = int
  type date    = int
  type astring = int
  type bytes   = int

  exception Break
  exception NotFound
  exception KeyExist
  exception InvalidCaller
  exception InvalidCondition
  exception NoTransfer
  exception InvalidState

end

module Utils
  use int.Int
  use Types

  let function fst (a : (int, int)) : int
  =
  match a with
  | (l,_) -> l
  end

  let function snd (a: (int, int)) : int
  =
  match a with
  | (_,r) -> r
  end

  let function abs (a : int) : int
  ensures { result >= 0 }
  =
  if a >= 0 then a else -a

  let function abs_rat (a : (int, int)) : (int, int)
  =
  match a with
  | (l,r) -> (abs l, abs r)
  end

  let function str_concat (s1 : astring) (s2 : astring) : astring = s1 + s2
  let function substring  (s : astring) (i1 : int) (i2 : int) = 0
  let function str_length (s : astring) : int = 0

  let function byt_concat (b1 : bytes) (b2 : bytes) : bytes = b1 + b2

end

module Trace

  use Types
  use list.List
  use list.Mem
  use option.Option

  type _asset
  type _entry
  type _field

  type _action =
  | TrRm_ _asset
  | TrAdd_ _asset
  | TrUpdate_ _field
  | TrGet_ _asset
  | TrIterate _asset
  | TrTransfer int
  | TrCallContract int

  type _traces = list _action

  predicate changes_performed_by (changes : _traces) (tr : _traces) (p : bool) =
  forall x : _action.
  mem x tr ->
  mem x changes ->
  p

  predicate performed_by  (tr : _traces) (p : bool) =
  forall x : _action.
  mem x tr ->
  p

end

theory Contract

  use Types
  use int.Int
  use list.List
  use list.Mem as L

  type transfer = {
     destination_ : address;
     amount_      : tez;
  }

  let mk_transfer (d : address) (a : tez) : transfer = {
    destination_ = d;
    amount_ = a;
  }

  type transfers = list transfer

  let no_transfer : transfers = Nil

  let mk_call (c : address) : transfer = {
    destination_ = c;
    amount_ = 0;
  }

end

module ListUtils

  use list.List
  use list.Mem as M

  type t = abstract {}

  val eqt t t : bool

  (* predicate mem (x: t) (l: list t) = match l with
    | Nil      -> false
    | Cons e tl -> eqt x e \/ mem x tl
  end *)

  let rec function mem (x: t) (l: list t) : bool
  variant { l }
  =
  match l with
    | Nil      -> false
    | Cons e tl -> eqt x e || mem x tl
  end

  let rec remove (x : t) (l : list t) : list t
  variant { l }
  =
  match l with
  | Cons e tl ->
    if eqt e x
    then remove x tl
    else Cons e (remove x tl)
  | Nil -> Nil
  end

  let rec function eql (l1 l2 : list t) : bool
  variant { l1, l2 }
  =
  match l1, l2 with
  | Cons e1 tl1, Cons e2 tl2 ->
    if eqt e1 e2 then
      eql tl1 tl2
    else false
  | Nil, Nil -> true
  | _ -> false
  end

  let rec function undup (xs : list t) : list t
  variant { xs }
  =
  match xs with
  | Nil ->
      Nil
  | Cons x xs ->
      if mem x xs then undup xs else Cons x (undup xs)
  end

end

module KeyListUtils

  use Types
  use list.List

  clone ListUtils as LU   with type t   = key,
                                          val  eqt = Int.(=)

  let function mem_key (k : key) (l : list key) = LU.mem k l

  let function eq_keyl (l1 l2 : list key) = LU.eql l1 l2

  let function remove_key (k : key) (l : list key) = LU.remove k l

end

module AssetCollection

  use Types
  use int.Int
  use list.List
  use list.Length as L
  use list.Mem as M
  use option.Option
  use KeyListUtils

  type t = abstract {}        (* asset type           *)
  (* val function sortf t : int *)  (* asset sort function  *)
  val function keyf  t : int  (* asset key function   *)
  val function eqf t t : bool (* asset equality *)

  (* clone ListInsertSort as S with type t     = t,
                                 val  sortf = sortf *)

  clone ListUtils   as AU   with type t   = t,
                                 val  eqt = eqf

  clone fset.FSet      as F with type t     = t,
                                 val  eqt   = eqf,
                                 val  norm  = AU.undup,
                                 axiom .

  val function witness : t

  type collection = {
    content : F.fset
  } invariant {
    forall a : t.
    F.fmem a content -> a <> witness
  } by {
    content = F.fset0;
  }

  let function elts (c : collection) : list t = F.content c.content


  let function from_fset (s : F.fset) : collection
  requires { forall a : t. F.fmem a s -> a <> witness }
  = { content = s }

  let function internal_mem (a : t) (l : list t) : bool = AU.mem a l

  predicate containsk (k : key) (l : list t) = match l with
  | Nil -> false
  | Cons e tl -> keyf e = k \/ containsk k tl
  end

  let rec function contains_key (k : key) (l : list t) : bool
  variant { l }
  requires { k <> keyf witness }
  ensures { result <-> containsk k l }
  =
  match l with
  | Cons e tl ->
    if keyf e = k
    then true
    else contains_key k tl
  | Nil -> false
  end

  let function mk (l : list t) : collection
  requires { forall a : t. M.mem a l -> a <> witness }
  = { content = F.mk l }

  (* SET THEORY *)
  let function empty : collection = from_fset F.fset0

  predicate is_empty (c : collection) = is_nil (elts c)

  predicate mem (a : t) (c : collection) = F.fmem a c.content

  let function contains (k : key) (c : collection) : bool
  requires { k <> keyf witness }
  =
  contains_key k (F.content c.content)

  lemma mem_empty : is_empty empty

  let function card (c : collection) : int
  ensures { result >= 0 }
  = F.fcard c.content

  predicate (==) (c1 c2 : collection) = F.(==) c1.content c2.content

  predicate subset (c1 c2 : collection) = F.fsubset c1.content c2.content

  function diff (c1 c2 : collection) : collection = from_fset  (F.fsetD c1.content c2.content)

  function inter (c1 c2 : collection) : collection = from_fset (F.fsetI c1.content c2.content)

  function union (c1 c2 : collection) : collection = from_fset (F.fsetU c1.content c2.content)

  (* singleton *)
  let function singleton (a : t) : collection
  requires { a <> witness }
  = mk (Cons a Nil)

  lemma mem_singleton: forall k1 k2 : t.
  k2 <> witness ->
  mem k1 (singleton k2) -> k1 = k2

  lemma card_singleton: forall a : t. a <> witness -> card (singleton a) = 1

  lemma subset_singleton: forall a : t, c : collection.
  a <> witness ->
  subset (singleton a) c <-> mem a c

  (* Storage API *)

  let add (c : collection) (a : t)
  requires { not (mem a c) }
  requires { a <> witness }
  ensures { mem a result }
  ensures { result == union (singleton a) c }
  = mk (Cons a (elts c))

  let set (c : collection) (k : key) (a : t) : collection
  requires { a <> witness }
  =
  let rec internal_set (l : list t) (k : key) (a : t) : list t
  variant { l }
  requires { a <> witness }
  requires { forall e : t. M.mem e l -> e <> witness }
  ensures { forall e : t. M.mem e result -> e <> witness }
  =
  match l with
  | Cons e tl ->
    if keyf e = k
    then Cons a tl
    else Cons e (internal_set tl k a)
  | Nil -> Nil
  end in
  mk (internal_set (elts c) k a)

  let remove (c : collection) (k : key) : collection
  =
  let rec internal_remove (l : list t) (k : key) : list t
  variant { l }
  requires { forall e : t. M.mem e l -> e <> witness }
  ensures { forall e : t. M.mem e result -> e <> witness }
  =
  match l with
  | Cons e tl ->
    if keyf e = k
    then tl
    else Cons e (internal_remove tl k)
  | Nil -> Nil
  end in
  mk (internal_remove (elts c) k)

  let function get (c : collection) (k : key) : t
  ensures { containsk k (elts c) -> mem result c }
  =
  let rec function internal_get (l : list t) (k : key) : t
  variant { l }
  ensures { containsk k l -> M.mem result l }
  =
  match l with
  | Cons e tl ->
    if keyf e = k
    then e
    else internal_get tl k
  | Nil -> witness
  end in
  internal_get (elts c) k

 let rec function to_ids (l : list t) : list key
  variant { l }
  =
  match l with
  | Cons e tl -> Cons (keyf e) (to_ids tl)
  | Nil -> Nil
  end

  let function unshallow (c : collection) (keys : list int) : collection
  =
  let rec function internal_unshallow (l : list t) : list t
  variant { l }
  requires { forall e. M.mem e l -> e <> witness }
  ensures { forall e. M.mem e result -> e <> witness }
  =
  match l with
  | Cons e tl ->
    if mem_key (keyf e) keys
    then Cons e (internal_unshallow tl)
    else internal_unshallow tl
  | Nil -> Nil
  end in
  mk (internal_unshallow (elts c))

  let rec function internal_nth (i : int) (l : list t) : t
  variant { l }
  requires { 0 <= i < L.length l }
  requires { l <> Nil }
  requires { forall e. M.mem e l -> e <> witness }
  ensures { M.mem result l /\ result <> witness }
  =
  match l with
  | Cons e tl -> if i = 0 then e else internal_nth (i - 1) tl
  | Nil -> witness
  end

  lemma nth_cons_0: forall e, l:list t. internal_nth 0 (Cons e l) = e
  lemma nth_cons_n: forall e, l:list t, i:int.
    0 < i <= L.length l -> internal_nth i (Cons e l) = internal_nth (i-1) l

  (* let function onth (i : int) (c : collection) : option t
  ensures {
    0 <= i < card c ->
    match result with
    | Some a -> mem a c
    | None -> false
    end
  }
  =
  let rec function internal_onth (i : int) (l : list t) : option t
  variant { l }
  =
  match l with
  | Cons e tl -> if i = 0 then Some e else internal_onth (i - 1) tl
  | Nil -> None
  end in
  internal_onth i (elts c) *)

  let function nth (i : int) (c : collection) : t
  requires { 0 <= i < card c }
  requires { elts c <> Nil }
  ensures { mem result c /\ result <> witness}
  =
  internal_nth i (elts c)

  lemma nth_singleton: forall a : t. a <> witness -> nth 0 (singleton a) = a

  let function proj (c : collection) (projf : t -> int) : list int
  =
   let rec internal_proj (l : list t) (projf : t -> int) : list int
  variant { l }
  =
  match l with
  | Cons e tl -> Cons (projf e) (internal_proj tl projf)
  | Nil -> Nil
  end in
  internal_proj (elts c) projf

  (*use int.MinMax*)

  let function head (i : int) (c : collection) : collection
  requires { i >= 0 }
  ensures { subset result c }
  =
  let rec function internal_head (l : list t) (k : int)
  requires { forall e. M.mem e l -> e <> witness }
  ensures { forall e. M.mem e result -> e <> witness }
  ensures { forall e. M.mem e result -> M.mem e l }
  =
  match l with
  | Cons e tl ->
    if k <= i then
      Cons e (internal_head tl (k+1))
    else
      Nil
  | Nil -> Nil
  end in
  mk (internal_head (elts c) 0)

  (* lemma internal_head_add: forall l : list t, i : int.
  0 <= i < L.length l - 1 ->
  forall e. M.mem e internal_head (i+1) l <-> Mem e ((internal_head i l) ++ (Cons (internal_nth (i+1) l) Nil)) *)

  lemma head_add: forall c : collection, i : int.
  0 <= i < card c - 1 ->
  head (i+1) c == union (head i c) (singleton (nth (i+1) c))

  lemma head_nth: forall c : collection, i j : int.
  0 <= i < j < card c ->
  nth i (head j c) = nth i c

  let function tail (i : int) (c : collection) : collection
  requires { 0 <= i < card c }
  ensures { subset result c }
  (* ensures { card result = card c - i } *)
  ensures { forall j: int. i <= j < card c -> mem (nth j c) result }
  =
  let rec function internal_tail (l : list t) (k : int)
  variant { l }
  ensures { forall e. M.mem e result -> M.mem e l }
  ensures { forall j: int. i <= j < L.length l -> M.mem (internal_nth j l) result }
  =
  match l with
  | Cons e tl ->
    if k < i then
      internal_tail tl (k+1)
    else Cons e (internal_tail tl (k+1))
  | Nil -> Nil
  end in
  mk (internal_tail (elts c) 0)

  lemma tail_all: forall c : collection. tail 0 c = c

  lemma tail_add: forall c : collection, i : int.
  0 <= i < card c ->
  tail (i+1) c = diff (tail i c) (singleton (nth i c))

  lemma tail_nth: forall c : collection, i j : int.
  0 <= j < card c ->
  0 <= i < card c - j ->
  nth i (tail j c) = nth (i+j) c

  let function to_coll (l : list t) : collection
  (*ensures { S.sorted result <-> S.sorted l }*)
  requires { forall e. M.mem e l -> e <> witness }
  ensures { forall k : key. contains k result <-> containsk k l }
  ensures { forall a : t. mem a result <-> M.mem a l }
  ensures { forall i : int. nth i result = internal_nth i l }
  = { content = F.mk l }

  goal sanity_check : false

end

module Sort
  use list.List
  use int.Int
  (* use KeyListUtils *)

  type container

  type t = abstract {}

  val function elts container : list t

  val function mk (list t) : container

  val function cmp (a b : t) : bool

  predicate lt (a b : t) = cmp a b

  clone list.Sorted as S with type t       = t,
                              predicate le = lt,
                              goal Transitive.Trans

  let rec function insert (a : t) (l : list t) : list t
  variant { l }
  =
  match l with
  | Cons e tl ->
    if cmp a e then
      Cons a l
    else
      Cons e (insert a tl)
  | Nil -> Cons a Nil
  end

  let rec function lsort (l : list t) : list t
  variant { l }
  ensures { S.sorted result }
  =
  match l with
  | Cons e tl -> insert e (lsort tl)
  | Nil -> Nil
  end

  let function sort (c : container) : container
  ensures { S.sorted (elts result)}
  =
  mk (lsort (elts c))

end

module Sum

  use  int.Int
  type container
  type t

  val function f container int : int
  val function field t : int
  val function nth int container : t
  val function card container : int
  function inter container container : container
  function union container container : container
  function diff  container container : container
  predicate subset container container
  predicate is_empty container
  val function singleton t : container
  val function witness : t
  val function keyf t : int

  let function sum (c : container) : int =
    let ref res = 0 in
    for i = 0 to card c - 1 do
      res <- res + f c i
    done;
    res

  (* sum over empty is zero *)
  lemma sum_empty:
    forall c : container. card c = 0 -> sum c = 0

  lemma sum_ge_zero:
    forall c : container.
    not (is_empty c) ->
    (forall i : int. 0 <= i < card c -> f c i >= 0) ->
    sum c >= 0

  lemma sum_singleton: forall a : t.
  a <> witness ->
  sum (singleton a) = field a

  lemma sum_union:
    forall c1 c2 : container.
    sum (union c1 c2) = sum c1 + sum c2 - sum (inter c1 c2)

  lemma sum_diff:
    forall c1 c2 : container.
    subset c2 c1 ->
    sum (diff c1 c2) = sum c1 - sum c2

end

theory Lib

  use export int.Int
  use export list.List
  use export option.Option
  use export Utils
  use export Types
  use export Contract
  use export AssetCollection
  use export KeyListUtils
  use export Trace

end