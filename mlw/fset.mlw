(* ------------------------------------------------------------------------ *)
module Undup
use int.Int
use export list.List
use export list.Length
use export list.Mem
use export list.Distinct
use export list.Permut

function undup (xs : list 'a) : list 'a =
  match xs with
  | Nil ->
      Nil
  | Cons x xs ->
      if mem x xs then undup xs else Cons x (undup xs)
  end

lemma length_undup :
  forall xs [@induction] : list 'a. length (undup xs) <= length xs

lemma mem_undup :
  forall xs [@induction] : list 'a. forall x.
    mem x xs <-> mem x (undup xs)

lemma distinct_undup :
  forall xs [@induction] : list 'a. distinct (undup xs)

lemma perm_eq_mem :
  forall xs ys : list 'a.
       (forall v. mem v xs <-> mem v ys)
    -> permut (undup xs) (undup ys)
end

(* ------------------------------------------------------------------------ *)
module ListFilter
use int.Int
use export list.List
use export list.Mem
use export list.Length

function filter (p : 'a -> bool) (xs : list 'a) : list 'a =
  match xs with
  | Nil ->
      Nil
  | Cons y ys ->
      if p y then Cons y (filter p ys) else filter p ys
  end
  
lemma length_filter :
  forall p. forall xs [@induction] : list 'a.
    length (filter p xs) <= length xs
    
lemma mem_filter :
  forall p. forall xs [@induction] : list 'a. forall x.
    mem x (filter p xs) <-> (mem x xs /\ p x)
end

(* ------------------------------------------------------------------------ *)
theory FSet

(* ------------------------------------------------------------------------ *)
use int.Int
use list.ListRich
use list.Distinct
use list.Quant
use ListFilter
use Undup

(* ------------------------------------------------------------------------ *)
type t

(* ------------------------------------------------------------------------ *)
val function eqt t t : bool

(* ------------------------------------------------------------------------ *)
axiom eqP : forall x y. eqt x y <-> x = y

(* ------------------------------------------------------------------------ *)
val function norm (xs : list t) : list t

(* ------------------------------------------------------------------------ *)
predicate normed (xs : list t) =
  norm xs = xs

(* ------------------------------------------------------------------------ *)
axiom normP : forall xs. permut (undup xs) (norm xs)
axiom normK : forall xs. norm (norm xs) = norm xs
axiom normI : forall xs ys. permut (undup xs) (undup ys) -> norm xs = norm ys

(* ------------------------------------------------------------------------ *)
type fset = {
  content : list t;
} invariant {
  normed content
} by { content = Nil }

(* ------------------------------------------------------------------------ *)
predicate fmem (x : t) (s : fset) =
  mem x s.content

(* ------------------------------------------------------------------------ *)
predicate (==) (s1 s2 : fset) =
  forall x. fmem x s1 <-> fmem x s2

(* ------------------------------------------------------------------------ *)
let function mk (xs : list t) : fset =
  { content = norm xs; }

(* ------------------------------------------------------------------------ *)
lemma mem_mk :
  forall xs x. fmem x (mk xs) <-> mem x xs

(* ------------------------------------------------------------------------ *)
let function fset0 : fset =
  mk Nil

(* ------------------------------------------------------------------------ *)
function fsetU (s1 s2 : fset) : fset =
  mk (s1.content ++ s2.content)

(* ------------------------------------------------------------------------ *)
function fsetI (s1 s2 : fset) : fset =
  mk (filter (fun x -> Quant.mem eqt x s2.content) s1.content)

(* ------------------------------------------------------------------------ *)
function fsetD (s1 s2 : fset) : fset =
  mk (filter (fun x -> not (Quant.mem eqt x s2.content)) s1.content)

(* ------------------------------------------------------------------------ *)
let function fcard (s : fset) : int =
  length s.content

(* ------------------------------------------------------------------------ *)
predicate fsubset (s1 s2 : fset) =
  forall x. fmem x s1 -> fmem x s2

(* ------------------------------------------------------------------------ *)
predicate fdisjoint (s1 s2 : fset) =
  fsetI s1 s2 == fset0

(* ------------------------------------------------------------------------ *)
axiom qmemP : forall eq : 'a -> 'a -> bool. forall x xs.
      Quant.mem eq x xs
  <-> exists y. eq x y /\ mem y xs

(* ------------------------------------------------------------------------ *)
lemma qmem_memP :
  forall xs ys z.
        mem z (filter (fun x -> Quant.mem eqt x xs) ys)
    <-> (mem z xs /\ mem z ys)

(* ------------------------------------------------------------------------ *)
lemma qmem_memNP :
  forall xs ys z.
        mem z (filter (fun x -> not (Quant.mem eqt x xs)) ys)
    <-> (not (mem z xs) /\ mem z ys)

(* ------------------------------------------------------------------------ *)
lemma in_fset0 :
  forall x. not (fmem x fset0)

(* ------------------------------------------------------------------------ *)
lemma in_fsetU :
  forall x s1 s2. (fmem x (fsetU s1 s2)) <-> (fmem x s1 \/ fmem x s2)

(* ------------------------------------------------------------------------ *)
lemma in_fsetI :
  forall x s1 s2. (fmem x (fsetI s1 s2)) <-> (fmem x s1 /\ fmem x s2)

(* ------------------------------------------------------------------------ *)
lemma in_fsetD :
  forall x s1 s2. (fmem x (fsetD s1 s2)) <-> (fmem x s1 /\ not (fmem x s2))

(* ------------------------------------------------------------------------ *)
lemma fsubset_eq : forall s1 s2.
  s1 == s2 <-> (fsubset s1 s2 /\ fsubset s2 s1)

(* ------------------------------------------------------------------------ *)
lemma fsubset0 : forall s. fsubset fset0 s

(* ------------------------------------------------------------------------ *)
lemma fsubsetUl : forall s1 s2. fsubset s1 (fsetU s1 s2)

(* ------------------------------------------------------------------------ *)
lemma fsubsetUr : forall s1 s2. fsubset s2 (fsetU s1 s2)

(* ------------------------------------------------------------------------ *)
lemma fsubsetIl : forall s1 s2. fsubset (fsetI s1 s2) s1

(* ------------------------------------------------------------------------ *)
lemma fsubsetIr : forall s1 s2. fsubset (fsetI s1 s2) s2

(* ------------------------------------------------------------------------ *)
lemma fsubsetD : forall s1 s2. fsubset (fsetD s1 s2) s1

(* ------------------------------------------------------------------------ *)
lemma fsubset_trans : forall s1 s2 s3. 
  fsubset s1 s2 -> fsubset s2 s3 -> fsubset s1 s3

(* ------------------------------------------------------------------------ *)
lemma fsetU_id : forall s1 s2. fsubset s1 s2 -> fsetU s1 s2 == s2

(* ------------------------------------------------------------------------ *)
lemma fsetU0 : forall s. fsetU s fset0 == s

(* ------------------------------------------------------------------------ *)
lemma fset0U : forall s. fsetU fset0 s == s

(* ------------------------------------------------------------------------ *)
lemma fsetUC : forall s1 s2. fsetU s1 s2 == fsetU s2 s1

(* ------------------------------------------------------------------------ *)
lemma fsetUA : forall s1 s2 s3. fsetU (fsetU s1 s2) s3 == fsetU s1 (fsetU s2 s3)

(* ------------------------------------------------------------------------ *)
lemma fsetI_id : forall s1 s2. fsubset s1 s2 -> fsetI s1 s2 == s1

(* ------------------------------------------------------------------------ *)
lemma fsetI0 : forall s. fsetI s fset0 == fset0

(* ------------------------------------------------------------------------ *)
lemma fset0I : forall s. fsetI fset0 s == fset0

(* ------------------------------------------------------------------------ *)
lemma fsetIC : forall s1 s2. fsetI s1 s2 == fsetI s2 s1

(* ------------------------------------------------------------------------ *)
lemma fsetIA : forall s1 s2 s3. fsetI (fsetI s1 s2) s3 == fsetI s1 (fsetI s2 s3)

(* ------------------------------------------------------------------------ *)
lemma fsetID : forall s1 s2. fsetU (fsetI s1 s2) (fsetD s1 s2) == s1

(* ------------------------------------------------------------------------ *)
lemma fsetD0 : forall s. fsetD s fset0 == s

(* ------------------------------------------------------------------------ *)
lemma fcard0 : fcard fset0 = 0

(* ------------------------------------------------------------------------ *)
lemma fcard_disjoint : forall s1 s2. fdisjoint s1 s2 ->
  fcard (fsetU s1 s2) = fcard s1 + fcard s2

(* ------------------------------------------------------------------------ *)
lemma fcard_eq : forall s1 s2. s1 == s2 -> fcard s1 = fcard s2

(* ------------------------------------------------------------------------ *)
lemma disjointID : forall s1 s2. fdisjoint (fsetI s1 s2) (fsetD s1 s2)

(* ------------------------------------------------------------------------ *)
lemma disjointDU : forall s1 s2. fdisjoint (fsetD s1 s2) s2

(* ------------------------------------------------------------------------ *)
lemma fsetUD : forall s1 s2. fsetU (fsetD s1 s2) s2 == fsetU s1 s2

(* ------------------------------------------------------------------------ *)
lemma fcardUD : forall s1 s2. fcard (fsetU s1 s2) = fcard (fsetD s1 s2) + fcard s2

(* ------------------------------------------------------------------------ *)
lemma fcardUI : forall s1 s2.
  fcard (fsetU s1 s2) + fcard (fsetI s1 s2) = fcard s1 + fcard s2


end
