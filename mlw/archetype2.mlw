theory Types

  use int.Int

  (* default type mapping *)
  type key     = int
  type role    = int
  type address = int
  type tez     = int
  type date    = int
  type string  = int

  exception Break
  exception NotFound
  exception KeyExist
  exception InvalidCaller
  exception InvalidCondition
  exception NoTransfer

end

module Trace

  use Types
  use list.List
  use list.Mem
  use option.Option

  type _asset
  type _entry
  type _field

  type _action = 
  | TrRm_ _asset
  | TrAdd_ _asset
  | TrUpdate_ _field
  | TrGet_ _asset
  | TrIterate _asset
  | TrTransfer int
  | TrCallContract int

  type _traces = list _action

  predicate changes_performed_by (changes : _traces) (tr : _traces) (p : bool) = 
  forall x : _action.
  mem x tr ->
  mem x changes ->
  p

  predicate performed_by  (tr : _traces) (p : bool) = 
  forall x : _action.
  mem x tr ->
  p

end

module IntListUtils
  use int.Int
  use list.List
  use list.Length

  let rec function lappend (l1 l2: list int) : list int 
  variant { l1 }
  =
  match l1 with
    | Nil -> l2
    | Cons x1 r1 -> Cons x1 (lappend r1 l2)
  end

  let rec function lmem (x: int) (l: list int) : bool 
  variant { l }
  =
  match l with
    | Nil      -> false
    | Cons e tl ->
    if x = e 
    then true
    else lmem x tl
    end

  let rec remove_key (l : list int) (k : int) : list int
  variant { l }
  = 
  match l with
  | Cons e tl ->
    if e = k
    then remove_key tl k
    else Cons e (remove_key tl k)
  | Nil -> Nil
  end

  val lwitness : int

  let rec lnth (i : int) (l : list int) : int
  variant { l }
  =
  match l with
  | Cons e tl ->
    if i = 0
    then e
    else lnth (i - 1) tl
  | Nil -> lwitness
  end

  let lcard (l : list int) : int = Length.length l

  let rec function eql (l1 l2 : list int) : bool
  variant { l1, l2 }
  =
  match l1, l2 with
  | Cons e1 tl1, Cons e2 tl2 ->
    if e1 = e2 then
      eql tl1 tl2
    else false
  | Nil, Nil -> true
  | _ -> false
  end

  lemma list_extensionality: forall l1 l2 : list int.
  eql l1 l2 -> l1 = l2

end

theory Contract

  use Types
  use int.Int
  use list.List
  use list.Mem as L

  type transfer = {
     destination_ : address;
     amount_      : tez;
  }

  type transfers = list transfer

  let no_transfer : transfers = Nil

end

module ListInsertSort

  use list.List
  use int.Int

  type t = abstract {}

  val function sortf t : int  (* asset sort function *)

  predicate lt (a b : t) = sortf a <= sortf b

  clone list.Sorted as S with type t       = t, 
                              predicate le = lt,
                              goal Transitive.Trans

  let rec function insert (a : t) (l : list t) : list t
  variant { l }
  =
  match l with
  | Cons e tl ->
    if sortf a <= sortf e then
      Cons a l
    else
      Cons e (insert a tl)
  | Nil -> Cons a Nil
  end

  let rec function sort (l : list t) : list t
  variant { l }
  ensures { S.sorted result }
  =
  match l with
  | Cons e tl -> insert e (sort tl)
  | Nil -> Nil
  end

end

module AssetCollection

  use Types
  use int.Int
  use list.List
  use list.Mem
  use option.Option
  use IntListUtils

  type t = abstract {}        (* asset type           *)
  val function sortf t : int  (* asset sort function  *)
  val function keyf  t : int  (* asset key function   *)
  val function eqf t t : bool (* asset equality *)

  clone ListInsertSort as S with type t     = t,
                                 val  sortf = sortf

  clone fset.FSet      as F with type t     = t,
                                 val  eqt   = eqf,
                                 val  norm  = S.sort              

  type collection = F.fset

  let rec function internal_mem (a : t) (l : list t) : bool 
  variant { l }
  ensures { result = true <-> mem a l }
  = 
  match l with
  | Cons e tl ->
    if eqf e a
    then true
    else internal_mem a tl
  | Nil -> false
  end 

  (* SET THEORY *)

  let rec function contains_key (k : key) (l : list t) : bool
  variant { l }
  =
  match l with
  | Cons e tl ->
    if keyf e = k
    then true
    else contains_key k tl
  | Nil -> false
  end

  let function contains (k : key) (c : collection) : bool 
  =
  contains_key k (F.content c)

  predicate mem (a : t) (c : collection) = F.fmem a c

  let function card (c : collection) : int 
  ensures { result >= 0 }
  = F.fcard c

  predicate (==) (c1 c2 : collection) = F.(==) c1 c2

  predicate subset (c1 c2 : collection) = F.fsubset c1 c2

  lemma subset_transitivity: forall c1 c2 c3 : collection.
  subset c1 c2 ->
  subset c2 c3 ->
  subset c1 c3

  function diff (c1 c2 : collection) : collection = F.fsetD c1 c2

  function inter (c1 c2 : collection) : collection = F.fsetI c1 c2

  function union (c1 c2 : collection) : collection = F.fsetU c1 c2

  (* empty *)
  let function empty = { F.content = Nil }

  predicate is_empty (c : collection) = is_nil (F.content c)

  lemma mem_empty : is_empty empty

  (* singleton *)
  let function singleton (a : t) : collection 
  = { F.content = Cons a Nil; }

  lemma mem_singleton: forall k1 k2 : t. mem k1 (singleton k2) -> k1 = k2

  lemma card_singleton: forall a : t. card (singleton a) = 1

  lemma subset_singleton: forall a : t, c : collection.
  subset (singleton a) c <-> mem a c

  (* Storage API *)

  let add (c : collection) (a : t)
  requires { not (mem a c) } 
  ensures { mem a result }
  ensures { result = union (singleton a) c }
  = { F.content = S.insert a (F.content c) } 

  let set (c : collection) (k : key) (a : t) : collection 
  = 
  let rec internal_set (l : list t) (k : key) (a : t) : list t 
  variant { l }
  = 
  match l with
  | Cons e tl ->
    if keyf e = k 
    then Cons a tl
    else Cons e (internal_set tl k a)
  | Nil -> Nil
  end in
  { F.content = internal_set (F.content c) k a }

  let remove (c : collection) (k : key) : collection 
  =
  let rec internal_remove (l : list t) (k : key) : list t
  variant { l }
  =
  match l with
  | Cons e tl ->
    if keyf e = k
    then tl
    else Cons e (internal_remove tl k)
  | Nil -> Nil
  end in
  { F.content = internal_remove (F.content c) k }

  let function oget (c : collection) (k : key) : option t 
  ensures { 
      match result with
      | None   -> not (contains k c)
      | Some a -> mem a c
      end
  }
  =
  let rec function internal_get (l : list t) (k : key) : option t
  variant { l }
  =
  match l with
  | Cons e tl -> 
    if keyf e = k
    then Some e
    else internal_get tl k
  | Nil -> None
  end in 
  internal_get (F.content c) k 

  let get (c : collection) (k : key) : t 
  raises { NotFound }
  ensures { mem result c \/ not (contains k c) }
  =
  match oget c k with
  | None   -> raise NotFound
  | Some a -> a 
  end

 let rec function to_ids (l : list t) : list key 
  variant { l }
  =
  match l with
  | Cons e tl -> Cons (keyf e) (to_ids tl)
  | Nil -> Nil
  end 

  let function unshallow (c : collection) (keys : list int) : collection
  = 
  let rec function internal_unshallow (l : list t) (keys : list int) : list t
  variant { l }
  =
  match l with
  | Cons e tl -> 
    if lmem (keyf e) keys
    then Cons e (internal_unshallow tl keys)
    else internal_unshallow tl keys
  | Nil -> Nil  
  end in
  { F.content = internal_unshallow (F.content c) keys }

  let rec function internal_nth (i : int) (l : list t) : option t
  variant { l }
  = 
  match l with
  | Cons e tl -> if i = 0 then Some e else internal_nth (i - 1) tl
  | Nil -> None
  end

  let function onth (i : int) (c : collection) : option t 
  ensures { 
    0 <= i < card c -> 
    match result with
    | Some a -> mem a c
    | None -> false
    end 
  }
  = 
  internal_nth i (F.content c)

  let nth (i : int) (c : collection) : t
  raises { NotFound }
  ensures { 0 <= i < card c -> mem result c }
  = 
  match onth i c with
  | None -> raise NotFound
  | Some a -> a
  end

  lemma nth_singleton: forall a : t. onth 0 (singleton a) = Some a

  let function proj (c : collection) (projf : t -> int) : list int 
  = 
   let rec internal_proj (l : list t) (projf : t -> int) : list int
  variant { l }
  = 
  match l with 
  | Cons e tl -> Cons (projf e) (internal_proj tl projf)
  | Nil -> Nil
  end in
  internal_proj (F.content c) projf

  (*use int.MinMax

  let function head (i : int) (c : collection) : collection
  ensures { card result = min i (card c) }
  ensures { subset result c }
  ensures { i >= card c - 1 -> result  = c }
  ensures { i < 0 -> result = empty }
  =
  let rec function internal_head (l : list t) (k : int) 
  =
  match l with
  | Cons e tl ->
    if k <= i then
      Cons e (internal_head tl (k+1))
    else
      Nil
  | Nil -> Nil 
  end in
  { content = internal_head c.content 0 } 

  lemma head_add: forall c : collection, i : int. 
  0 <= i < card c - 1 ->
  head (i+1) c = union (head i c) (singleton (nth i c))
  
  lemma head_nth: forall c : collection, i j : int.
  0 <= i < j < card c ->
  nth i (head j c) = nth i c*)

  let function tail (i : int) (c : collection) : collection  
  ensures { subset result c }
  ensures { 0 <= i < card c -> card result = card c - i }
  ensures { i >= card c ->  result = empty }
  ensures { 
    forall j: int. 0<= i <= j < card c ->
    match onth j c with
    | None   -> false
    | Some a -> mem a result
    end
  }
  = 
  let rec function internal_tail (l : list t) (k : int) (i : int) 
  = 
  match l with
  | Cons e tl ->
    if k < i then
      internal_tail tl (k+1) i
    else Cons e (internal_tail tl (k+1) i)
  | Nil -> Nil
  end in
  { F.content = internal_tail (F.content c) 0 i }

  lemma tail_all: forall c : collection. tail 0 c = c 

  lemma tail_add: forall c : collection, i : int. 
  0 <= i < card c ->
  match onth i c with
  | None -> false
  | Some a -> tail (i+1) c = diff (tail i c) (singleton a)
  end

  (* lemma tail_subset: forall c : collection, i : int.
  0 <= i < card c ->
  subset (tail (i+1) c) (tail i c) *)
  
  lemma tail_nth: forall c : collection, i j : int.
  0 <= j < card c ->
  0 <= i < card c - j ->
  match onth (i+j) c with
  | None -> false
  | Some a2 -> 
    match onth i (tail j c) with
    | None -> false
    | Some a1 -> a1 = a2
    end
  end

  let function to_coll (l : list t) 
  (*ensures { S.sorted result <-> S.sorted l }*)
  ensures { forall k : key. contains k result <-> contains_key k l }
  ensures { forall a : t. mem a result <-> internal_mem a l }
  ensures { forall i : int. 
  match onth i result with
  | None -> false
  | Some a1 -> 
    match internal_nth i l with 
    | None -> false
    | Some a2 -> eqf a1 a2 
    end
  end
  }
  = { F.content = l }

  goal sanity_check : false

  let content (c : collection) : list t = F.content c

  let mk (l : list t) : collection = {
      F.content = l
  }

end

module Sum 

  use  int.Int
  type container
  type t

  val function f container int : int
  val function field t : int
  val function nth int container : t
  val function card container : int
  function inter container container : container
  function union container container : container
  function diff  container container : container
  predicate subset container container
  predicate is_empty container
  val function singleton t : container
  val function witness : t
  val function keyf t : int

  let function sum (c : container) : int = 
    let ref res = 0 in
    for i = 0 to card c - 1 do
      res <- res + f c i
    done;
    res

  (* sum over empty is zero *)
  lemma sum_empty:
    forall c : container. card c = 0 -> sum c = 0

  lemma sum_ge_zero:
    forall c : container.
    not (is_empty c) ->
    (forall i : int. 0 <= i < card c -> f c i >= 0) ->
    sum c >= 0
  
  lemma sum_singleton: forall a : t.
  a <> witness ->
  sum (singleton a) = field a
  
  lemma sum_union:
    forall c1 c2 : container.
    sum (union c1 c2) = sum c1 + sum c2 - sum (inter c1 c2)

  lemma sum_diff:
    forall c1 c2 : container.
    subset c2 c1 ->
    sum (diff c1 c2) = sum c1 - sum c2 

end

theory Lib
  
  use export int.Int
  use export list.List
  use export option.Option
  use export Types
  use export Contract
  use export AssetCollection
  use export IntListUtils
  use export Trace

end