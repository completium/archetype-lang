archetype a2(
  owner  : address,
  users  : address
)

constant CONTRACT_NOT_PAUSED               : string = "CONTRACT_NOT_PAUSED"
constant CONTRACT_PAUSED                   : string = "CONTRACT_PAUSED"
constant FROM_INVALID_UNRESTRICTED_STATE   : string = "FROM_INVALID_UNRESTRICTED_STATE"
constant FROM_RESTRICTED                   : string = "FROM_RESTRICTED"
constant FROM_TRANSFERLIST_NOT_FOUND       : string = "FROM_TRANSFERLIST_NOT_FOUND"
constant INTERNAL_ERROR                    : string = "INTERNAL_ERROR"
constant TO_INVALID_UNRESTRICTED_STATE     : string = "TO_INVALID_UNRESTRICTED_STATE"
constant TO_NOT_ALLOWED                    : string = "TO_NOT_ALLOWED"
constant TO_RESTRICTED                     : string = "TO_RESTRICTED"
constant TO_TRANSFERLIST_NOT_FOUND         : string = "TO_TRANSFERLIST_NOT_FOUND"
constant TO_TRANSFERLIST_NOT_FOUND_IN_FROM : string = "TO_TRANSFERLIST_NOT_FOUND_IN_FROM"
constant USER_GETOPT_INTERNAL_ERROR        : string = "USER_GETOPT_INTERNAL_ERROR"
constant USER_RESTRICTED                   : string = "USER_RESTRICTED"

/* OWNERSHIP TRANSFER ------------------------------------------------------- */

variable owner_candidate : option<address> = none

entry declare_ownership(candidate : address) {
  no transfer
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  no transfer
  require {
    ownership_r1: (owner_candidate ? the = caller : false) otherwise "INVALID_CALLER"
  }
  effect {
    owner := caller;
    owner_candidate := none
  }
}

/*  PAUSABLE ----------------------------------------------------------------- */

variable paused : bool = false

function is_not_paused() : bool {
  do_fail_if(paused, "CONTRACT_PAUSED");
  return true
}

entry pause() {
  no transfer
  called by owner
  require {
    pausable_r1: is_not_paused()
  }
  effect {
    paused := true
  }
}

entry unpause() {
  no transfer
  called by owner
  require {
    pausable_r2: paused otherwise "CONTRACT_NOT_PAUSED"
  }
  effect {
    paused := false
  }
}

/* METADATA ---------------------------------------------------------------- */

entry set_metadata(k: string, d : option<bytes>) {
  no transfer
  called by owner
  require { md_r1 : is_not_paused() }
  effect {
    metadata.update(k, d)
  }
}

/* SUPERUSERS -------------------------------------------------------------- */

variable superusers : set<address> = []

entry addSuperuser (su : address) {
  no transfer
  called by owner
  effect {
    superusers.add(su)
  }
}

entry removeSuperuser (su : address) {
  no transfer
  called by owner
  effect {
    superusers.remove(su)
  }
}

/* WHITELISTERS ------------------------------------------------------------ */

asset whitelister {
  waddr: address
}

entry addWhitelister(v : address) {
  no transfer
  called by owner
  effect {
    whitelister.add({waddr = v})
  }
}

entry removeWhitelister(v : address) {
  no transfer
  called by owner
  effect {
    whitelister.remove(v)
  }
}

/* WHITELIST CONTRACT ------------------------------------------------------ */

record transferlist {
  unrestricted         : bool;
  allowedTransferlists : set<nat>;
}
variable transferlists : big_map<nat, transferlist> = []

function assertReceiver(addr : address) : bool {
  const optv ?= call_view<option<nat>>(users, "getopt", addr) : USER_GETOPT_INTERNAL_ERROR;
  return (optv ? (transferlists[the] ? the.unrestricted : false) : false)
}

entry assertReceivers (addrs : list<address>) {
  for addr in addrs do
    do_require(assertReceiver(addr), USER_RESTRICTED)
  done
}

entry assertTransfers (input_list : list<address * list<address>>) {
  for input_item in input_list do
    var %from = input_item[0];
    var tos   = input_item[1];
    for %to in tos do
      match call_view<string>(self_address, "assertTransfer", (caller, %from, %to)) with
      | some(v) ->  if v <> "" then fail(v)
      | none -> fail(INTERNAL_ERROR)
      end
    done
  done
}

entry assertTransferlist (fromTransferListId : nat, toTransferListId : nat) {
  const fr_ ?= transferlists[fromTransferListId] : FROM_TRANSFERLIST_NOT_FOUND;
  const to_ ?= transferlists[toTransferListId] : TO_TRANSFERLIST_NOT_FOUND;
  do_require(fr_.unrestricted, FROM_INVALID_UNRESTRICTED_STATE);
  do_require(to_.unrestricted, TO_INVALID_UNRESTRICTED_STATE);
  do_require(fr_.allowedTransferlists.contains(toTransferListId), TO_TRANSFERLIST_NOT_FOUND_IN_FROM);
}

entry updateUser (user : address, transferlistId : option<nat>) {
  called by owner or whitelister
  require {
    r0: is_not_paused();
  }
  effect {
    transfer 0tz to users call update<address * option<nat>>((user, transferlistId))
  }
}

entry updateUsers (utl : list<address * option<nat>>) {
  called by owner or whitelister
  require {
    r1: is_not_paused();
  }
  effect {
    for i in utl do
      var user = i[0];
      var transferlistId = i[1];
      transfer 0tz to users call update<address * option<nat>>((user, transferlistId))
    done
  }
}

entry updateTransferlist (
    transferlistId : nat,
    u : option<(bool * set<nat>)>) {
  called by owner
  require {
    r2: is_not_paused();
  }
  effect {
    match u with
    | some v -> begin
      var ltransferlist = {unrestricted = v[0]; allowedTransferlists = v[1]};
      transferlists.put(transferlistId, ltransferlist)
      end
    | none -> transferlists.remove(transferlistId)
    end
  }
}

getter getUser (user : address) : option<nat> {
  var res = none<nat>;
  match call_view<option<nat>>(users, "getopt", user) with
  | some optv -> res := optv
  | none -> fail(USER_GETOPT_INTERNAL_ERROR)
  end;
  return res
}

view assertTransfer (sender : address, %from : address, %to : address) : string {
  var res : string = "";
  var fromidopt = none<nat>;
  var toidopt = none<nat>;
  var is_from_restricted = false;
  match call_view<option<nat>>(users, "getopt", %from) with
  | some optv ->
    fromidopt := optv;
    match optv with
    | some v ->
        match transferlists[v] with
        | some(r) -> is_from_restricted := not r.unrestricted
        | none ->    is_from_restricted := true
        end
    | none   ->      is_from_restricted := true
    end
  | none -> fail(USER_GETOPT_INTERNAL_ERROR)
  end;
  if is_from_restricted then
    res := FROM_RESTRICTED
  else begin
    var is_to_restricted = false;
    match call_view<option<nat>>(users, "getopt", %to) with
    | some optv ->
      toidopt := optv;
      match optv with
      | some v ->
          match transferlists[v] with
          | some(r) -> is_to_restricted := not r.unrestricted
          | none ->    is_to_restricted := true
          end
      | none   ->      is_to_restricted := true
      end
    | none -> fail(USER_GETOPT_INTERNAL_ERROR)
    end;
    if is_to_restricted then
      res := TO_RESTRICTED
    else begin
      const fromid ?= fromidopt : INTERNAL_ERROR;
      const toid ?= toidopt : INTERNAL_ERROR;
      if not superusers.contains(sender)
      then begin
        match transferlists[fromid] with
        | some(a) -> begin
          const allowedlists = a.allowedTransferlists;
          if not allowedlists.contains(toid)
          then res := TO_NOT_ALLOWED
        end
        | none -> fail(INTERNAL_ERROR)
        end
      end
    end
  end;
  return res
}
