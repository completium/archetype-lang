// LIGO output generated by archetype 1.0.1

// contract: fa12

// To generate origination storage string please execute the following command:
// ligo compile-storage fa12.ligo main '0'


type storage_type is nat
type action_balanceInquiry is record [
  v : nat;
]

type action_exec is unit

type action is
  | BalanceInquiry of action_balanceInquiry
  | Exec of action_exec

function balanceInquiry(const action : nat; const s_ : storage_type) : (list(operation) * storage_type) is
  begin
  s_ := action;
  end with ((nil : list(operation)), s_)

function exec(const action : action_exec; const s_ : storage_type) : (list(operation) * storage_type) is
  begin
  var ops_ : list(operation) := (nil : list(operation));

  const token : address = ("KT1Nt4mkc3p5gqykuBbFyWiz7d7nmJNhkT8V" : address);
  const gb : contract(contract(nat)) =
                        case (Tezos.get_entrypoint_opt("%getBalance", token) : option(contract(contract(nat)))) of
                            | Some (cb) -> cb
                            | None -> (failwith ("Not a contract"): contract (contract(nat)))
                        end;

  const bi : contract(nat) =
                        case (Tezos.get_entrypoint_opt("%balanceInquiry", Tezos.self_address) : option(contract(nat))) of
                            | Some (cb) -> cb
                            | None -> (failwith ("Not a contract"): contract (nat))
                        end;

  const op_ : operation = Tezos.transaction(bi, 0mutez, gb);
  ops_ := cons(op_, ops_)
  end with (ops_, s_)

function main(const action : action ; const s_ : storage_type) : (list(operation) * storage_type) is
  block {skip} with
  case action of
  | BalanceInquiry (a_) -> balanceInquiry(a_.v, s_)
  | Exec (a_) -> exec(a_, s_)
  end
