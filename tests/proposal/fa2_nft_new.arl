archetype fa2_nft(owner : address)
with metadata ""

variable pause_ : bool = false

function mustBeUnpause() : bool {
  dorequire(not pause_, "CONTRACT_PAUSED");
  return true
}

asset ledger identified by lowner ltoken to big_map {
  lowner     : address;
  ltoken     : nat;
  lamount    : nat = 0;
}

asset operator identified by oaddr otoken oowner to big_map {
  oaddr       : address;
  otoken      : nat;
  oowner      : address;
  oempty      : unit = Unit;
}

asset operator_for_all identified by fa_oaddr fa_oowner to big_map {
  fa_oaddr    : address;
  fa_oowner   : address;
  fa_empty    : unit = Unit;
}

asset token_metadata to big_map {
  key_token_id   : nat;
  extras         : map<string, bytes>;
}

record operator_param {
  opp_owner    : address;
  opp_operator : address;
  opp_token_id : nat
} as ((owner, (operator, token_id)))

enum update_operator_item =
| add_operator    <operator_param>
| remove_operator <operator_param>

entry update_operators (upl : list<update_operator_item>) {
  require {
    r0: mustBeUnpause()
  }
  effect {
    for up in upl do
      match up with
      | add_operator(param)  -> (* add *)
        dorequire(ledger.contains((caller, param.opp_token_id)), "CALLER NOT OWNER");
        operator.add({oaddr = param.opp_operator; otoken = param.opp_token_id; oowner = param.opp_owner })
      | remove_operator(param) -> (* remove *)
        dorequire(ledger.contains((caller, param.opp_token_id)), "CALLER NOT OWNER");
        operator.remove((param.opp_operator, param.opp_token_id, param.opp_owner))
      end;
    done
  }
}

entry update_operators_for_all (upl : list<or<address, address>>) {
  require {
    r1: mustBeUnpause()
  }
  effect {
    for up in upl do
      match up with
      | left(op)  -> (* add *)
        operator_for_all.add({fa_oaddr = op; fa_oowner = source})
      | right(op) -> (* remove *)
        operator_for_all.remove((op, source))
      end;
    done
  }
}

record transfer_destination {
  to_dest           : address;
  token_id_dest     : nat;
  token_amount_dest : nat
} as ((%to, (token_id, amount)))

entry %transfer (txs : list<address * list<transfer_destination>>) {
  require {
    r2: mustBeUnpause()
  }
  effect {
    for tx in txs do
      var %from = tx[0];
      var tds = tx[1];
      for td in tds do begin
        if caller <> %from then begin
          (* check operator *)
          dorequire(operator.contains((caller,td.token_id_dest,%from)) or operator_for_all.contains((caller, %from)),"FA2_NOT_OPERATOR");
        end;
        (* set token ownership *)
        var tokenid = td.token_id_dest;
        var amount = ledger[(%from, tokenid)].lamount;
        if td.token_amount_dest > amount then
          fail("FA2_INSUFFICIENT_BALANCE")
        else if td.token_amount_dest = amount then
          ledger.remove((%from, tokenid))
        else
          ledger.update((%from, tokenid), { lamount -= td.token_amount_dest });
        ledger.addupdate((td.to_dest, tokenid), { lamount += td.token_amount_dest })
      end done;
    done
  }
}

record balance_of_request {
  bo_owner : address;
  btoken_id : nat;
} as ((owner, token_id))

record balance_of_response {
  request : balance_of_request;
  balance_ : nat;
} as ((request, balance))

getter balance_of (requests : list<balance_of_request>) : list<balance_of_response> {
  return map(requests, br -> {
    request = br;
    balance_ = (
      if ledger.contains((br.bo_owner, br.btoken_id))
      then ledger[(br.bo_owner, br.btoken_id)].lamount
      else 0
    )
  })
}

entry mint (itokenid : nat, iowner : address, iamount : nat) {
  called by owner
  require {
    r3: mustBeUnpause()
  }
  effect {
    ledger.add({ iowner; itokenid; iamount });
  }
}

entry burn(itokenid : nat, iowner : address, iamount : nat) {
  called by owner
  require {
    r4: mustBeUnpause()
  }
  effect {
    var vamount = ledger[(iowner, itokenid)].lamount;
    if (vamount > iamount)
    then ledger.update((iowner, itokenid), { lamount -= iamount })
    else if (vamount = iamount)
      then ledger.remove((iowner, itokenid))
      else fail("FA2_INSUFFICIENT_BALANCE")
  }
}

entry setMetadataUri(idata : bytes) {
  called by owner
  effect {
    metadata := put(metadata, "", idata)
  }
}

entry setTokenMetadata(iTokenId : nat, iExtras : map<string, bytes>) {
  called by owner
  effect {
    token_metadata.addupdate(iTokenId, {extras = iExtras});
  }
}

entry pause() {
  require {
    r5: mustBeUnpause()
  }
  effect {
    pause_ := true
  }
}

entry unpause() {
  require {
    r6: pause_ otherwise "CONTRACT_UNPAUSE"
  }
  effect {
    pause_ := false
  }
}