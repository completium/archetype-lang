archetype asset_api_spec

asset assetA {
  ida : string;
  vala : int;
} initialized by {
  {"a1"; 0};
  {"a2"; 1};
  {"a3"; 2}
}

asset assetB {
  idb : string;
  valb : int;
} initialized by {
  {"b1"; 0};
  {"b2"; 1};
  {"b3"; 2}
}

asset assetPart {
  idp : string;
  part : partition<assetB>;
}

asset assetAgg {
  idag : string;
  agg : aggregate<assetB>;
}

/* ------------------------------------------------------------------------- */
entry addA (id : string, val : int) {
  specification {
    /* API specification --------------------------------------------------- */
    s0add: forall k : string, k <> id -> assetA[k] = before.assetA[k];
    s1add: assetA[id] = some({ida = id; vala = val});
    /* set theory specification -------------------------------------------- */
    s2add: assetA = before.assetA.union(assetA.singleton({id; val}));
    s3add: before.assetA = assetA.diff(assetA.singleton({id; val}));
    s4add: added.assetA = assetA.singleton({id; val});
    s5add: removed.assetA = assetA.empty();
    s3add: assetA.count() = before.assetA.count() + 1;
  }
  effect {
    assetA.add({id;val});
  }
}

/* ------------------------------------------------------------------------- */
entry updateA (id : string, val : int) {
  specification {
    /* API specification --------------------------------------------------- */
    s0upd: forall k : string, k <> id -> assetA[k] = before.assetA[k];
    s1upd: assetA[id] = some({ida = id; vala = val});
    /* set theory specification -------------------------------------------- */
    s2upd: let some a = before.assetA[id] in
           assetA = before.assetA.diff(assetA.singleton(a)).union(assetA.singleton({ ida = id;vala = val}))
           otherwise true;
    s3upd: assetA.count() = before.assetA.count();
  }
  effect {
    assetA.update(id, {vala = val});
  }
}

/* ------------------------------------------------------------------------- */
entry rmA (id : string) {
  specification {
    /* API specification --------------------------------------------------- */
    s0rm: forall k : string, k <> id -> assetA[k] = before.assetA[k];
    s1rm: (let noneA : option<assetA> = none in assetA[id] = noneA);
    /* set theory specification -------------------------------------------- */
    s2rm: let some a = before.assetA[id] in
            assetA = before.assetA.diff(assetA.singleton(a))
          otherwise true;
    s3rm: let some a = before.assetA[id] in
            removed.assetA = assetA.singleton(a)
          otherwise true;
    s4rm: added.assetA = assetA.empty();
    s5rm: not before.assetA.contains(id) -> assetA.count() = before.assetA.count() - 1;
  }
  effect {
    assetA.remove(id);
  }
}