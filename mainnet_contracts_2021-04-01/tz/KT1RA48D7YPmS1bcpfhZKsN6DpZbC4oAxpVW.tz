{
  storage (pair (pair (pair (pair (map %deck int (map int int)) (string %doneWith)) (bool %draw)) (int %nbMoves)) (int %winner));
  parameter (pair (pair (int %i) (int %j)) (int %move));
  code { DUP;
         CDR;
         CDR;
         PUSH int 0;
         COMPARE;
         EQ;
         IF
           { DUP;
             CDR;
             CAR;
             CAR;
             CDR;
             NOT }
           { PUSH bool False };
         IF
           {  }
           { PUSH string "WrongCondition: (self.data.winner == 0) & (~ self.data.draw)";
             FAILWITH };
         DUP;
         CAR;
         CAR;
         CAR;
         PUSH int 0;
         SWAP;
         COMPARE;
         GE;
         IF
           { PUSH int 3;
             DIP { DUP };
             SWAP;
             CAR;
             CAR;
             CAR;
             COMPARE;
             LT }
           { PUSH bool False };
         IF
           {  }
           { PUSH string "WrongCondition: (params.i >= 0) & (params.i < 3)";
             FAILWITH };
         DUP;
         CAR;
         CAR;
         CDR;
         PUSH int 0;
         SWAP;
         COMPARE;
         GE;
         IF
           { PUSH int 3;
             DIP { DUP };
             SWAP;
             CAR;
             CAR;
             CDR;
             COMPARE;
             LT }
           { PUSH bool False };
         IF
           {  }
           { PUSH string "WrongCondition: (params.j >= 0) & (params.j < 3)";
             FAILWITH };
         DUP;
         CAR;
         CDR;
         PUSH int 1;
         COMPARE;
         EQ;
         IF
           { PUSH bool True }
           { PUSH int 2;
             DIP { DUP };
             SWAP;
             CAR;
             CDR;
             COMPARE;
             EQ };
         IF
           {  }
           { PUSH string "WrongCondition: (params.move == 1) | (params.move == 2)";
             FAILWITH };
         DUP;
         CDR;
         CAR;
         CAR;
         CAR;
         CAR;
         PUSH int 0;
         SWAP;
         DIP { DIP { DUP }; SWAP };
         SWAP;
         CAR;
         CAR;
         CAR;
         GET;
         IF_NONE
           { UNIT;
             FAILWITH }
           {  };
         DIP { DIP { DUP }; SWAP };
         SWAP;
         CAR;
         CAR;
         CDR;
         GET;
         IF_NONE
           { UNIT;
             FAILWITH }
           {  };
         COMPARE;
         EQ;
         IF
           {  }
           { PUSH string "WrongCondition: self.data.deck[params.i][params.j] == 0";
             FAILWITH };
         DUP;
         CDR;
         DUP;
         CAR;
         CAR;
         CAR;
         CAR;
         DIP { DIP { DUP }; SWAP };
         SWAP;
         CAR;
         CAR;
         CAR;
         PAIR;
         DUP;
         DIP { DUP; CAR; DIP { CDR } };
         DUP;
         CAR;
         DIP { CDR };
         GET;
         IF_NONE
           { UNIT;
             FAILWITH }
           {  };
         DIP { DIP { DIP { DIP { DUP }; SWAP }; SWAP }; SWAP };
         SWAP;
         CAR;
         CAR;
         CDR;
         DIP { DIP { DIP { DIP { DIP { DUP }; SWAP }; SWAP }; SWAP }; SWAP };
         SWAP;
         CAR;
         CDR;
         SOME;
         SWAP;
         UPDATE;
         SOME;
         SWAP;
         UPDATE;
         SWAP;
         DUP;
         DIP { CAR; DUP; DIP { CAR; DUP; DIP { CAR; CDR; SWAP; PAIR }; CDR; SWAP; PAIR }; CDR; SWAP; PAIR };
         CDR;
         SWAP;
         PAIR;
         SWAP;
         CAR;
         PAIR;
         DUP;
         CDR;
         DUP;
         CAR;
         CDR;
         PUSH int 1;
         ADD;
         SWAP;
         DUP;
         DIP { CAR; CAR; PAIR };
         CDR;
         SWAP;
         PAIR;
         SWAP;
         CAR;
         PAIR;
         DUP;
         CDR;
         CAR;
         CAR;
         CAR;
         CAR;
         PUSH int 0;
         SWAP;
         DIP { DIP { DUP }; SWAP };
         SWAP;
         CAR;
         CAR;
         CAR;
         GET;
         IF_NONE
           { UNIT;
             FAILWITH }
           {  };
         PUSH int 0;
         GET;
         IF_NONE
           { UNIT;
             FAILWITH }
           {  };
         COMPARE;
         NEQ;
         IF
           { DUP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             DIP { DUP };
             SWAP;
             CAR;
             CAR;
             CAR;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 1;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             DIP { DUP };
             SWAP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             DIP { DIP { DUP }; SWAP };
             SWAP;
             CAR;
             CAR;
             CAR;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             COMPARE;
             EQ }
           { PUSH bool False };
         IF
           { DUP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             DIP { DUP };
             SWAP;
             CAR;
             CAR;
             CAR;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 2;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             DIP { DUP };
             SWAP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             DIP { DIP { DUP }; SWAP };
             SWAP;
             CAR;
             CAR;
             CAR;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             COMPARE;
             EQ }
           { PUSH bool False };
         IF
           { DUP;
             CDR;
             DUP;
             CAR;
             CAR;
             CAR;
             CAR;
             DIP { DIP { DUP }; SWAP };
             SWAP;
             CAR;
             CAR;
             CAR;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             SWAP;
             CAR;
             PAIR;
             SWAP;
             CAR;
             PAIR }
           {  };
         DUP;
         CDR;
         CAR;
         CAR;
         CAR;
         CAR;
         PUSH int 0;
         SWAP;
         PUSH int 0;
         GET;
         IF_NONE
           { UNIT;
             FAILWITH }
           {  };
         DIP { DIP { DUP }; SWAP };
         SWAP;
         CAR;
         CAR;
         CDR;
         GET;
         IF_NONE
           { UNIT;
             FAILWITH }
           {  };
         COMPARE;
         NEQ;
         IF
           { DUP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 1;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             DIP { DUP };
             SWAP;
             CAR;
             CAR;
             CDR;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             DIP { DUP };
             SWAP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             DIP { DIP { DUP }; SWAP };
             SWAP;
             CAR;
             CAR;
             CDR;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             COMPARE;
             EQ }
           { PUSH bool False };
         IF
           { DUP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 2;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             DIP { DUP };
             SWAP;
             CAR;
             CAR;
             CDR;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             DIP { DUP };
             SWAP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             DIP { DIP { DUP }; SWAP };
             SWAP;
             CAR;
             CAR;
             CDR;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             COMPARE;
             EQ }
           { PUSH bool False };
         IF
           { DUP;
             CDR;
             DUP;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             DIP { DIP { DUP }; SWAP };
             SWAP;
             CAR;
             CAR;
             CDR;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             SWAP;
             CAR;
             PAIR;
             SWAP;
             CAR;
             PAIR }
           {  };
         DUP;
         CDR;
         CAR;
         CAR;
         CAR;
         CAR;
         PUSH int 0;
         SWAP;
         PUSH int 0;
         GET;
         IF_NONE
           { UNIT;
             FAILWITH }
           {  };
         PUSH int 0;
         GET;
         IF_NONE
           { UNIT;
             FAILWITH }
           {  };
         COMPARE;
         NEQ;
         IF
           { DUP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 1;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 1;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             DIP { DUP };
             SWAP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             COMPARE;
             EQ }
           { PUSH bool False };
         IF
           { DUP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 2;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 2;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             DIP { DUP };
             SWAP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             COMPARE;
             EQ }
           { PUSH bool False };
         IF
           { DUP;
             CDR;
             DUP;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             SWAP;
             CAR;
             PAIR;
             SWAP;
             CAR;
             PAIR }
           {  };
         DUP;
         CDR;
         CAR;
         CAR;
         CAR;
         CAR;
         PUSH int 0;
         SWAP;
         PUSH int 0;
         GET;
         IF_NONE
           { UNIT;
             FAILWITH }
           {  };
         PUSH int 2;
         GET;
         IF_NONE
           { UNIT;
             FAILWITH }
           {  };
         COMPARE;
         NEQ;
         IF
           { DUP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 1;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 1;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             DIP { DUP };
             SWAP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 2;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             COMPARE;
             EQ }
           { PUSH bool False };
         IF
           { DUP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 2;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             DIP { DUP };
             SWAP;
             CDR;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 2;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             COMPARE;
             EQ }
           { PUSH bool False };
         IF
           { DUP;
             CDR;
             DUP;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH int 0;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             PUSH int 2;
             GET;
             IF_NONE
               { UNIT;
                 FAILWITH }
               {  };
             SWAP;
             CAR;
             PAIR;
             SWAP;
             CAR;
             PAIR }
           {  };
         DUP;
         CDR;
         CAR;
         CDR;
         PUSH int 9;
         COMPARE;
         EQ;
         IF
           { PUSH int 0;
             DIP { DUP };
             SWAP;
             CDR;
             CDR;
             COMPARE;
             EQ }
           { PUSH bool False };
         IF
           { DUP;
             CDR;
             PUSH bool True;
             SWAP;
             DUP;
             DIP { CAR; DUP; DIP { CAR; CAR; PAIR }; CDR; SWAP; PAIR };
             CDR;
             SWAP;
             PAIR;
             SWAP;
             CAR;
             PAIR }
           {  };
         CDR;
         NIL operation;
         PAIR };
}
