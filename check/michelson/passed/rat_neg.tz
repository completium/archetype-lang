{ storage
    (pair (pair %a int nat)
          (pair %b int nat)
          (pair %c int nat)
          (pair %d int nat)
          (pair %na int nat)
          (pair %nb int nat)
          (pair %nc int nat)
          (pair %nd int nat)
          (pair %ca int nat)
          (pair %cb int nat)
          (pair %cc int nat)
          (pair %cd int nat)) ;
  parameter (unit %exec) ;
  code { LAMBDA
           (pair (pair (pair int nat) (pair int nat)) (or unit (or (or unit unit) (or unit unit))))
           bool
           { UNPAIR ;
             UNPAIR ;
             DIP 1 { UNPAIR } ;
             UNPAIR ;
             DUG 3 ;
             MUL ;
             DIP 1 { MUL } ;
             SWAP ;
             COMPARE ;
             SWAP ;
             IF_LEFT
               { DROP 1 ; EQ }
               { IF_LEFT
                   { IF_LEFT { DROP 1 ; LT } { DROP 1 ; LE } }
                   { IF_LEFT { DROP 1 ; GT } { DROP 1 ; GE } } } } ;
         SWAP ;
         UNPAIR ;
         DIP 1 { UNPAIR 12 } ;
         DROP 1 ;
         PUSH nat 2 ;
         PUSH int 1 ;
         PAIR ;
         PUSH nat 2 ;
         PUSH int -1 ;
         PAIR ;
         PUSH nat 2 ;
         PUSH int -1 ;
         PAIR ;
         PUSH nat 2 ;
         PUSH int 1 ;
         PAIR ;
         UNIT ;
         LEFT unit ;
         DUP 5 ;
         DUP 7 ;
         DIP 1 { UNPAIR ; SWAP ; DUP } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DIG 3 ;
         MUL ;
         DUP ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         DUG 4 ;
         DIG 3 ;
         MUL ;
         DIP 1 { MUL } ;
         DIG 3 ;
         IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
         PAIR ;
         DIP 1 { DIG 12 ; DROP 1 } ;
         DUG 12 ;
         UNIT ;
         LEFT unit ;
         DUP 4 ;
         DUP 8 ;
         DIP 1 { UNPAIR ; SWAP ; DUP } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DIG 3 ;
         MUL ;
         DUP ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         DUG 4 ;
         DIG 3 ;
         MUL ;
         DIP 1 { MUL } ;
         DIG 3 ;
         IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
         PAIR ;
         DIP 1 { DIG 13 ; DROP 1 } ;
         DUG 13 ;
         UNIT ;
         LEFT unit ;
         DUP 3 ;
         DUP 9 ;
         DIP 1 { UNPAIR ; SWAP ; DUP } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DIG 3 ;
         MUL ;
         DUP ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         DUG 4 ;
         DIG 3 ;
         MUL ;
         DIP 1 { MUL } ;
         DIG 3 ;
         IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
         PAIR ;
         DIP 1 { DIG 14 ; DROP 1 } ;
         DUG 14 ;
         UNIT ;
         LEFT unit ;
         DUP 2 ;
         DUP 10 ;
         DIP 1 { UNPAIR ; SWAP ; DUP } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DIG 3 ;
         MUL ;
         DUP ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         DUG 4 ;
         DIG 3 ;
         MUL ;
         DIP 1 { MUL } ;
         DIG 3 ;
         IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
         PAIR ;
         DIP 1 { DIG 15 ; DROP 1 } ;
         DUG 15 ;
         DUP 17 ;
         UNIT ;
         LEFT (or (or unit unit) (or unit unit)) ;
         PUSH nat 2 ;
         PUSH int 1 ;
         PAIR ;
         PUSH nat 2 ;
         PUSH int 1 ;
         PAIR ;
         PAIR ;
         PAIR ;
         EXEC ;
         NOT ;
         IF { PUSH string "ko" ; FAILWITH } {} ;
         DROP 4 ;
         PAIR 12 ;
         NIL operation ;
         PAIR ;
         DIP 1 { DROP 1 } } }
