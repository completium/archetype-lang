{ storage (map address (pair int nat)) ;
  parameter (pair %exec int nat) ;
  code { LAMBDA
           (pair (pair (pair int nat) (pair int nat)) (or unit (or (or unit unit) (or unit unit))))
           bool
           { UNPAIR ;
             UNPAIR ;
             DIP 1 { UNPAIR } ;
             UNPAIR ;
             DUG 3 ;
             MUL ;
             DIP 1 { MUL } ;
             SWAP ;
             COMPARE ;
             SWAP ;
             IF_LEFT
               { DROP 1 ; EQ }
               { IF_LEFT
                   { IF_LEFT { DROP 1 ; LT } { DROP 1 ; LE } }
                   { IF_LEFT { DROP 1 ; GT } { DROP 1 ; GE } } } } ;
         LAMBDA
           (pair int nat)
           (pair int nat)
           { PUSH unit Unit ; DUP 2 ; SWAP ; DROP 1 ; SWAP ; DROP 1 } ;
         NIL operation ;
         DIG 3 ;
         UNPAIR ;
         PUSH address "tz1Lc2qBKEWCBeDU8npG6zCeCqpmaegRi6Jg" ;
         PUSH nat 4 ;
         PUSH int 1 ;
         PAIR ;
         DUP 7 ;
         UNIT ;
         LEFT unit ;
         RIGHT (or unit unit) ;
         RIGHT unit ;
         UNIT ;
         RIGHT unit ;
         DUP 4 ;
         UNIT ;
         RIGHT unit ;
         DUP 9 ;
         DUP 8 ;
         GET ;
         IF_NONE
           { PUSH string "anasset" ; PUSH string "ASSET_NOT_FOUND" ; PAIR ; FAILWITH }
           {} ;
         DUP 9 ;
         PAIR ;
         UNPAIR ;
         DIP 1 { UNPAIR ; SWAP ; DUP } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DIG 3 ;
         MUL ;
         DUP ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         DUG 4 ;
         DIG 3 ;
         MUL ;
         DIP 1 { MUL } ;
         DIG 3 ;
         IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
         PAIR ;
         PAIR ;
         UNPAIR ;
         DIP 1 { UNPAIR ; SWAP ; DUP } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DIG 3 ;
         MUL ;
         DUP ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         DUG 4 ;
         DIG 3 ;
         MUL ;
         DIP 1 { MUL } ;
         DIG 3 ;
         IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
         PAIR ;
         UNIT ;
         LEFT unit ;
         DUP 10 ;
         DUP 6 ;
         EXEC ;
         PUSH nat 1 ;
         PUSH nat 3 ;
         INT ;
         PAIR ;
         PUSH nat 1 ;
         PUSH nat 1 ;
         INT ;
         PAIR ;
         DIP 1 { UNPAIR } ;
         UNPAIR ;
         DIG 3 ;
         DUP ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         MUL ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         PUSH int 0 ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         COMPARE ;
         GE ;
         IF { INT } { NEG } ;
         MUL ;
         DIP 1 { MUL ; ABS } ;
         PAIR ;
         DIP 1 { UNPAIR } ;
         UNPAIR ;
         DIP 1 { SWAP } ;
         MUL ;
         DIP 1
             { MUL ;
               DUP ;
               PUSH nat 0 ;
               COMPARE ;
               EQ ;
               IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} } ;
         PAIR ;
         PUSH nat 2 ;
         PUSH int 1 ;
         PAIR ;
         PAIR ;
         UNPAIR ;
         DIP 1 { UNPAIR ; SWAP ; DUP } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DIG 3 ;
         MUL ;
         DUP ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         DUG 4 ;
         DIG 3 ;
         MUL ;
         DIP 1 { MUL } ;
         DIG 3 ;
         IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
         PAIR ;
         PAIR ;
         PAIR ;
         EXEC ;
         NOT ;
         IF { PUSH string "ko" ; FAILWITH } {} ;
         PUSH mutez 1000000 ;
         PUSH nat 10 ;
         PUSH int 3 ;
         PAIR ;
         UNPAIR ;
         DIP 2
             { PUSH mutez 1 ;
               SWAP ;
               EDIV ;
               IF_NONE { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
               CAR } ;
         ABS ;
         DIG 2 ;
         MUL ;
         EDIV ;
         IF_NONE { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         CAR ;
         PUSH mutez 1 ;
         MUL ;
         NIL operation ;
         NIL operation ;
         DUP 8 ;
         ITER { CONS } ;
         DUP 5 ;
         CONTRACT unit ;
         IF_NONE { PUSH string "ENTRY_NOT_FOUND" ; FAILWITH } {} ;
         DUP 4 ;
         UNIT ;
         TRANSFER_TOKENS ;
         CONS ;
         ITER { CONS } ;
         DIP 1 { DIG 5 ; DROP 1 } ;
         DUG 5 ;
         DROP 4 ;
         SWAP ;
         PAIR ;
         DIP 1 { DROP 2 } } }
