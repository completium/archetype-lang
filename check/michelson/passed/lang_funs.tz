{ storage
    (pair (nat %n)
          (int %i)
          (pair %r int nat)
          (timestamp %d)
          (int %e)
          (mutez %t)
          (string %s)
          (bytes %b)
          (option %os string)
          (option %ob bytes)) ;
  parameter (unit %exec) ;
  code { LAMBDA
           (pair (pair (pair int nat) (pair int nat)) (or unit (or (or unit unit) (or unit unit))))
           bool
           { UNPAIR ;
             UNPAIR ;
             DIP 1 { UNPAIR } ;
             UNPAIR ;
             DUG 3 ;
             MUL ;
             DIP 1 { MUL } ;
             SWAP ;
             COMPARE ;
             SWAP ;
             IF_LEFT
               { DROP 1 ; EQ }
               { IF_LEFT
                   { IF_LEFT { DROP 1 ; LT } { DROP 1 ; LE } }
                   { IF_LEFT { DROP 1 ; GT } { DROP 1 ; GE } } } } ;
         LAMBDA
           nat
           string
           { PUSH unit Unit ;
             PUSH nat 0 ;
             DUP 3 ;
             COMPARE ;
             GT ;
             IF { PUSH string "" ;
                  EMPTY_MAP nat string ;
                  PUSH string "9" ;
                  SOME ;
                  PUSH nat 9 ;
                  UPDATE ;
                  PUSH string "8" ;
                  SOME ;
                  PUSH nat 8 ;
                  UPDATE ;
                  PUSH string "7" ;
                  SOME ;
                  PUSH nat 7 ;
                  UPDATE ;
                  PUSH string "6" ;
                  SOME ;
                  PUSH nat 6 ;
                  UPDATE ;
                  PUSH string "5" ;
                  SOME ;
                  PUSH nat 5 ;
                  UPDATE ;
                  PUSH string "4" ;
                  SOME ;
                  PUSH nat 4 ;
                  UPDATE ;
                  PUSH string "3" ;
                  SOME ;
                  PUSH nat 3 ;
                  UPDATE ;
                  PUSH string "2" ;
                  SOME ;
                  PUSH nat 2 ;
                  UPDATE ;
                  PUSH string "1" ;
                  SOME ;
                  PUSH nat 1 ;
                  UPDATE ;
                  PUSH string "0" ;
                  SOME ;
                  PUSH nat 0 ;
                  UPDATE ;
                  PUSH nat 0 ;
                  DUP 5 ;
                  COMPARE ;
                  GT ;
                  LOOP { PUSH nat 10 ;
                         DUP 5 ;
                         EDIV ;
                         IF_NONE { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
                         DUP 3 ;
                         DUP 3 ;
                         DUP 3 ;
                         CDR ;
                         GET ;
                         IF_NONE { PUSH string "NOT_FOUND" ; FAILWITH } {} ;
                         CONCAT ;
                         DIP 1 { DIG 2 ; DROP 1 } ;
                         DUG 2 ;
                         DUP ;
                         CAR ;
                         DIP 1 { DIG 4 ; DROP 1 } ;
                         DUG 4 ;
                         DROP 1 ;
                         PUSH nat 0 ;
                         DUP 5 ;
                         COMPARE ;
                         GT } ;
                  DUP 2 ;
                  DIP 1 { DIG 2 ; DROP 1 } ;
                  DUG 2 ;
                  DROP 2 }
                { PUSH string "0" ; SWAP ; DROP 1 } ;
             SWAP ;
             DROP 1 } ;
         DIG 2 ;
         UNPAIR ;
         DIP 1 { UNPAIR 10 } ;
         DROP 1 ;
         PUSH nat 2 ;
         PUSH nat 1 ;
         PAIR ;
         DUP ;
         UNPAIR ;
         COMPARE ;
         LT ;
         IF { CAR } { CDR } ;
         SWAP ;
         DROP 1 ;
         PUSH nat 2 ;
         PUSH nat 1 ;
         PAIR ;
         DUP ;
         UNPAIR ;
         COMPARE ;
         LT ;
         IF { CDR } { CAR } ;
         SWAP ;
         DROP 1 ;
         PUSH int 2 ;
         PUSH int 1 ;
         PAIR ;
         DUP ;
         UNPAIR ;
         COMPARE ;
         LT ;
         IF { CAR } { CDR } ;
         DIP 1 { SWAP ; DROP 1 } ;
         SWAP ;
         PUSH int 2 ;
         PUSH int 1 ;
         PAIR ;
         DUP ;
         UNPAIR ;
         COMPARE ;
         LT ;
         IF { CDR } { CAR } ;
         DIP 1 { SWAP ; DROP 1 } ;
         SWAP ;
         PUSH int 2 ;
         PUSH int 1 ;
         PAIR ;
         DUP ;
         UNPAIR ;
         COMPARE ;
         LT ;
         IF { CAR } { CDR } ;
         DIP 1 { SWAP ; DROP 1 } ;
         SWAP ;
         PUSH int 2 ;
         PUSH int 1 ;
         PAIR ;
         DUP ;
         UNPAIR ;
         COMPARE ;
         LT ;
         IF { CDR } { CAR } ;
         DIP 1 { SWAP ; DROP 1 } ;
         SWAP ;
         PUSH int 2 ;
         PUSH int 1 ;
         PAIR ;
         DUP ;
         UNPAIR ;
         COMPARE ;
         LT ;
         IF { CAR } { CDR } ;
         DIP 1 { SWAP ; DROP 1 } ;
         SWAP ;
         PUSH int 2 ;
         PUSH int 1 ;
         PAIR ;
         DUP ;
         UNPAIR ;
         COMPARE ;
         LT ;
         IF { CDR } { CAR } ;
         DIP 1 { SWAP ; DROP 1 } ;
         SWAP ;
         PUSH nat 2 ;
         PUSH int 1 ;
         PAIR ;
         PUSH nat 1 ;
         PUSH int 1 ;
         PAIR ;
         DUP 14 ;
         UNIT ;
         LEFT unit ;
         LEFT (or unit unit) ;
         RIGHT unit ;
         DUP 3 ;
         DUP 5 ;
         PAIR ;
         PAIR ;
         EXEC ;
         IF { DUP 2 } { DUP } ;
         SWAP ;
         DROP 1 ;
         SWAP ;
         DROP 1 ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 2 ;
         PUSH int 1 ;
         PAIR ;
         PUSH nat 1 ;
         PUSH int 1 ;
         PAIR ;
         DUP 14 ;
         UNIT ;
         LEFT unit ;
         RIGHT (or unit unit) ;
         RIGHT unit ;
         DUP 3 ;
         DUP 5 ;
         PAIR ;
         PAIR ;
         EXEC ;
         IF { DUP 2 } { DUP } ;
         SWAP ;
         DROP 1 ;
         SWAP ;
         DROP 1 ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 1 ;
         PUSH int 2 ;
         PAIR ;
         PUSH nat 10 ;
         PUSH int 3 ;
         PAIR ;
         DUP 14 ;
         UNIT ;
         LEFT unit ;
         LEFT (or unit unit) ;
         RIGHT unit ;
         DUP 3 ;
         DUP 5 ;
         PAIR ;
         PAIR ;
         EXEC ;
         IF { DUP 2 } { DUP } ;
         SWAP ;
         DROP 1 ;
         SWAP ;
         DROP 1 ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 1 ;
         PUSH int 2 ;
         PAIR ;
         PUSH nat 10 ;
         PUSH int 3 ;
         PAIR ;
         DUP 14 ;
         UNIT ;
         LEFT unit ;
         RIGHT (or unit unit) ;
         RIGHT unit ;
         DUP 3 ;
         DUP 5 ;
         PAIR ;
         PAIR ;
         EXEC ;
         IF { DUP 2 } { DUP } ;
         SWAP ;
         DROP 1 ;
         SWAP ;
         DROP 1 ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 2 ;
         PUSH int 1 ;
         PAIR ;
         PUSH nat 1 ;
         PUSH int 1 ;
         PAIR ;
         DUP 14 ;
         UNIT ;
         LEFT unit ;
         LEFT (or unit unit) ;
         RIGHT unit ;
         DUP 3 ;
         DUP 5 ;
         PAIR ;
         PAIR ;
         EXEC ;
         IF { DUP 2 } { DUP } ;
         SWAP ;
         DROP 1 ;
         SWAP ;
         DROP 1 ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 2 ;
         PUSH int 1 ;
         PAIR ;
         PUSH nat 1 ;
         PUSH int 1 ;
         PAIR ;
         DUP 14 ;
         UNIT ;
         LEFT unit ;
         RIGHT (or unit unit) ;
         RIGHT unit ;
         DUP 3 ;
         DUP 5 ;
         PAIR ;
         PAIR ;
         EXEC ;
         IF { DUP 2 } { DUP } ;
         SWAP ;
         DROP 1 ;
         SWAP ;
         DROP 1 ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 1 ;
         PUSH int 2 ;
         PAIR ;
         PUSH nat 10 ;
         PUSH int 3 ;
         PAIR ;
         DUP 14 ;
         UNIT ;
         LEFT unit ;
         LEFT (or unit unit) ;
         RIGHT unit ;
         DUP 3 ;
         DUP 5 ;
         PAIR ;
         PAIR ;
         EXEC ;
         IF { DUP 2 } { DUP } ;
         SWAP ;
         DROP 1 ;
         SWAP ;
         DROP 1 ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 1 ;
         PUSH int 2 ;
         PAIR ;
         PUSH nat 10 ;
         PUSH int 3 ;
         PAIR ;
         DUP 14 ;
         UNIT ;
         LEFT unit ;
         RIGHT (or unit unit) ;
         RIGHT unit ;
         DUP 3 ;
         DUP 5 ;
         PAIR ;
         PAIR ;
         EXEC ;
         IF { DUP 2 } { DUP } ;
         SWAP ;
         DROP 1 ;
         SWAP ;
         DROP 1 ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 2 ;
         PUSH int 1 ;
         PAIR ;
         PUSH nat 10 ;
         PUSH int 3 ;
         PAIR ;
         DUP 14 ;
         UNIT ;
         LEFT unit ;
         LEFT (or unit unit) ;
         RIGHT unit ;
         DUP 3 ;
         DUP 5 ;
         PAIR ;
         PAIR ;
         EXEC ;
         IF { DUP 2 } { DUP } ;
         SWAP ;
         DROP 1 ;
         SWAP ;
         DROP 1 ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 2 ;
         PUSH int 1 ;
         PAIR ;
         PUSH nat 10 ;
         PUSH int 3 ;
         PAIR ;
         DUP 14 ;
         UNIT ;
         LEFT unit ;
         RIGHT (or unit unit) ;
         RIGHT unit ;
         DUP 3 ;
         DUP 5 ;
         PAIR ;
         PAIR ;
         EXEC ;
         IF { DUP 2 } { DUP } ;
         SWAP ;
         DROP 1 ;
         SWAP ;
         DROP 1 ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH timestamp 1609372800 ;
         PUSH timestamp 1577836800 ;
         PAIR ;
         DUP ;
         UNPAIR ;
         COMPARE ;
         LT ;
         IF { CAR } { CDR } ;
         DIP 1 { DIG 3 ; DROP 1 } ;
         DUG 3 ;
         PUSH timestamp 1609372800 ;
         PUSH timestamp 1577836800 ;
         PAIR ;
         DUP ;
         UNPAIR ;
         COMPARE ;
         LT ;
         IF { CDR } { CAR } ;
         DIP 1 { DIG 3 ; DROP 1 } ;
         DUG 3 ;
         PUSH int 1 ;
         PUSH int 3600 ;
         PAIR ;
         DUP ;
         UNPAIR ;
         COMPARE ;
         LT ;
         IF { CAR } { CDR } ;
         DIP 1 { DIG 4 ; DROP 1 } ;
         DUG 4 ;
         PUSH int 1 ;
         PUSH int 3600 ;
         PAIR ;
         DUP ;
         UNPAIR ;
         COMPARE ;
         LT ;
         IF { CDR } { CAR } ;
         DIP 1 { DIG 4 ; DROP 1 } ;
         DUG 4 ;
         PUSH mutez 2000000 ;
         PUSH mutez 1000000 ;
         PAIR ;
         DUP ;
         UNPAIR ;
         COMPARE ;
         LT ;
         IF { CAR } { CDR } ;
         DIP 1 { DIG 5 ; DROP 1 } ;
         DUG 5 ;
         PUSH mutez 2000000 ;
         PUSH mutez 1000000 ;
         PAIR ;
         DUP ;
         UNPAIR ;
         COMPARE ;
         LT ;
         IF { CDR } { CAR } ;
         DIP 1 { DIG 5 ; DROP 1 } ;
         DUG 5 ;
         PUSH nat 5 ;
         PUSH int 8 ;
         EDIV ;
         IF_NONE { PUSH string "DIV_BY_ZERO" ; FAILWITH } { CAR } ;
         DIP 1 { SWAP ; DROP 1 } ;
         SWAP ;
         PUSH nat 5 ;
         PUSH int 8 ;
         EDIV ;
         IF_NONE
           { PUSH string "DIV_BY_ZERO" ; FAILWITH }
           { UNPAIR ; SWAP ; INT ; EQ ; IF {} { PUSH int 1 ; ADD } } ;
         DIP 1 { SWAP ; DROP 1 } ;
         SWAP ;
         PUSH int -1 ;
         ABS ;
         SWAP ;
         DROP 1 ;
         PUSH nat 2 ;
         PUSH int -1 ;
         ABS ;
         INT ;
         PAIR ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH string "def" ;
         PUSH string "abc" ;
         CONCAT ;
         DIP 1 { DIG 6 ; DROP 1 } ;
         DUG 6 ;
         PUSH string "abcdef" ;
         PUSH nat 2 ;
         PUSH nat 1 ;
         SLICE ;
         DIP 1 { DIG 8 ; DROP 1 } ;
         DUG 8 ;
         PUSH string "abcdef" ;
         SIZE ;
         SWAP ;
         DROP 1 ;
         PUSH bytes 0xef ;
         PUSH bytes 0x12 ;
         CONCAT ;
         DIP 1 { DIG 7 ; DROP 1 } ;
         DUG 7 ;
         PUSH bytes 0xabcdef01 ;
         PUSH nat 2 ;
         PUSH nat 1 ;
         SLICE ;
         DIP 1 { DIG 9 ; DROP 1 } ;
         DUG 9 ;
         PUSH bytes 0xabcdef01 ;
         SIZE ;
         SWAP ;
         DROP 1 ;
         DUP 11 ;
         PUSH nat 42 ;
         EXEC ;
         DIP 1 { DIG 6 ; DROP 1 } ;
         DUG 6 ;
         PAIR 10 ;
         NIL operation ;
         PAIR ;
         DIP 1 { DROP 2 } } }
