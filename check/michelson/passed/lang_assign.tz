{ storage
    (pair (nat %n)
          (int %i)
          (pair %ra int nat)
          (timestamp %da)
          (int %du)
          (mutez %tz)
          (bls12_381_g1 %g1)
          (bls12_381_g2 %g2)
          (bls12_381_fr %fr)
          (bool %b)) ;
  parameter (unit %exec) ;
  code { UNPAIR ;
         DIP 1 { UNPAIR 10 } ;
         DROP 1 ;
         PUSH nat 1 ;
         DUP 2 ;
         ADD ;
         SWAP ;
         DROP 1 ;
         PUSH int 0 ;
         PUSH int 1 ;
         DUP 3 ;
         SUB ;
         COMPARE ;
         GE ;
         IF { PUSH int 1 ; DUP 2 ; SUB ; ABS }
            { PUSH string "NAT_NEG_ASSIGN" ; FAILWITH } ;
         SWAP ;
         DROP 1 ;
         PUSH nat 1 ;
         DUP 2 ;
         MUL ;
         SWAP ;
         DROP 1 ;
         PUSH int 1 ;
         DUP 3 ;
         ADD ;
         DIP 1 { SWAP ; DROP 1 } ;
         SWAP ;
         PUSH int 1 ;
         DUP 3 ;
         SUB ;
         DIP 1 { SWAP ; DROP 1 } ;
         SWAP ;
         PUSH int 1 ;
         DUP 3 ;
         MUL ;
         DIP 1 { SWAP ; DROP 1 } ;
         SWAP ;
         UNIT ;
         LEFT unit ;
         PUSH nat 1 ;
         PUSH int 1 ;
         PAIR ;
         DUP 5 ;
         DIP 1 { UNPAIR ; SWAP ; DUP } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DIG 3 ;
         MUL ;
         DUP ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         DUG 4 ;
         DIG 3 ;
         MUL ;
         DIP 1 { MUL } ;
         DIG 3 ;
         IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
         PAIR ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         UNIT ;
         RIGHT unit ;
         PUSH nat 1 ;
         PUSH int 1 ;
         PAIR ;
         DUP 5 ;
         DIP 1 { UNPAIR ; SWAP ; DUP } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DIG 3 ;
         MUL ;
         DUP ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         DUG 4 ;
         DIG 3 ;
         MUL ;
         DIP 1 { MUL } ;
         DIG 3 ;
         IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
         PAIR ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 1 ;
         PUSH int 1 ;
         PAIR ;
         DUP 4 ;
         DIP 1 { UNPAIR } ;
         UNPAIR ;
         DIP 1 { SWAP } ;
         MUL ;
         DIP 1
             { MUL ;
               DUP ;
               PUSH nat 0 ;
               COMPARE ;
               EQ ;
               IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} } ;
         PAIR ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 1 ;
         PUSH int 1 ;
         PAIR ;
         DUP 4 ;
         DIP 1 { UNPAIR } ;
         UNPAIR ;
         DIG 3 ;
         DUP ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         MUL ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         PUSH int 0 ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         COMPARE ;
         GE ;
         IF { INT } { NEG } ;
         MUL ;
         DIP 1 { MUL ; ABS } ;
         PAIR ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         UNIT ;
         LEFT unit ;
         PUSH nat 1 ;
         PUSH nat 1 ;
         INT ;
         PAIR ;
         DUP 5 ;
         DIP 1 { UNPAIR ; SWAP ; DUP } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DIG 3 ;
         MUL ;
         DUP ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         DUG 4 ;
         DIG 3 ;
         MUL ;
         DIP 1 { MUL } ;
         DIG 3 ;
         IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
         PAIR ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         UNIT ;
         RIGHT unit ;
         PUSH nat 1 ;
         PUSH nat 1 ;
         INT ;
         PAIR ;
         DUP 5 ;
         DIP 1 { UNPAIR ; SWAP ; DUP } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DIG 3 ;
         MUL ;
         DUP ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         DUG 4 ;
         DIG 3 ;
         MUL ;
         DIP 1 { MUL } ;
         DIG 3 ;
         IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
         PAIR ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 1 ;
         PUSH nat 1 ;
         INT ;
         PAIR ;
         DUP 4 ;
         DIP 1 { UNPAIR } ;
         UNPAIR ;
         DIP 1 { SWAP } ;
         MUL ;
         DIP 1
             { MUL ;
               DUP ;
               PUSH nat 0 ;
               COMPARE ;
               EQ ;
               IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} } ;
         PAIR ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 1 ;
         PUSH nat 1 ;
         INT ;
         PAIR ;
         DUP 4 ;
         DIP 1 { UNPAIR } ;
         UNPAIR ;
         DIG 3 ;
         DUP ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         MUL ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         PUSH int 0 ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         COMPARE ;
         GE ;
         IF { INT } { NEG } ;
         MUL ;
         DIP 1 { MUL ; ABS } ;
         PAIR ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         UNIT ;
         LEFT unit ;
         PUSH nat 1 ;
         PUSH int 1 ;
         PAIR ;
         DUP 5 ;
         DIP 1 { UNPAIR ; SWAP ; DUP } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DIG 3 ;
         MUL ;
         DUP ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         DUG 4 ;
         DIG 3 ;
         MUL ;
         DIP 1 { MUL } ;
         DIG 3 ;
         IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
         PAIR ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         UNIT ;
         RIGHT unit ;
         PUSH nat 1 ;
         PUSH int 1 ;
         PAIR ;
         DUP 5 ;
         DIP 1 { UNPAIR ; SWAP ; DUP } ;
         UNPAIR ;
         SWAP ;
         DUP ;
         DIG 3 ;
         MUL ;
         DUP ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         DUG 4 ;
         DIG 3 ;
         MUL ;
         DIP 1 { MUL } ;
         DIG 3 ;
         IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
         PAIR ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 1 ;
         PUSH int 1 ;
         PAIR ;
         DUP 4 ;
         DIP 1 { UNPAIR } ;
         UNPAIR ;
         DIP 1 { SWAP } ;
         MUL ;
         DIP 1
             { MUL ;
               DUP ;
               PUSH nat 0 ;
               COMPARE ;
               EQ ;
               IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} } ;
         PAIR ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH nat 1 ;
         PUSH int 1 ;
         PAIR ;
         DUP 4 ;
         DIP 1 { UNPAIR } ;
         UNPAIR ;
         DIG 3 ;
         DUP ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         MUL ;
         PUSH nat 0 ;
         COMPARE ;
         EQ ;
         IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         PUSH int 0 ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         COMPARE ;
         GE ;
         IF { INT } { NEG } ;
         MUL ;
         DIP 1 { MUL ; ABS } ;
         PAIR ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         PUSH int 1 ;
         DUP 6 ;
         ADD ;
         DIP 1 { DIG 4 ; DROP 1 } ;
         DUG 4 ;
         PUSH int 1 ;
         DUP 6 ;
         SUB ;
         DIP 1 { DIG 4 ; DROP 1 } ;
         DUG 4 ;
         PUSH int 1 ;
         DUP 5 ;
         ADD ;
         DIP 1 { DIG 3 ; DROP 1 } ;
         DUG 3 ;
         PUSH int 1 ;
         DUP 5 ;
         SUB ;
         DIP 1 { DIG 3 ; DROP 1 } ;
         DUG 3 ;
         PUSH mutez 1000000 ;
         DUP 7 ;
         ADD ;
         DIP 1 { DIG 5 ; DROP 1 } ;
         DUG 5 ;
         PUSH mutez 1000000 ;
         DUP 7 ;
         SUB_MUTEZ ;
         IF_NONE { PUSH string "NAT_NEG_ASSIGN" ; FAILWITH } {} ;
         DIP 1 { DIG 5 ; DROP 1 } ;
         DUG 5 ;
         DUP 7 ;
         DUP 8 ;
         ADD ;
         DIP 1 { DIG 6 ; DROP 1 } ;
         DUG 6 ;
         DUP 8 ;
         DUP 9 ;
         ADD ;
         DIP 1 { DIG 7 ; DROP 1 } ;
         DUG 7 ;
         DUP 9 ;
         DUP 10 ;
         ADD ;
         DIP 1 { DIG 8 ; DROP 1 } ;
         DUG 8 ;
         PUSH bls12_381_fr 1 ;
         DUP 10 ;
         ADD ;
         DIP 1 { DIG 8 ; DROP 1 } ;
         DUG 8 ;
         PUSH bls12_381_fr 1 ;
         DUP 10 ;
         ADD ;
         DIP 1 { DIG 8 ; DROP 1 } ;
         DUG 8 ;
         DUP 9 ;
         DUP 8 ;
         MUL ;
         DIP 1 { DIG 6 ; DROP 1 } ;
         DUG 6 ;
         DUP 9 ;
         DUP 9 ;
         MUL ;
         DIP 1 { DIG 7 ; DROP 1 } ;
         DUG 7 ;
         DUP 9 ;
         DUP 10 ;
         MUL ;
         DIP 1 { DIG 8 ; DROP 1 } ;
         DUG 8 ;
         PUSH nat 1 ;
         DUP 10 ;
         MUL ;
         DIP 1 { DIG 8 ; DROP 1 } ;
         DUG 8 ;
         PUSH int 1 ;
         DUP 10 ;
         MUL ;
         DIP 1 { DIG 8 ; DROP 1 } ;
         DUG 8 ;
         DUP 10 ;
         IF { PUSH bool True ; IF { PUSH bool True } { PUSH bool False } }
            { PUSH bool False } ;
         DIP 1 { DIG 9 ; DROP 1 } ;
         DUG 9 ;
         DUP 10 ;
         IF { PUSH bool True }
            { PUSH bool True ; IF { PUSH bool True } { PUSH bool False } } ;
         DIP 1 { DIG 9 ; DROP 1 } ;
         DUG 9 ;
         PAIR 10 ;
         NIL operation ;
         PAIR } }
