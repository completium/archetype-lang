{ storage (pair int nat) ;
  parameter (pair %exec (pair %r int nat) (nat %s)) ;
  code { LAMBDA
           (pair (pair int nat) nat)
           (pair int nat)
           { UNPAIR ;
             PUSH unit Unit ;
             UNIT ;
             LEFT unit ;
             PUSH nat 1 ;
             DUP 5 ;
             INT ;
             PAIR ;
             DUP 4 ;
             DIP 1 { UNPAIR } ;
             UNPAIR ;
             DIG 3 ;
             DUP ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             MUL ;
             PUSH nat 0 ;
             COMPARE ;
             EQ ;
             IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
             PUSH int 0 ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             COMPARE ;
             GE ;
             IF { INT } { NEG } ;
             MUL ;
             DIP 1 { MUL ; ABS } ;
             PAIR ;
             PUSH nat 1 ;
             PUSH int 1 ;
             PAIR ;
             DIP 1 { UNPAIR ; SWAP ; DUP } ;
             UNPAIR ;
             SWAP ;
             DUP ;
             DIG 3 ;
             MUL ;
             DUP ;
             PUSH nat 0 ;
             COMPARE ;
             EQ ;
             IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
             DUG 4 ;
             DIG 3 ;
             MUL ;
             DIP 1 { MUL } ;
             DIG 3 ;
             IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
             PAIR ;
             PUSH int 1 ;
             DUP 5 ;
             INT ;
             SUB ;
             PUSH int 1 ;
             DUP 2 ;
             DUP 2 ;
             COMPARE ;
             LE ;
             LOOP { UNIT ;
                    LEFT unit ;
                    UNIT ;
                    RIGHT unit ;
                    PUSH nat 1 ;
                    DUP 4 ;
                    PAIR ;
                    PUSH nat 1 ;
                    DUP 10 ;
                    INT ;
                    PAIR ;
                    DIP 1 { UNPAIR ; SWAP ; DUP } ;
                    UNPAIR ;
                    SWAP ;
                    DUP ;
                    DIG 3 ;
                    MUL ;
                    DUP ;
                    PUSH nat 0 ;
                    COMPARE ;
                    EQ ;
                    IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
                    DUG 4 ;
                    DIG 3 ;
                    MUL ;
                    DIP 1 { MUL } ;
                    DIG 3 ;
                    IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
                    PAIR ;
                    DUP 5 ;
                    DIP 1 { UNPAIR } ;
                    UNPAIR ;
                    DIG 3 ;
                    DUP ;
                    DIG 3 ;
                    DUP ;
                    DUG 4 ;
                    MUL ;
                    PUSH nat 0 ;
                    COMPARE ;
                    EQ ;
                    IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
                    PUSH int 0 ;
                    DIG 4 ;
                    DUP ;
                    DUG 5 ;
                    COMPARE ;
                    GE ;
                    IF { INT } { NEG } ;
                    MUL ;
                    DIP 1 { MUL ; ABS } ;
                    PAIR ;
                    DUP 7 ;
                    DIP 1 { UNPAIR } ;
                    UNPAIR ;
                    DIP 1 { SWAP } ;
                    MUL ;
                    DIP 1
                        { MUL ;
                          DUP ;
                          PUSH nat 0 ;
                          COMPARE ;
                          EQ ;
                          IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} } ;
                    PAIR ;
                    PUSH nat 1 ;
                    PUSH int 1 ;
                    PAIR ;
                    DIP 1 { UNPAIR ; SWAP ; DUP } ;
                    UNPAIR ;
                    SWAP ;
                    DUP ;
                    DIG 3 ;
                    MUL ;
                    DUP ;
                    PUSH nat 0 ;
                    COMPARE ;
                    EQ ;
                    IF { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
                    DUG 4 ;
                    DIG 3 ;
                    MUL ;
                    DIP 1 { MUL } ;
                    DIG 3 ;
                    IF_LEFT { DROP 1 ; ADD } { DROP 1 ; SWAP ; SUB } ;
                    PAIR ;
                    DIP 1 { DIG 2 ; DROP 1 } ;
                    DUG 2 ;
                    PUSH int 1 ;
                    DUP 2 ;
                    ADD ;
                    SWAP ;
                    DROP 1 ;
                    DUP 2 ;
                    DUP 2 ;
                    COMPARE ;
                    LE } ;
             DROP 2 ;
             DUP ;
             DIP 1 { SWAP ; DROP 1 } ;
             SWAP ;
             DROP 1 ;
             DUG 2 ;
             DROP 2 } ;
         SWAP ;
         UNPAIR ;
         UNPAIR ;
         SWAP ;
         DUP 4 ;
         DUP 2 ;
         DUP 4 ;
         PAIR ;
         EXEC ;
         DIP 1 { DIG 2 ; DROP 1 } ;
         DUG 2 ;
         DROP 2 ;
         NIL operation ;
         PAIR ;
         DIP 1 { DROP 1 } } }
