{ storage unit ;
  parameter (unit %exec) ;
  code { CDR ;
         PUSH bool True ;
         IF { PUSH bool False ; IF { PUSH bool True } { PUSH bool False } }
            { PUSH bool False } ;
         PUSH bool True ;
         IF { PUSH bool True }
            { PUSH bool False ; IF { PUSH bool True } { PUSH bool False } } ;
         PUSH bool False ;
         PUSH bool True ;
         XOR ;
         PUSH bool True ;
         NOT ;
         PUSH nat 2 ;
         PUSH nat 1 ;
         ADD ;
         PUSH int 2 ;
         PUSH int 1 ;
         SUB ;
         PUSH nat 2 ;
         PUSH nat 1 ;
         MUL ;
         PUSH nat 2 ;
         PUSH nat 1 ;
         EDIV ;
         IF_NONE
           { PUSH string "DIV_BY_ZERO" ; FAILWITH }
           { DUP ; CAR ; SWAP ; DROP 1 } ;
         PUSH int 2 ;
         PUSH int 1 ;
         EDIV ;
         IF_NONE
           { PUSH string "DIV_BY_ZERO" ; FAILWITH }
           { DUP ; CDR ; SWAP ; DROP 1 } ;
         PUSH nat 2 ;
         PUSH nat 1 ;
         XOR ;
         PUSH nat 2 ;
         PUSH int 1 ;
         PAIR ;
         PUSH nat 2 ;
         PUSH nat 1 ;
         LSL ;
         PUSH nat 2 ;
         PUSH nat 1 ;
         LSR ;
         PUSH nat 2 ;
         PUSH nat 1 ;
         EDIV ;
         PUSH int 2 ;
         PUSH int 1 ;
         ADD ;
         PUSH int 2 ;
         PUSH int 1 ;
         SUB ;
         PUSH int 2 ;
         PUSH int 1 ;
         MUL ;
         PUSH int 2 ;
         PUSH int 1 ;
         EDIV ;
         IF_NONE
           { PUSH string "DIV_BY_ZERO" ; FAILWITH }
           { DUP ; CAR ; SWAP ; DROP 1 } ;
         PUSH int 2 ;
         PUSH int 1 ;
         EDIV ;
         IF_NONE
           { PUSH string "DIV_BY_ZERO" ; FAILWITH }
           { DUP ; CDR ; SWAP ; DROP 1 } ;
         PUSH int 2 ;
         PUSH int 1 ;
         EDIV ;
         PUSH nat 10 ;
         PUSH int 23 ;
         PAIR ;
         PUSH nat 10 ;
         PUSH int -1 ;
         PAIR ;
         PUSH nat 25 ;
         PUSH int 33 ;
         PAIR ;
         PUSH nat 12 ;
         PUSH int 11 ;
         PAIR ;
         PUSH int 2 ;
         PUSH int 1 ;
         ADD ;
         PUSH int 2 ;
         PUSH int 1 ;
         SUB ;
         PUSH int 2 ;
         PUSH int 1 ;
         MUL ;
         PUSH int 2 ;
         PUSH int 1 ;
         EDIV ;
         IF_NONE
           { PUSH string "DIV_BY_ZERO" ; FAILWITH }
           { DUP ; CAR ; SWAP ; DROP 1 } ;
         PUSH int 2 ;
         PUSH int 1 ;
         EDIV ;
         IF_NONE
           { PUSH string "DIV_BY_ZERO" ; FAILWITH }
           { DUP ; CDR ; SWAP ; DROP 1 } ;
         PUSH nat 2 ;
         PUSH int 1 ;
         PAIR ;
         PUSH int 2 ;
         PUSH nat 1 ;
         EDIV ;
         PUSH int 2 ;
         PUSH int 1 ;
         ADD ;
         PUSH int 2 ;
         PUSH int 1 ;
         SUB ;
         PUSH int 2 ;
         PUSH int 1 ;
         MUL ;
         PUSH int 2 ;
         PUSH int 1 ;
         EDIV ;
         IF_NONE
           { PUSH string "DIV_BY_ZERO" ; FAILWITH }
           { DUP ; CAR ; SWAP ; DROP 1 } ;
         PUSH int 2 ;
         PUSH int 1 ;
         EDIV ;
         IF_NONE
           { PUSH string "DIV_BY_ZERO" ; FAILWITH }
           { DUP ; CDR ; SWAP ; DROP 1 } ;
         PUSH nat 2 ;
         PUSH int 1 ;
         PAIR ;
         PUSH nat 2 ;
         PUSH int 1 ;
         EDIV ;
         PUSH nat 5 ;
         PUSH int 11 ;
         PAIR ;
         PUSH nat 5 ;
         PUSH int -1 ;
         PAIR ;
         PUSH nat 5 ;
         PUSH int 6 ;
         PAIR ;
         PUSH nat 6 ;
         PUSH int 5 ;
         PAIR ;
         PUSH nat 10 ;
         PUSH int 31 ;
         PAIR ;
         PUSH nat 10 ;
         PUSH int -9 ;
         PAIR ;
         PUSH nat 5 ;
         PUSH int 11 ;
         PAIR ;
         PUSH nat 20 ;
         PUSH int 11 ;
         PAIR ;
         PUSH nat 5 ;
         PUSH int 11 ;
         PAIR ;
         PUSH nat 5 ;
         PUSH int -1 ;
         PAIR ;
         PUSH nat 5 ;
         PUSH int 6 ;
         PAIR ;
         PUSH nat 6 ;
         PUSH int 5 ;
         PAIR ;
         PUSH nat 10 ;
         PUSH int 31 ;
         PAIR ;
         PUSH nat 10 ;
         PUSH int -9 ;
         PAIR ;
         PUSH nat 5 ;
         PUSH int 11 ;
         PAIR ;
         PUSH nat 20 ;
         PUSH int 11 ;
         PAIR ;
         PUSH int 3600 ;
         PUSH nat 1 ;
         PUSH int 1 ;
         DIG 2 ;
         MUL ;
         EDIV ;
         IF_NONE { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         CAR ;
         PUSH int 3600 ;
         PUSH nat 1 ;
         PUSH int 2 ;
         DIG 2 ;
         MUL ;
         EDIV ;
         IF_NONE { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         CAR ;
         PUSH int 2 ;
         PUSH int 3600 ;
         EDIV ;
         IF_NONE
           { PUSH string "DIV_BY_ZERO" ; FAILWITH }
           { DUP ; CAR ; SWAP ; DROP 1 } ;
         PUSH int 2 ;
         PUSH int 3600 ;
         EDIV ;
         IF_NONE
           { PUSH string "DIV_BY_ZERO" ; FAILWITH }
           { DUP ; CAR ; SWAP ; DROP 1 } ;
         PUSH mutez 1000000 ;
         PUSH nat 1 ;
         PUSH int 1 ;
         DIP 2
             { PUSH mutez 1 ;
               SWAP ;
               EDIV ;
               IF_NONE { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
               CAR } ;
         ABS ;
         DIG 2 ;
         MUL ;
         EDIV ;
         IF_NONE { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         CAR ;
         PUSH mutez 1 ;
         MUL ;
         PUSH mutez 1000000 ;
         PUSH nat 1 ;
         PUSH int 1 ;
         DIP 2
             { PUSH mutez 1 ;
               SWAP ;
               EDIV ;
               IF_NONE { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
               CAR } ;
         ABS ;
         DIG 2 ;
         MUL ;
         EDIV ;
         IF_NONE { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         CAR ;
         PUSH mutez 1 ;
         MUL ;
         PUSH mutez 1000000 ;
         PUSH nat 10 ;
         PUSH int 11 ;
         DIP 2
             { PUSH mutez 1 ;
               SWAP ;
               EDIV ;
               IF_NONE { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
               CAR } ;
         ABS ;
         DIG 2 ;
         MUL ;
         EDIV ;
         IF_NONE { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         CAR ;
         PUSH mutez 1 ;
         MUL ;
         PUSH mutez 1000000 ;
         PUSH nat 2 ;
         PUSH int 1 ;
         DIP 2
             { PUSH mutez 1 ;
               SWAP ;
               EDIV ;
               IF_NONE { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
               CAR } ;
         ABS ;
         DIG 2 ;
         MUL ;
         EDIV ;
         IF_NONE { PUSH string "DIV_BY_ZERO" ; FAILWITH } {} ;
         CAR ;
         PUSH mutez 1 ;
         MUL ;
         PUSH mutez 2000000 ;
         PUSH mutez 1000000 ;
         EDIV ;
         PUSH nat 2 ;
         PUSH mutez 1000000 ;
         EDIV ;
         PUSH timestamp 1577750400 ;
         PUSH timestamp 1577836800 ;
         SUB ;
         PUSH int 2 ;
         PUSH int 3600 ;
         ADD ;
         PUSH int 2 ;
         PUSH int 3600 ;
         SUB ;
         PUSH nat 1 ;
         PUSH int 8 ;
         PAIR ;
         PUSH int 1800 ;
         PUSH int 14400 ;
         EDIV ;
         IF_NONE
           { PUSH string "DIV_BY_ZERO" ; FAILWITH }
           { DUP ; CAR ; SWAP ; DROP 1 } ;
         PUSH int 2700 ;
         PUSH int 3600 ;
         EDIV ;
         IF_NONE
           { PUSH string "DIV_BY_ZERO" ; FAILWITH }
           { DUP ; CDR ; SWAP ; DROP 1 } ;
         INT ;
         PUSH int 86400 ;
         PUSH timestamp 1577836800 ;
         ADD ;
         PUSH int 86400 ;
         PUSH timestamp 1577836800 ;
         SUB ;
         PUSH timestamp 1577836800 ;
         PUSH int 86400 ;
         ADD ;
         PUSH string "str2" ;
         PUSH string "str1" ;
         CONCAT ;
         PUSH mutez 1000000 ;
         PUSH mutez 2000000 ;
         ADD ;
         PUSH mutez 1000000 ;
         PUSH mutez 2000000 ;
         SUB_MUTEZ ;
         IF_NONE { PUSH string "NAT_NEG_ASSIGN" ; FAILWITH } {} ;
         DROP 76 ;
         NIL operation ;
         PAIR } }
