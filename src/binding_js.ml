open Location
open Model
open Printer_tools
open Binding_tools

module T = Michelson

let prelude fmt _ =
  Format.fprintf fmt
    "/* Bindings javascript generated by archetype version: %s */

import { registerEvent, hex_to_data } from '@completium/event-well-crank';
" Options.version
type input_event = {
  r : record;
  ty : T.obj_micheline;
}

let mk_input_event r ty : input_event =
  { r; ty }

let pp_event fmt (ie : input_event) =
  let pp_michelson_type fmt =
    Format.fprintf fmt "const michelsonType_%a =@\n%a;" pp_id ie.r.name Printer_michelson.pp_obj_micheline ie.ty
  in
  let pp_make fmt =
    let pp_field fmt (f : record_field) =
      Format.fprintf fmt "%a : %a" pp_id f.name (to_type (Init ("data." ^ unloc f.name))) f.type_
    in
    Format.fprintf fmt "function make_%a(input) {
  const data = hex_to_data(michelsonType_%a, input)

  if (data._kind !== '%a') {
    return undefined;
  }
  return { @[%a@] }
}"
      pp_id ie.r.name
      pp_id ie.r.name
      pp_id ie.r.name
      (pp_list ",@\n" pp_field) ie.r.fields
  in
  let pp_register fmt =
    Format.fprintf fmt "export function register_%a(source, handler) {
  registerEvent({ s: source, c: make_%a, p: handler })
}"
      pp_id ie.r.name
      pp_id ie.r.name
  in
  let pp_newline fmt = Format.fprintf fmt "@\n@\n" in

  Format.fprintf fmt "/* Event: %a */" pp_id ie.r.name;
  pp_newline fmt;
  pp_michelson_type fmt;
  pp_newline fmt;
  pp_make fmt;
  pp_newline fmt;
  pp_register fmt

let process(model : model) : string =
  let events = List.map (fun (r : record) -> mk_input_event r (compute_type model r)) (Model.Utils.get_events model) in
  Format.asprintf "%a@\n%a@."
    prelude ()
    (pp_list "@\n@\n@\n" pp_event) events
