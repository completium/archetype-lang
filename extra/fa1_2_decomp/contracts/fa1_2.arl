archetype fa1_2(
ledger : big_map<address, (nat * map<address, nat>)>,
token_metadata : big_map<nat, (nat * map<string, bytes>)>)

entry getAllowance (owner : address, spender : address, callback : contract<nat>) {
  var x89 : nat = 0;
  var x86 : list<operation> = make_list<operation> (([]));
  x86 := make_list<operation> (([]));
  for x131 in operations do
    (x86 := prepend (x86, x131))
  done;
  match (ledger[owner]) with
  | some (x116, x117) -> (match (x117[spender]) with
  | some x98 -> (x89 := x98)
  | none -> (x89 := 0)
  end)
  | none -> (x89 := 0)
  end;
  x86 := prepend (x86, (make_operation (transferred, callback, x89)));
  for x85 in x86 do
    (operations := prepend (operations, x85))
  done
}

entry getBalance (owner : address, callback : contract<nat>) {
  var x150 : nat = 0;
  var x147 : list<operation> = make_list<operation> (([]));
  x147 := make_list<operation> (([]));
  for x182 in operations do
    (x147 := prepend (x147, x182))
  done;
  match (ledger[owner]) with
  | some (x167, x168) -> (x150 := x167)
  | none -> (x150 := 0)
  end;
  x147 := prepend (x147, (make_operation (transferred, callback, x150)));
  for x146 in x147 do
    (operations := prepend (operations, x146))
  done
}

entry getTotalSupply (x221 : unit, callback : contract<nat>) {
  var x202 : list<operation> = make_list<operation> (([]));
  x202 := make_list<operation> (([]));
  for x213 in operations do
    (x202 := prepend (x202, x213))
  done;
  x202 := prepend (x202, (make_operation (transferred, callback, 10000000)));
  for x201 in x202 do
    (operations := prepend (operations, x201))
  done
}

entry set_token_metadata (tid : nat, tdata : map<string, bytes>) {
  if not (caller = tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb)
  then ((fail ("INVALID_CALLER")))  else (()) ;
  token_metadata := update (token_metadata, tid, (some(((tid, tdata)))))
}

entry %transfer (%from : address, %to : address, value : nat) {
  var x299 : map<address, nat> = make_map<address, nat> (([]));
  var x300 : nat = 0;
  var x446 : map<address, nat> = make_map<address, nat> (([]));
  var x444 : nat = 0;
  var x448 : nat = 0;
  var x738 : nat = 0;
  var x790 : map<address, nat> = make_map<address, nat> (([]));
  var x861 : nat = 0;
  match (ledger[%from]) with
  | some (x887, x888) -> (x861 := x887)
  | none -> (fail ((("ASSET_NOT_FOUND",
  "ledger"))))
  end;
  if not (x861 >= value) then ((fail ("NotEnoughBalance")))  else (()) ;
  if caller <> %from
  then (match (ledger[%from]) with
  | some (x813, x814) -> ()
  | none -> (fail ((("ASSET_NOT_FOUND",
  "ledger"))))
  end;
  match (x790[caller]) with
  | some x786 -> (x738 := x786)
  | none -> (x738 := 0)
  end;
  match int_to_nat ((x738 - value)) with
  | some x767 -> ()
  | none -> (fail ((("NotEnoughAllowance", ((value,
  x738))))))
  end;
  match (ledger[%from]) with
  | some (x710, x711) -> ()
  | none -> (fail ((("ASSET_NOT_FOUND",
  "ledger"))))
  end;
  match (ledger[%from]) with
  | some (x656, x657) -> ()
  | none -> (fail ((("ASSET_NOT_FOUND", "ledger"))))
  end)  else (()) ;
  match (ledger[%from]) with
  | some x584 -> ()
  | none -> (fail ((("ASSET_NOT_FOUND",
  "ledger"))))
  end;
  match (ledger[%from]) with
  | some (x543, x544) -> (x446 := x544)
  | none -> (fail ((("ASSET_NOT_FOUND",
  "ledger"))))
  end;
  if x448 - value >= 0i then (x444 := abs ((x448 - value)))
   else ((fail ("NAT_NEG_ASSIGN"))) ;
  if contains ((update (ledger, %from, (some(((x444, x446)))))), %to)
  then (match ((update (ledger, %from, (some(((x444,
  x446))))))[%to]) with
  | some x384 -> ()
  | none -> (fail ((("ASSET_NOT_FOUND",
  "ledger"))))
  end;
  match ((update (ledger, %from, (some(((x444,
  x446))))))[%to]) with
  | some (x342, x343) -> (x299 := x343)
  | none -> (fail ((("ASSET_NOT_FOUND",
  "ledger"))))
  end;
  ledger := update ((update (ledger, %from, (some(((x444,
  x446)))))), %to, (some((((x300 + value), x299))))))
   else (ledger := update ((update (ledger, %from, (some(((x444,
  x446)))))), %to, (some((((0 + value),
  (make_map<address, nat> (([]))))))))) 
}

entry approve (spender : address, value : nat) {
  var x930 : map<address, nat> = make_map<address, nat> (([]));
  var x947 : nat = 0;
  var x1084 : bool = false;
  var x1060 : nat = 0;
  match (ledger[caller]) with
  | some (x1123, x1124) -> (match (x1124[spender]) with
  | some x1105 -> (x1060 := x1105)
  | none -> (x1060 := 0)
  end)
  | none -> (x1060 := 0)
  end;
  if x1060 > 0
  then ((if value > 0 then (x1084 := true)  else (x1084 := false) ))
   else (x1084 := false) ;
  if x1084 then ((fail ((("UnsafeAllowanceChange", x1060)))))  else (()) ;
  if contains (ledger, caller)
  then (match (ledger[caller]) with
  | some (x1009, x1010) -> (x947 := x1009)
  | none -> (fail ((("ASSET_NOT_FOUND",
  "ledger"))))
  end;
  match (ledger[caller]) with
  | some (x966, x967) -> (x930 := x967)
  | none -> (fail ((("ASSET_NOT_FOUND",
  "ledger"))))
  end;
  ledger := update (ledger, caller, (some(((x947,
  (update (x930, spender, (some(value))))))))))
   else (ledger := update (ledger, caller, (some(((0,
  (update ((make_map<address, nat> (([]))), spender, (some(value)))))))))) 
}

