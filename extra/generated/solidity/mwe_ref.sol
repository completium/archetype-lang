// Solidity output generated by archetype 0.1.13

pragma solidity >=0.5.0 <0.7.0;

contract mwe_medium {
  struct asset_mile {
    string id;
    uint256 expiration;
    int quantity;
    bool _isValue;
  }
  mapping(string => asset_mile) public mile;
  string[] keys_mile;
  struct asset_owner {
    address addr;
    asset_mile[] miles;
    bool _isValue;
  }
  mapping(address => asset_owner) public owner;
  address[] keys_owner;
  address admin = 0xA7b0536fB02C593b0dfD82bd65aaCBDd19Ae4777;

  constructor() public {

  }

  /* API functions */
  function sum_mile_quantity(string[] memory keys) private returns (int) {
    int res = 0;
    for (uint i = 0; i < keys.length; ++i) {
      string memory key = keys[i];
      res += mile[key].quantity;
    }
    return res;
  }

  function get_mile(string memory k) private view returns(asset_mile storage) {
    return mile[k];
  }

  function add_mile(asset_mile memory asset) private {
    string memory key = asset.id;
    if (mile[key]._isValue) {
      revert("key already exists");
    }
    mile[key] = asset;
  }

  function remove_mile(string memory k) private {
    delete mile[k];
  }

  // todo_Select
  function contains_mile(string memory key) private view returns(bool) {
    return mile[key]._isValue;
  }

  function get_owner(address k) private view returns(asset_owner storage) {
    return owner[k];
  }

  function add_owner(asset_owner memory asset) private {
    address key = asset.addr;
    if (owner[key]._isValue) {
      revert("key already exists");
    }
    owner[key] = asset;
  }

  // todo_UpdateAdd
  // todo_UpdateRemove
  function contains_owner(address key) private view returns(bool) {
    return owner[key]._isValue;
  }


  function add(address ow, string memory newmile_id, uint256 newmile_expiration, int newmile_quantity) public {
    asset_mile memory newmile = asset_mile({id: newmile_id, expiration: newmile_expiration, quantity: newmile_quantity, _isValue: true});
    if (!(msg.sender == admin)) {
      revert ("invalid caller");
    }
    if (contains_mile (newmile.id)) {
      revert ("require f1 failed");
    }
    if (contains_owner (ow)) {
      // todo_Maddfield
      int i = 0;
      i = 2;
    } else {
      asset_mile[] memory l = new asset_mile[](0);
      asset_owner memory _asset_var_0 = asset_owner({addr: ow, miles: l, _isValue: true});
      add_owner (_asset_var_0);
    }
  }

  function consume(address ow, int qty) public {
    if (!(msg.sender == admin)) {
      revert ("invalid caller");
    }
    if (!(qty > 0)) {
      revert ("require r2 failed");
    }
    if (!(contains_owner (ow))) {
      revert ("require r3 failed");
    }
    // asset_owner storage o = get_owner (ow);
    string[] memory valid_miles = new string[](1);//todo_Mselect;
    if (!(sum_mile_quantity(valid_miles) >= qty)) {
      revert ("require failed");
    }
    // int remainder = qty;
    // todo_Mfor
  }

}

