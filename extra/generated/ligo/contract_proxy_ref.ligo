// LIGO output generated by archetype 0.1.13

// contract: contract_remote

// To generate origination storage string please execute the following command:
// ligo compile-storage contract_remote.ligo main '("KT1RNB9PXsnp7KMkiMrWNMRzPjuefSWojBAm" : address)'

type action_set_value is record [
  f1 : int;
]

type action_add_value is record [
  a : int;
  b : int;
]

type action_contract_remote_sig is
  | Set_value of action_set_value
  | Add_value of action_add_value

type storage_type is record [
  remote : address;
]

type action_update_value is record [
  n : int;
]

type action_add_one is record [
  n : int;
]

type action is
  | Update_value of action_update_value
  | Add_one of action_add_one


function update_value(const action : action_update_value; const s_ : storage_type) : (list(operation) * storage_type) is
  begin
  var ops_ : list(operation) := nil;
  const remote: contract(action_contract_remote_sig) = get_contract(s_.remote);
  const param : action_contract_remote_sig = Set_value (record f1 = action.n end);
  const op_: operation = transaction(param, 0mutez, remote);
  ops_ := cons(op_, ops_);
  end with (ops_, s_)

function add_one(const action : action_add_one; const s_ : storage_type) : (list(operation) * storage_type) is
  begin
  var ops_ : list(operation) := nil;
  const remote: contract(action_contract_remote_sig) = get_contract(s_.remote);
  const param : action_contract_remote_sig = Add_value (record a = action.n; b = 2 end);
  const op_: operation = transaction(param, 0mutez, remote);
  ops_ := cons(op_, ops_);
  end with ((nil : list(operation)), s_)

function main(const action : action ; const s_ : storage_type) : (list(operation) * storage_type) is
  block {skip} with
  case action of
  | Update_value (a) -> update_value(a, s_)
  | Add_one (a) -> add_one(a, s_)
  end



