{
  storage (pair (pair (key %coldOwnerKey) (address %ownerKey)) (big_map %userToWallet key_hash (pair (mutez %balance) (nat %nonce))));
  parameter (or (or (pair %changeOwner (pair (string %newOwnerKey) (address %newOwnerKeyAddress)) (signature %signedMessage)) (key_hash %feedUserAccount)) (pair %sendFunds (pair (pair (pair (pair (mutez %amount) (mutez %feeAmount)) (string %receiver)) (address %receiverAddress)) (signature %signedMessage)) (key %userPublicKey)));
  code { DUP;
         CDR;
         SWAP;
         CAR;
         IF_LEFT
           { IF_LEFT
               { DUP;
                 CAR;
                 CAR;
                 PUSH string "";
                 COMPARE;
                 NEQ;
                 IF
                   {  }
                   { PUSH string "WrongCondition: params.newOwnerKey != ''";
                     FAILWITH };
                 SWAP;
                 DUP;
                 DUG 2;
                 CAR;
                 CDR;
                 SENDER;
                 COMPARE;
                 EQ;
                 IF
                   {  }
                   { PUSH string "WrongCondition: sp.sender == self.data.ownerKey";
                     FAILWITH };
                 DUP;
                 CAR;
                 CAR;
                 PACK;
                 SWAP;
                 DUP;
                 DUG 2;
                 CDR;
                 DIG 3;
                 DUP;
                 DUG 4;
                 CAR;
                 CAR;
                 CHECK_SIGNATURE;
                 IF
                   {  }
                   { PUSH string "WrongCondition: sp.check_signature(self.data.coldOwnerKey, params.signedMessage, sp.pack(params.newOwnerKey))";
                     FAILWITH };
                 SWAP;
                 DUP;
                 DUG 2;
                 DUP;
                 CDR;
                 SWAP;
                 CAR;
                 CAR;
                 DIG 2;
                 DUP;
                 DUG 3;
                 CAR;
                 CDR;
                 SWAP;
                 PAIR;
                 PAIR;
                 DUG 2;
                 DROP;
                 DROP }
               { SWAP;
                 DUP;
                 DUG 2;
                 CDR;
                 SWAP;
                 DUP;
                 DUG 2;
                 MEM;
                 IF
                   {  }
                   { SWAP;
                     DUP;
                     DUG 2;
                     DUP;
                     CAR;
                     SWAP;
                     CDR;
                     PUSH (option (pair mutez nat)) (Some (Pair 0 0));
                     DIG 3;
                     DUP;
                     DUG 4;
                     UPDATE;
                     SWAP;
                     PAIR;
                     DUG 2;
                     SWAP;
                     DROP };
                 SWAP;
                 DUP;
                 DUG 2;
                 DUP;
                 CAR;
                 SWAP;
                 CDR;
                 DUP;
                 DIG 3;
                 DUP;
                 DUG 4;
                 DUP;
                 DUG 2;
                 GET;
                 IF_NONE
                   { PUSH string "set_in_top-any";
                     FAILWITH }
                   {  };
                 CDR;
                 AMOUNT;
                 DIG 6;
                 DUP;
                 DUG 7;
                 CDR;
                 DIG 3;
                 DUP;
                 DUG 4;
                 GET;
                 IF_NONE
                   { PUSH string "Get-item:37";
                     FAILWITH }
                   {  };
                 CAR;
                 ADD;
                 PAIR;
                 SOME;
                 SWAP;
                 UPDATE;
                 SWAP;
                 PAIR;
                 DUG 2;
                 DROP;
                 DROP };
             NIL operation }
           { DUP;
             CAR;
             CAR;
             CAR;
             CDR;
             PUSH string "";
             COMPARE;
             NEQ;
             IF
               {  }
               { PUSH string "WrongCondition: params.receiver != ''";
                 FAILWITH };
             SWAP;
             DUP;
             DUG 2;
             CAR;
             CDR;
             SENDER;
             COMPARE;
             EQ;
             IF
               {  }
               { PUSH string "WrongCondition: sp.sender == self.data.ownerKey";
                 FAILWITH };
             SWAP;
             DUP;
             DUG 2;
             CDR;
             SWAP;
             DUP;
             DUG 2;
             CDR;
             HASH_KEY;
             MEM;
             IF
               {  }
               { PUSH string "WrongCondition: self.data.userToWallet.contains(sp.hash_key(params.userPublicKey))";
                 FAILWITH };
             DUP;
             CAR;
             CAR;
             CAR;
             CDR;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             HASH_KEY;
             GET;
             IF_NONE
               { PUSH string "Get-item:54";
                 FAILWITH }
               {  };
             CDR;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             CAR;
             CAR;
             CAR;
             CAR;
             PAIR;
             PAIR;
             PACK;
             SWAP;
             DUP;
             DUG 2;
             CAR;
             CDR;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             CHECK_SIGNATURE;
             IF
               {  }
               { PUSH string "WrongCondition: sp.check_signature(params.userPublicKey, params.signedMessage, sp.pack(sp.record(a = params.amount, c = self.data.userToWallet[sp.hash_key(params.userPublicKey)].nonce, r = params.receiver)))";
                 FAILWITH };
             DUP;
             CAR;
             CAR;
             CAR;
             CAR;
             CDR;
             SWAP;
             DUP;
             DUG 2;
             CAR;
             CAR;
             CAR;
             CAR;
             CAR;
             ADD;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             HASH_KEY;
             GET;
             IF_NONE
               { PUSH string "Get-item:54";
                 FAILWITH }
               {  };
             CAR;
             COMPARE;
             GE;
             IF
               {  }
               { PUSH string "WrongCondition: self.data.userToWallet[sp.hash_key(params.userPublicKey)].balance >= (params.amount + params.feeAmount)";
                 FAILWITH };
             DUP;
             CAR;
             CAR;
             CAR;
             CAR;
             CDR;
             PUSH mutez 0;
             SWAP;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             CAR;
             CAR;
             CAR;
             CAR;
             ADD;
             BALANCE;
             SUB;
             COMPARE;
             GE;
             IF
               {  }
               { PUSH string "WrongCondition: (sp.balance - (params.amount + params.feeAmount)) >= sp.tez(0)";
                 FAILWITH };
             SWAP;
             DUP;
             DUG 2;
             DUP;
             CAR;
             SWAP;
             CDR;
             DUP;
             DIG 3;
             DUP;
             DUG 4;
             CDR;
             HASH_KEY;
             DUP;
             DUG 2;
             GET;
             IF_NONE
               { PUSH string "set_in_top-any";
                 FAILWITH }
               {  };
             CDR;
             DIG 4;
             DUP;
             DUG 5;
             CAR;
             CAR;
             CAR;
             CAR;
             CDR;
             DIG 5;
             DUP;
             DUG 6;
             CAR;
             CAR;
             CAR;
             CAR;
             CAR;
             ADD;
             DIG 6;
             DUP;
             DUG 7;
             CDR;
             DIG 6;
             DUP;
             DUG 7;
             CDR;
             HASH_KEY;
             GET;
             IF_NONE
               { PUSH string "Get-item:54";
                 FAILWITH }
               {  };
             CAR;
             SUB;
             PAIR;
             SOME;
             SWAP;
             UPDATE;
             SWAP;
             PAIR;
             DUG 2;
             SWAP;
             DROP;
             SWAP;
             DUP;
             DUG 2;
             DUP;
             CAR;
             SWAP;
             CDR;
             DUP;
             DIG 3;
             DUP;
             DUG 4;
             CDR;
             HASH_KEY;
             DUP;
             DUG 2;
             GET;
             IF_NONE
               { PUSH string "set_in_top-any";
                 FAILWITH }
               {  };
             CAR;
             PUSH nat 1;
             DIG 6;
             DUP;
             DUG 7;
             CDR;
             DIG 6;
             DUP;
             DUG 7;
             CDR;
             HASH_KEY;
             GET;
             IF_NONE
               { PUSH string "Get-item:54";
                 FAILWITH }
               {  };
             CDR;
             ADD;
             SWAP;
             PAIR;
             SOME;
             SWAP;
             UPDATE;
             SWAP;
             PAIR;
             DUG 2;
             SWAP;
             DROP;
             DUP;
             CAR;
             CAR;
             CDR;
             NIL operation;
             SWAP;
             CONTRACT unit;
             IF_NONE
               { PUSH unit Unit;
                 FAILWITH }
               {  };
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             CAR;
             CAR;
             CAR;
             CAR;
             PUSH unit Unit;
             TRANSFER_TOKENS;
             CONS;
             DUP;
             DIG 3;
             DUP;
             DUG 4;
             CAR;
             CDR;
             CONTRACT unit;
             IF_NONE
               { PUSH unit Unit;
                 FAILWITH }
               {  };
             DIG 3;
             DUP;
             DUG 4;
             CAR;
             CAR;
             CAR;
             CAR;
             CDR;
             PUSH unit Unit;
             TRANSFER_TOKENS;
             CONS;
             SWAP;
             DROP;
             SWAP;
             DROP };
         PAIR };
}
