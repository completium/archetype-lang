{
  storage (pair (pair (address %owner) (address %registry)) (big_map %tokenHolders address (pair (map %historyHolders address (list (pair (nat %balance) (timestamp %time)))) (set %holders address))));
  parameter (or (address %addToken_) (pair %afterTransfer (pair (pair address nat) (pair address nat)) address));
  code { LAMBDA
           (pair address (pair (pair address address) (big_map address (pair (map address (list (pair nat timestamp))) (set address)))))
           (pair (map address (list (pair nat timestamp))) (set address))
           { DUP;
             CDR;
             CDR;
             SWAP;
             CAR;
             GET;
             IF_NONE
               { EMPTY_SET address;
                 EMPTY_MAP address (list (pair nat timestamp));
                 PAIR }
               {  } };
         DUP;
         LAMBDA
           (pair (lambda (pair address (pair (pair address address) (big_map address (pair (map address (list (pair nat timestamp))) (set address))))) (pair (map address (list (pair nat timestamp))) (set address))) (pair (pair address nat) (pair address (pair (pair address address) (big_map address (pair (map address (list (pair nat timestamp))) (set address)))))))
           (pair (pair address address) (big_map address (pair (map address (list (pair nat timestamp))) (set address))))
           { DUP;
             CDR;
             SWAP;
             CAR;
             SWAP;
             DUP;
             CDR;
             CDR;
             SWAP;
             DUP;
             DUG 2;
             CDR;
             CAR;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             CDR;
             DIG 3;
             CAR;
             CAR;
             DIG 3;
             DUP;
             DUG 4;
             DIG 3;
             DUP;
             DUG 4;
             PAIR;
             DIG 5;
             SWAP;
             EXEC;
             DIG 4;
             DUP;
             DUG 5;
             CDR;
             DIG 4;
             DUP;
             DUG 5;
             DIG 3;
             DUP;
             DUG 4;
             COMPARE;
             NEQ;
             IF
               { PUSH nat 0;
                 DIG 4;
                 DUP;
                 DUG 5;
                 COMPARE;
                 EQ;
                 IF
                   { DIG 3;
                     DROP;
                     SWAP;
                     DUP;
                     DUG 2;
                     CDR;
                     DIG 3;
                     PUSH bool False;
                     SWAP;
                     UPDATE }
                   { PUSH nat 0;
                     DIG 4;
                     COMPARE;
                     GT;
                     IF
                       { SWAP;
                         DUP;
                         DUG 2;
                         CDR;
                         DIG 3;
                         PUSH bool True;
                         SWAP;
                         UPDATE }
                       { DIG 2;
                         DROP;
                         SWAP;
                         DUP;
                         DUG 2;
                         CDR } } }
               { DIG 2;
                 DROP;
                 DIG 2;
                 DROP;
                 SWAP;
                 DUP;
                 DUG 2;
                 CDR };
             DIG 2;
             CAR;
             PAIR;
             DIG 2;
             SWAP;
             SOME;
             SWAP;
             UPDATE;
             SWAP;
             CAR;
             PAIR };
         SWAP;
         APPLY;
         SWAP;
         LAMBDA
           (pair (lambda (pair address (pair (pair address address) (big_map address (pair (map address (list (pair nat timestamp))) (set address))))) (pair (map address (list (pair nat timestamp))) (set address))) (pair (pair address nat) (pair address (pair (pair address address) (big_map address (pair (map address (list (pair nat timestamp))) (set address)))))))
           (pair (pair address address) (big_map address (pair (map address (list (pair nat timestamp))) (set address))))
           { DUP;
             CDR;
             SWAP;
             CAR;
             SWAP;
             DUP;
             CDR;
             CDR;
             SWAP;
             DUP;
             DUG 2;
             CDR;
             CAR;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             CAR;
             NOW;
             DIG 4;
             CAR;
             CDR;
             PAIR;
             DIG 3;
             DUP;
             DUG 4;
             DIG 3;
             DUP;
             DUG 4;
             PAIR;
             DIG 5;
             DUP;
             DUG 6;
             SWAP;
             EXEC;
             DIG 4;
             DUP;
             DUG 5;
             DIG 4;
             DUP;
             DUG 5;
             DIG 4;
             DUP;
             DUG 5;
             PAIR;
             PAIR;
             DUP;
             CDR;
             SWAP;
             DUP;
             DUG 2;
             CAR;
             CDR;
             PAIR;
             DIG 7;
             SWAP;
             EXEC;
             CAR;
             SWAP;
             CAR;
             CAR;
             GET;
             IF_NONE
               { NIL (pair nat timestamp) }
               {  };
             DIG 5;
             DUP;
             DUG 6;
             CDR;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             DIG 6;
             DUP;
             DUG 7;
             DIG 6;
             DUP;
             DUG 7;
             COMPARE;
             NEQ;
             IF
               { DIG 3;
                 CAR;
                 DIG 3;
                 DIG 4;
                 CONS;
                 SOME;
                 DIG 4;
                 UPDATE }
               { DIG 2;
                 DROP;
                 DIG 3;
                 DROP;
                 DIG 3;
                 DROP;
                 DIG 2;
                 CAR };
             PAIR;
             DIG 2;
             SWAP;
             SOME;
             SWAP;
             UPDATE;
             SWAP;
             CAR;
             PAIR };
         SWAP;
         APPLY;
         DIG 2;
         DUP;
         DUG 3;
         CDR;
         DIG 3;
         CAR;
         IF_LEFT
           { DROP;
             SWAP;
             DROP;
             SWAP;
             DROP;
             NIL operation;
             PAIR }
           { DUP;
             DUG 2;
             CDR;
             PAIR;
             SWAP;
             DUP;
             DUG 2;
             CAR;
             CDR;
             CDR;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             CDR;
             CAR;
             PAIR;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             CAR;
             CDR;
             DIG 3;
             CAR;
             CAR;
             CAR;
             PAIR;
             PAIR;
             PAIR;
             DUP;
             CDR;
             CDR;
             SWAP;
             DUP;
             DUG 2;
             CDR;
             CAR;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             CDR;
             CDR;
             DIG 3;
             DUP;
             DUG 4;
             CAR;
             CDR;
             CAR;
             DIG 4;
             DUP;
             DUG 5;
             CAR;
             CAR;
             CDR;
             DIG 5;
             CAR;
             CAR;
             CAR;
             DIG 5;
             DUP;
             DUG 6;
             CDR;
             SENDER;
             GET;
             DIG 6;
             DUP;
             DUG 7;
             CAR;
             CDR;
             SENDER;
             COMPARE;
             NEQ;
             SWAP;
             IF_NONE
               { PUSH bool False }
               { DROP;
                 PUSH bool True };
             NOT;
             AND;
             IF
               { PUSH string "Access is denied";
                 FAILWITH }
               {  };
             DIG 5;
             DIG 5;
             DUP;
             DUG 6;
             PAIR;
             DIG 2;
             DUP;
             DUG 3;
             DIG 2;
             DUP;
             DUG 3;
             PAIR;
             PAIR;
             DIG 7;
             DUP;
             DUG 8;
             SWAP;
             EXEC;
             DIG 5;
             DUP;
             DUG 6;
             PAIR;
             DUG 2;
             DUP;
             DUG 3;
             PAIR;
             PAIR;
             DIG 5;
             DUP;
             DUG 6;
             SWAP;
             EXEC;
             DIG 2;
             DUP;
             DUG 3;
             DIG 2;
             COMPARE;
             NEQ;
             IF
               { DIG 3;
                 DUP;
                 DUG 4;
                 PAIR;
                 DIG 2;
                 DUP;
                 DUG 3;
                 DIG 2;
                 DUP;
                 DUG 3;
                 PAIR;
                 PAIR;
                 DIG 5;
                 SWAP;
                 EXEC;
                 DIG 3;
                 PAIR;
                 DUG 2;
                 PAIR;
                 PAIR;
                 EXEC }
               { SWAP;
                 DROP;
                 SWAP;
                 DROP;
                 SWAP;
                 DROP;
                 SWAP;
                 DROP;
                 SWAP;
                 DROP };
             NIL operation;
             PAIR } };
}
