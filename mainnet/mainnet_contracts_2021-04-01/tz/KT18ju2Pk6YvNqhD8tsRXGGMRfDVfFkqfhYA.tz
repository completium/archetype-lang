{
  storage (pair (address %admin) (pair (mutez %cost) (map %identities address (map string (pair (timestamp %register_date) (bool %verified))))));
  parameter (or (or (or (pair %getProofs (address %address) (pair (address %callback_address) (string %callback_entrypoint))) (unit %registerAddress)) (or (string %registerProof) (unit %removeAddress))) (or (or (pair %send (mutez %amount) (address %receiverAddress)) (address %setAdmin)) (or (mutez %setCost) (pair %verifyProof (string %type) (address %tzaddr)))));
  code { UNPAIR;
         IF_LEFT
           { IF_LEFT
               { IF_LEFT
                   { EMPTY_MAP string (pair (timestamp %register_date) (bool %verified));
                     DUP;
                     GET;
                     DUP;
                     CAR;
                     MEM;
                     IF
                       { DROP;
                         SWAP;
                         DUP;
                         DUG 2;
                         GET;
                         SWAP;
                         DUP;
                         DUG 2;
                         CAR;
                         GET;
                         IF_NONE
                           { PUSH int 90;
                             FAILWITH }
                           {  } }
                       {  };
                     NIL operation;
                     SENDER;
                     CONTRACT %register (pair (address %address) (map %proofs string (pair (timestamp %register_date) (bool %verified))));
                     IF_NONE
                       { PUSH int 92;
                         FAILWITH }
                       {  };
                     PUSH mutez 0;
                     DIG 3;
                     DIG 4;
                     CAR;
                     PAIR;
                     TRANSFER_TOKENS;
                     CONS }
                   { DROP;
                     DUP;
                     GET;
                     AMOUNT;
                     COMPARE;
                     LT;
                     IF
                       { PUSH string "Amount too low";
                         FAILWITH }
                       {  };
                     DUP;
                     GET;
                     SENDER;
                     MEM;
                     IF
                       { PUSH string "Address already registered";
                         FAILWITH }
                       {  };
                     UNPAIR;
                     SWAP;
                     UNPAIR;
                     SWAP;
                     PUSH (option (map string (pair (timestamp %register_date) (bool %verified)))) (Some {  });
                     SENDER;
                     UPDATE;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR;
                     NIL operation } }
               { IF_LEFT
                   { SWAP;
                     DUP;
                     DUG 2;
                     GET;
                     AMOUNT;
                     COMPARE;
                     LT;
                     IF
                       { PUSH string "Amount too low";
                         FAILWITH }
                       {  };
                     SWAP;
                     UNPAIR;
                     SWAP;
                     UNPAIR;
                     SWAP;
                     DUP;
                     SENDER;
                     DUP;
                     DUG 2;
                     GET;
                     IF_NONE
                       { PUSH int 64;
                         FAILWITH }
                       {  };
                     PUSH bool False;
                     NOW;
                     PAIR;
                     SOME;
                     DIG 6;
                     UPDATE;
                     SOME;
                     SWAP;
                     UPDATE;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR }
                   { DROP;
                     DUP;
                     GET;
                     AMOUNT;
                     COMPARE;
                     LT;
                     IF
                       { PUSH string "Amount too low";
                         FAILWITH }
                       {  };
                     DUP;
                     GET;
                     SENDER;
                     MEM;
                     IF
                       { UNPAIR;
                         SWAP;
                         UNPAIR;
                         SWAP;
                         NONE (map string (pair (timestamp %register_date) (bool %verified)));
                         SENDER;
                         UPDATE;
                         SWAP;
                         PAIR;
                         SWAP;
                         PAIR }
                       { PUSH string "Address not registered";
                         FAILWITH } };
                 NIL operation } }
           { IF_LEFT
               { IF_LEFT
                   { SWAP;
                     DUP;
                     DUG 2;
                     CAR;
                     SENDER;
                     COMPARE;
                     NEQ;
                     IF
                       { PUSH string "Only admin can send";
                         FAILWITH }
                       {  };
                     DUP;
                     CDR;
                     CONTRACT unit;
                     IF_NONE
                       { PUSH int 81;
                         FAILWITH }
                       {  };
                     NIL operation;
                     SWAP;
                     DIG 2;
                     CAR;
                     UNIT;
                     TRANSFER_TOKENS;
                     CONS }
                   { SWAP;
                     DUP;
                     DUG 2;
                     CAR;
                     SENDER;
                     COMPARE;
                     NEQ;
                     IF
                       { PUSH string "Only admin can set admin";
                         FAILWITH }
                       {  };
                     SWAP;
                     CDR;
                     SWAP;
                     PAIR;
                     NIL operation } }
               { IF_LEFT
                   { SWAP;
                     DUP;
                     DUG 2;
                     CAR;
                     SENDER;
                     COMPARE;
                     NEQ;
                     IF
                       { PUSH string "Only admin can set cost";
                         FAILWITH }
                       {  };
                     SWAP;
                     UNPAIR;
                     SWAP;
                     CDR;
                     DIG 2;
                     PAIR;
                     SWAP;
                     PAIR }
                   { SWAP;
                     DUP;
                     DUG 2;
                     CAR;
                     SENDER;
                     COMPARE;
                     NEQ;
                     IF
                       { PUSH string "Only admin can verify";
                         FAILWITH }
                       {  };
                     SWAP;
                     UNPAIR;
                     SWAP;
                     UNPAIR;
                     SWAP;
                     DUP;
                     DUP;
                     CDR;
                     DUP;
                     DUG 2;
                     GET;
                     IF_NONE
                       { PUSH int 75;
                         FAILWITH }
                       {  };
                     DUP;
                     DIG 6;
                     CAR;
                     DUP;
                     DUG 2;
                     GET;
                     IF_NONE
                       { PUSH int 75;
                         FAILWITH }
                       {  };
                     CAR;
                     PUSH bool True;
                     SWAP;
                     PAIR;
                     SOME;
                     SWAP;
                     UPDATE;
                     SOME;
                     SWAP;
                     UPDATE;
                     SWAP;
                     PAIR;
                     SWAP;
                     PAIR };
                 NIL operation } };
         PAIR };
}
