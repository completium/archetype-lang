{
  storage (pair (pair (address %owner) (address %registry)) (pair (big_map %tokenHolders address (pair (map %historyHolders address (list (pair (nat %balance) (timestamp %time)))) (set %holders address))) (set %tokens address)));
  parameter (or (address %addToken_) (pair %afterTransfer (pair (pair address nat) (pair address nat)) address));
  code { PUSH string "Access is denied";
         LAMBDA
           (pair address (pair (pair address address) (pair (big_map address (pair (map address (list (pair nat timestamp))) (set address))) (set address))))
           (pair (map address (list (pair nat timestamp))) (set address))
           { EMPTY_SET address;
             EMPTY_MAP address (list (pair nat timestamp));
             PAIR;
             DIG 1;
             DUP;
             DUG 2;
             CDR;
             CDR;
             CAR;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             GET;
             IF_NONE
               { DUP }
               { DUP;
                 DIP { DROP } };
             DIP { DROP 2 } };
         DUP;
         LAMBDA
           (pair (lambda (pair address (pair (pair address address) (pair (big_map address (pair (map address (list (pair nat timestamp))) (set address))) (set address)))) (pair (map address (list (pair nat timestamp))) (set address))) (pair (pair address nat) (pair address (pair (pair address address) (pair (big_map address (pair (map address (list (pair nat timestamp))) (set address))) (set address))))))
           (pair (pair address address) (pair (big_map address (pair (map address (list (pair nat timestamp))) (set address))) (set address)))
           { DUP;
             CAR;
             SWAP;
             CDR;
             DUP;
             CAR;
             CAR;
             DIG 1;
             DUP;
             DUG 2;
             CAR;
             CDR;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             CAR;
             DIG 3;
             DUP;
             DUG 4;
             CDR;
             CDR;
             DUP;
             DIG 2;
             DUP;
             DUG 3;
             PAIR;
             DIG 6;
             DUP;
             DUG 7;
             SWAP;
             EXEC;
             DIG 1;
             DUP;
             DUG 2;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             CAR;
             DIG 2;
             DUP;
             DUG 3;
             DIG 5;
             DUP;
             DUG 6;
             DIG 8;
             DUP;
             DUG 9;
             COMPARE;
             NEQ;
             IF
               { PUSH nat 0;
                 DIG 7;
                 DUP;
                 DUG 8;
                 COMPARE;
                 EQ;
                 IF
                   { DIG 3;
                     DUP;
                     DUG 4;
                     CDR;
                     DIG 8;
                     DUP;
                     DUG 9;
                     PUSH bool False;
                     SWAP;
                     UPDATE }
                   { PUSH nat 0;
                     DIG 7;
                     DUP;
                     DUG 8;
                     COMPARE;
                     GT;
                     IF
                       { DIG 3;
                         DUP;
                         DUG 4;
                         CDR;
                         DIG 8;
                         DUP;
                         DUG 9;
                         PUSH bool True;
                         SWAP;
                         UPDATE }
                       { DIG 3;
                         DUP;
                         DUG 4;
                         CDR } } }
               { DIG 3;
                 DUP;
                 DUG 4;
                 CDR };
             SWAP;
             CAR;
             PAIR;
             DIG 5;
             DUP;
             DUG 6;
             SWAP;
             SOME;
             SWAP;
             UPDATE;
             DIP { DUP; CAR; SWAP; CDR; CDR };
             PAIR;
             SWAP;
             PAIR;
             DIP { DROP 7 } };
         SWAP;
         APPLY;
         DIP { DUP };
         SWAP;
         LAMBDA
           (pair (lambda (pair address (pair (pair address address) (pair (big_map address (pair (map address (list (pair nat timestamp))) (set address))) (set address)))) (pair (map address (list (pair nat timestamp))) (set address))) (pair (pair address nat) (pair address (pair (pair address address) (pair (big_map address (pair (map address (list (pair nat timestamp))) (set address))) (set address))))))
           (pair (pair address address) (pair (big_map address (pair (map address (list (pair nat timestamp))) (set address))) (set address)))
           { DUP;
             CAR;
             SWAP;
             CDR;
             DUP;
             CAR;
             CAR;
             DIG 1;
             DUP;
             DUG 2;
             CDR;
             CAR;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             CDR;
             NOW;
             DIG 4;
             DUP;
             DUG 5;
             CAR;
             CDR;
             PAIR;
             DIG 1;
             DUP;
             DUG 2;
             DIG 3;
             DUP;
             DUG 4;
             PAIR;
             DIG 6;
             DUP;
             DUG 7;
             SWAP;
             EXEC;
             DIG 2;
             DUP;
             DUG 3;
             DIG 4;
             DUP;
             DUG 5;
             DIG 6;
             DUP;
             DUG 7;
             PAIR;
             PAIR;
             DUP;
             CDR;
             DIG 1;
             DUP;
             DUG 2;
             CAR;
             CDR;
             PAIR;
             DIG 8;
             DUP;
             DUG 9;
             SWAP;
             EXEC;
             DUP;
             CAR;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             CAR;
             GET;
             IF_NONE
               { NIL (pair nat timestamp) }
               { DUP;
                 DIP { DROP } };
             DUP;
             DIP { DROP 3 };
             DIG 3;
             DUP;
             DUG 4;
             DIG 4;
             DUP;
             DUG 5;
             CDR;
             CAR;
             DIG 3;
             DUP;
             DUG 4;
             DIG 7;
             DUP;
             DUG 8;
             DIG 9;
             DUP;
             DUG 10;
             COMPARE;
             NEQ;
             IF
               { DIG 4;
                 DUP;
                 DUG 5;
                 CAR;
                 DIG 4;
                 DUP;
                 DUG 5;
                 DIG 7;
                 DUP;
                 DUG 8;
                 CONS;
                 SOME;
                 DIG 10;
                 DUP;
                 DUG 11;
                 UPDATE }
               { DIG 4;
                 DUP;
                 DUG 5;
                 CAR };
             SWAP;
             CDR;
             SWAP;
             PAIR;
             DIG 7;
             DUP;
             DUG 8;
             SWAP;
             SOME;
             SWAP;
             UPDATE;
             DIP { DUP; CAR; SWAP; CDR; CDR };
             PAIR;
             SWAP;
             PAIR;
             DIP { DROP 8 } };
         SWAP;
         APPLY;
         DIG 4;
         DUP;
         DUG 5;
         CDR;
         DIG 5;
         DUP;
         DUG 6;
         CAR;
         IF_LEFT
           { DIG 1;
             DUP;
             DUG 2;
             DIG 1;
             DUP;
             DUG 2;
             PAIR;
             DUP;
             CDR;
             DUP;
             CAR;
             CDR;
             SENDER;
             COMPARE;
             NEQ;
             DIG 1;
             DUP;
             DUG 2;
             CAR;
             CAR;
             SENDER;
             COMPARE;
             NEQ;
             AND;
             IF
               { DIG 7;
                 DUP;
                 DUG 8;
                 FAILWITH }
               { PUSH unit Unit };
             DIG 1;
             DUP;
             DUG 2;
             DIG 2;
             DUP;
             DUG 3;
             CDR;
             CDR;
             DIG 4;
             DUP;
             DUG 5;
             CAR;
             PUSH bool True;
             SWAP;
             UPDATE;
             DIP { DUP; CAR; SWAP; CDR; CAR };
             SWAP;
             PAIR;
             SWAP;
             PAIR;
             DIP { DROP 3 };
             NIL operation;
             PAIR;
             DIP { DROP } }
           { DIG 1;
             DUP;
             DUG 2;
             DIG 1;
             DUP;
             DUG 2;
             CDR;
             PAIR;
             DIG 1;
             DUP;
             DUG 2;
             CAR;
             CDR;
             CDR;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             CDR;
             CAR;
             PAIR;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             CAR;
             CDR;
             DIG 3;
             DUP;
             DUG 4;
             CAR;
             CAR;
             CAR;
             PAIR;
             PAIR;
             PAIR;
             DUP;
             CAR;
             CAR;
             CAR;
             DIG 1;
             DUP;
             DUG 2;
             CAR;
             CAR;
             CDR;
             DIG 2;
             DUP;
             DUG 3;
             CAR;
             CDR;
             CAR;
             DIG 3;
             DUP;
             DUG 4;
             CAR;
             CDR;
             CDR;
             DIG 4;
             DUP;
             DUG 5;
             CDR;
             CAR;
             DIG 5;
             DUP;
             DUG 6;
             CDR;
             CDR;
             DUP;
             CDR;
             CDR;
             SENDER;
             MEM;
             DIG 1;
             DUP;
             DUG 2;
             CAR;
             CDR;
             SENDER;
             COMPARE;
             NEQ;
             DIG 1;
             DUP;
             DUG 2;
             NOT;
             AND;
             IF
               { DIG 13;
                 DUP;
                 DUG 14;
                 FAILWITH }
               { PUSH unit Unit };
             DIP { DROP };
             DIG 1;
             DUP;
             DUG 2;
             DIG 3;
             DUP;
             DUG 4;
             PAIR;
             DIG 6;
             DUP;
             DUG 7;
             DIG 8;
             DUP;
             DUG 9;
             PAIR;
             PAIR;
             DIG 12;
             DUP;
             DUG 13;
             SWAP;
             EXEC;
             DUP;
             DIG 4;
             DUP;
             DUG 5;
             PAIR;
             DIG 7;
             DUP;
             DUG 8;
             DIG 9;
             DUP;
             DUG 10;
             PAIR;
             PAIR;
             DIG 12;
             DUP;
             DUG 13;
             SWAP;
             EXEC;
             DIG 6;
             DUP;
             DUG 7;
             DIG 9;
             DUP;
             DUG 10;
             COMPARE;
             NEQ;
             IF
               { DUP;
                 DIG 5;
                 DUP;
                 DUG 6;
                 PAIR;
                 DIG 6;
                 DUP;
                 DUG 7;
                 DIG 8;
                 DUP;
                 DUG 9;
                 PAIR;
                 PAIR;
                 DIG 14;
                 DUP;
                 DUG 15;
                 SWAP;
                 EXEC;
                 DUP;
                 DIG 6;
                 DUP;
                 DUG 7;
                 PAIR;
                 DIG 7;
                 DUP;
                 DUG 8;
                 DIG 9;
                 DUP;
                 DUG 10;
                 PAIR;
                 PAIR;
                 DIG 14;
                 DUP;
                 DUG 15;
                 SWAP;
                 EXEC;
                 DUP;
                 DIP { DROP 2 } }
               { DUP };
             DUP;
             DIP { DROP 11 };
             NIL operation;
             PAIR;
             DIP { DROP } };
         DIP { DROP 6 } };
}
