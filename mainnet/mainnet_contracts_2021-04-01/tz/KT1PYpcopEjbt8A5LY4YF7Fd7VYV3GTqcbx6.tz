{
  storage (pair (nat %stored_counter) (pair (nat %threshold) (list %keys key)));
  parameter (pair (pair :payload (nat %counter) (or :action (pair :transfer (mutez %amount) (contract %dest unit)) (or (option %delegate key_hash) (pair %change_keys (nat %threshold) (list %keys key))))) (list %sigs (option signature)));
  code { UNPAIR;
         SWAP;
         DUP;
         DIP { SWAP };
         DIP { UNPAIR; DUP; SELF; ADDRESS; CHAIN_ID; PAIR; PAIR; PACK; DIP { UNPAIR; DIP { SWAP } }; SWAP };
         UNPAIR;
         DIP { SWAP };
         COMPARE;
         EQ;
         IF
           {  }
           { UNIT;
             FAILWITH };
         DIP { SWAP };
         UNPAIR;
         DIP { PUSH nat 0;
               SWAP;
               ITER { DIP { SWAP };
                      SWAP;
                      IF_CONS
                        { IF_NONE
                            { SWAP;
                              DROP }
                            { SWAP;
                              DIP { SWAP;
                                    DIP 2 { DUP };
                                    DUP;
                                    DIP { CHECK_SIGNATURE };
                                    SWAP;
                                    IF
                                      { DROP }
                                      { FAILWITH };
                                    PUSH nat 1;
                                    ADD } } }
                        { UNIT;
                          FAILWITH };
                      SWAP } };
         COMPARE;
         LE;
         IF
           {  }
           { UNIT;
             FAILWITH };
         DROP;
         DROP;
         DIP { UNPAIR; PUSH nat 1; ADD; PAIR };
         NIL operation;
         SWAP;
         IF_LEFT
           { UNPAIR;
             UNIT;
             TRANSFER_TOKENS;
             CONS }
           { IF_LEFT
               { SET_DELEGATE;
                 CONS }
               { DIP { SWAP; CAR };
                 SWAP;
                 PAIR;
                 SWAP } };
         PAIR };
}
