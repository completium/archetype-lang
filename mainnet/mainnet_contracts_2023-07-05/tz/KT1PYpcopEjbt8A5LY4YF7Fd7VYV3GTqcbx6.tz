{ parameter
    (pair (pair :payload
             (nat %counter)
             (or :action
                (pair :transfer (mutez %amount) (contract %dest unit))
                (or (option %delegate key_hash)
                    (pair %change_keys (nat %threshold) (list %keys key)))))
          (list %sigs (option signature))) ;
  storage (pair (nat %stored_counter) (pair (nat %threshold) (list %keys key))) ;
  code { UNPAIR ;
         SWAP ;
         DUP ;
         DIP { SWAP } ;
         DIP { UNPAIR ;
               DUP ;
               SELF ;
               ADDRESS ;
               CHAIN_ID ;
               PAIR ;
               PAIR ;
               PACK ;
               DIP { UNPAIR @counter ; DIP { SWAP } } ;
               SWAP } ;
         UNPAIR @stored_counter ;
         DIP { SWAP } ;
         { { COMPARE ; EQ } ; IF {} { { UNIT ; FAILWITH } } } ;
         DIP { SWAP } ;
         UNPAIR @threshold @keys ;
         DIP { PUSH @valid nat 0 ;
               SWAP ;
               ITER { DIP { SWAP } ;
                      SWAP ;
                      IF_CONS
                        { { IF_NONE
                              { SWAP ; DROP }
                              { SWAP ;
                                DIP { SWAP ;
                                      DIP 2 { DUP 2 } ;
                                      { DUP 3 ;
                                        DIP { CHECK_SIGNATURE } ;
                                        SWAP ;
                                        IF { DROP } { FAILWITH } } ;
                                      PUSH nat 1 ;
                                      ADD @valid } } } }
                        { { UNIT ; FAILWITH } } ;
                      SWAP } } ;
         { { COMPARE ; LE } ; IF {} { { UNIT ; FAILWITH } } } ;
         DROP ;
         DROP ;
         DIP { UNPAIR ; PUSH nat 1 ; ADD @new_counter ; PAIR } ;
         NIL operation ;
         SWAP ;
         IF_LEFT
           { UNPAIR ; UNIT ; TRANSFER_TOKENS ; CONS }
           { IF_LEFT
               { SET_DELEGATE ; CONS }
               { DIP { SWAP ; CAR } ; SWAP ; PAIR ; SWAP } } ;
         PAIR } }