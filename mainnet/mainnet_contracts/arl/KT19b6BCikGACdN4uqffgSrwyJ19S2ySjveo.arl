archetype my_contract(
admin : address,
admin_candidate : address,
gps : string,
currency : nat,
plugs : set<nat>,
state : nat,
users : set<address>,
service : map<nat, nat>)

entry addplug (arg : nat) {
  if not (caller = admin) then ((fail ("InvalidCaller")));
  plugs := update (plugs, arg, true)
}

entry rmplug (arg : nat) {
  if not (caller = admin) then ((fail ("InvalidCaller")));
  plugs := update (plugs, arg, false)
}

entry addservice (t : nat, p : nat) {
  if not (caller = admin) then ((fail ("InvalidCaller")));
  if contains (service, t) then ((fail ("KeyAlreadyExists")))
  else (service := update (service, t, (some(p))))
}

entry rmservice (arg : nat) {
  if not (caller = admin) then ((fail ("InvalidCaller")));
  service := update (service, arg, (none<nat>))
}

entry setcurrency (arg : nat) {
  if not (caller = admin) then ((fail ("InvalidCaller")));
  currency := arg
}

entry adduser (arg : address) {
  if not (caller = admin) then ((fail ("InvalidCaller")));
  if contains (users, arg) then ((fail ("KeyAlreadyExists")))
  else (users := update (users, arg, true))
}

entry rmuser (arg : address) {
  if not (caller = admin) then ((fail ("InvalidCaller")));
  users := update (users, arg, false)
}

entry transfer_admin (arg : address) {
  if not (caller = admin) then ((fail ("InvalidCaller")));
  admin_candidate := arg
}

entry accept_admin () {
  if not (caller = admin_candidate) then ((fail ("InvalidCaller")));
  admin_candidate := admin
}

