{
  storage (pair (pair (pair (pair (list %listOfPlayers address) (mutez %maxBalance)) (address %owner)) (mutez %price)) (nat %value));
  parameter (or (unit %joinGame) (pair %payoutToWinners (address %winner) (list %winningVoters address)));
  code { DUP;
         CDR;
         SWAP;
         CAR;
         IF_LEFT
           { SWAP;
             DUP;
             DUG 2;
             CAR;
             CDR;
             AMOUNT;
             COMPARE;
             EQ;
             IF
               {  }
               { PUSH string "WrongCondition: sp.amount == self.data.price";
                 FAILWITH };
             SWAP;
             DUP;
             DUG 2;
             DUP;
             CDR;
             SWAP;
             CAR;
             DUP;
             CDR;
             SWAP;
             CAR;
             DUP;
             CDR;
             SWAP;
             CAR;
             CDR;
             DIG 5;
             DUP;
             DUG 6;
             CAR;
             CAR;
             CAR;
             CAR;
             SENDER;
             CONS;
             PAIR;
             PAIR;
             PAIR;
             PAIR;
             DUG 2;
             DROP;
             DROP;
             NIL operation }
           { DUP;
             CAR;
             NIL operation;
             SWAP;
             CONTRACT unit;
             IF_NONE
               { PUSH unit Unit;
                 FAILWITH }
               {  };
             PUSH nat 2;
             BALANCE;
             PUSH nat 1;
             MUL;
             EDIV;
             IF_NONE
               { PUSH string "split_tokens";
                 FAILWITH }
               {  };
             CAR;
             PUSH unit Unit;
             TRANSFER_TOKENS;
             CONS;
             SWAP;
             DUP;
             DUG 2;
             CDR;
             ITER { DIG 3;
                    DUP;
                    DUG 4;
                    CAR;
                    PUSH nat 1;
                    DIG 5;
                    DUP;
                    DUG 6;
                    CDR;
                    ADD;
                    SWAP;
                    PAIR;
                    DUG 4;
                    DROP;
                    DIG 2;
                    DROP };
             PUSH nat 0;
             DIG 3;
             DUP;
             DUG 4;
             CDR;
             COMPARE;
             GT;
             IF
               {  }
               { PUSH string "WrongCondition: self.data.value > 0";
                 FAILWITH };
             DIG 2;
             DUP;
             DUG 3;
             DUP;
             CDR;
             SWAP;
             CAR;
             DUP;
             CDR;
             SWAP;
             CAR;
             DUP;
             CDR;
             SWAP;
             CAR;
             CAR;
             BALANCE;
             SWAP;
             PAIR;
             PAIR;
             PAIR;
             PAIR;
             DUG 3;
             DIG 2;
             DROP;
             SWAP;
             DUP;
             DUG 2;
             CDR;
             ITER { SWAP;
                    DUP;
                    DUG 2;
                    SWAP;
                    DUP;
                    DUG 2;
                    CONTRACT unit;
                    IF_NONE
                      { PUSH unit Unit;
                        FAILWITH }
                      {  };
                    DIG 5;
                    DUP;
                    DUG 6;
                    CDR;
                    DIG 6;
                    DUP;
                    DUG 7;
                    CAR;
                    CAR;
                    CAR;
                    CDR;
                    PUSH nat 1;
                    MUL;
                    EDIV;
                    IF_NONE
                      { PUSH string "split_tokens";
                        FAILWITH }
                      {  };
                    CAR;
                    PUSH unit Unit;
                    TRANSFER_TOKENS;
                    CONS;
                    DUG 2;
                    DROP;
                    DROP };
             SWAP;
             DROP };
         PAIR };
}
