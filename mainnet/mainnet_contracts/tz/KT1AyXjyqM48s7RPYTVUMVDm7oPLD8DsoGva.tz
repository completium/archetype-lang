{ parameter
    (or (or (or (or (pair %addRole (address %address_role) (string %role)) (int %approveTransfer))
                (or (pair %controlTransfer
                       (pair (address %address_from) (address %address_to))
                       (nat %amount))
                    (unit %pause)))
            (or (or (int %rejectTransfer) (pair %removeRole (address %address_role) (string %role)))
                (or (address %setOwner) (pair %swap (string %address_to) (string %chain)))))
        (or (pair %transfer (address %address_to) (nat %amount)) (unit %unpause))) ;
  storage
    (pair (pair (pair (pair (map %balances address nat) (int %generator))
                      (pair (string %name) (address %owner)))
                (pair (pair (bool %paused) (map %roles address (map string bool)))
                      (pair (pair %swap (string %address_to) (string %chain)) (string %symbol))))
          (map %transfer_requests
             int
             (pair (pair (address %address_from) (address %address_to)) (nat %amount)))) ;
  code { LAMBDA
           (pair (pair (pair (address %address_from) (address %address_to)) (nat %amount))
                 (pair (pair (pair (pair (map %balances address nat) (int %generator))
                                   (pair (string %name) (address %owner)))
                             (pair (pair (bool %paused) (map %roles address (map string bool)))
                                   (pair (pair %swap (string %address_to) (string %chain)) (string %symbol))))
                       (map %transfer_requests
                          int
                          (pair (pair (address %address_from) (address %address_to)) (nat %amount)))))
           (pair (pair (pair (pair (map %balances address nat) (int %generator))
                             (pair (string %name) (address %owner)))
                       (pair (pair (bool %paused) (map %roles address (map string bool)))
                             (pair (pair %swap (string %address_to) (string %chain)) (string %symbol))))
                 (map %transfer_requests
                    int
                    (pair (pair (address %address_from) (address %address_to)) (nat %amount))))
           { DUP ;
             CAR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CDR ;
             DUP ;
             CAR ;
             CAR ;
             CAR ;
             CAR ;
             DUP ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CAR ;
             GET ;
             IF_NONE
               { PUSH string "Insuffeciant balance." ; FAILWITH }
               { DUP ; DIP { DROP } } ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CDR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             COMPARE ;
             GE ;
             IF { DIG 1 ;
                  DUP ;
                  DUG 2 ;
                  DIG 4 ;
                  DUP ;
                  DUG 5 ;
                  CDR ;
                  DIG 3 ;
                  DUP ;
                  DUG 4 ;
                  DIG 6 ;
                  DUP ;
                  DUG 7 ;
                  CAR ;
                  CDR ;
                  GET ;
                  IF_NONE { PUSH nat 0 } { DUP ; DIP { DROP } } ;
                  ADD ;
                  DIG 5 ;
                  DUP ;
                  DUG 6 ;
                  CAR ;
                  CDR ;
                  SWAP ;
                  SOME ;
                  SWAP ;
                  UPDATE ;
                  DIG 4 ;
                  DUP ;
                  DUG 5 ;
                  CDR ;
                  DIG 2 ;
                  DUP ;
                  DUG 3 ;
                  SUB ;
                  ABS ;
                  DIG 5 ;
                  DUP ;
                  DUG 6 ;
                  CAR ;
                  CAR ;
                  SWAP ;
                  SOME ;
                  SWAP ;
                  UPDATE ;
                  DIG 2 ;
                  DUP ;
                  DUG 3 ;
                  DIG 1 ;
                  DUP ;
                  DUG 2 ;
                  DIP { DROP 2 } }
                { PUSH string "Insuffeciant balance." ; FAILWITH } ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             DIP { DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   DUP ;
                   CDR ;
                   SWAP ;
                   CAR ;
                   CDR } ;
             PAIR ;
             PAIR ;
             PAIR ;
             PAIR ;
             DIP { DROP 6 } } ;
         LAMBDA
           (pair string
                 (pair (pair (pair (pair (map %balances address nat) (int %generator))
                                   (pair (string %name) (address %owner)))
                             (pair (pair (bool %paused) (map %roles address (map string bool)))
                                   (pair (pair %swap (string %address_to) (string %chain)) (string %symbol))))
                       (map %transfer_requests
                          int
                          (pair (pair (address %address_from) (address %address_to)) (nat %amount)))))
           (pair (pair (pair (pair (map %balances address nat) (int %generator))
                             (pair (string %name) (address %owner)))
                       (pair (pair (bool %paused) (map %roles address (map string bool)))
                             (pair (pair %swap (string %address_to) (string %chain)) (string %symbol))))
                 (map %transfer_requests
                    int
                    (pair (pair (address %address_from) (address %address_to)) (nat %amount))))
           { DUP ;
             CDR ;
             DUP ;
             CAR ;
             CAR ;
             CDR ;
             CDR ;
             SENDER ;
             COMPARE ;
             EQ ;
             IF { DUP }
                { DUP ;
                  CAR ;
                  CDR ;
                  CAR ;
                  CDR ;
                  SENDER ;
                  GET ;
                  IF_NONE
                    { PUSH string "Permission denied." ; FAILWITH }
                    { DUP ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      CAR ;
                      GET ;
                      IF_NONE
                        { PUSH string "Permission denied." ; FAILWITH }
                        { DIG 2 ; DUP ; DUG 3 ; DIP { DROP } } ;
                      DIP { DROP } } } ;
             DIP { DROP 2 } } ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     IF_LEFT
                       { DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         PUSH string "addRole" ;
                         PAIR ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         SWAP ;
                         EXEC ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DUP ;
                         CAR ;
                         CDR ;
                         CAR ;
                         CDR ;
                         DUP ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         CAR ;
                         GET ;
                         IF_NONE { EMPTY_MAP string bool } { DUP ; DIP { DROP } } ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         PUSH bool True ;
                         DIG 7 ;
                         DUP ;
                         DUG 8 ;
                         CDR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         CAR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         DIP { DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               DUP ;
                               CAR ;
                               SWAP ;
                               CDR ;
                               DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               CAR } ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         DIP { DROP 6 } }
                       { DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         PUSH string "approveTransfer" ;
                         PAIR ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         SWAP ;
                         EXEC ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DUP ;
                         CDR ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         GET ;
                         IF_NONE
                           { PUSH string "Transfer request not found" ; FAILWITH }
                           { DUP ; DIP { DROP } } ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         NONE (pair (pair (address %address_from) (address %address_to)) (nat %amount)) ;
                         SWAP ;
                         UPDATE ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         SWAP ;
                         CAR ;
                         PAIR ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         PAIR ;
                         DIG 12 ;
                         DUP ;
                         DUG 13 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         DIP { DROP 7 } } ;
                     DIP { DROP } }
                   { DUP ;
                     IF_LEFT
                       { DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         PUSH string "controlTransfer" ;
                         PAIR ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         SWAP ;
                         EXEC ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         PAIR ;
                         DIG 7 ;
                         DUP ;
                         DUG 8 ;
                         SWAP ;
                         EXEC ;
                         DIP { DROP } }
                       { DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         PUSH string "pause" ;
                         PAIR ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         DUP ;
                         CAR ;
                         SWAP ;
                         CDR ;
                         DUP ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         CDR ;
                         PUSH bool True ;
                         PAIR ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         DIP { DROP 2 } } ;
                     DIP { DROP } } ;
                 DIP { DROP } }
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     IF_LEFT
                       { DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         PUSH string "rejectTransfer" ;
                         PAIR ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         SWAP ;
                         EXEC ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         PAIR ;
                         DUP ;
                         CDR ;
                         DUP ;
                         CDR ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         CAR ;
                         NONE (pair (pair (address %address_from) (address %address_to)) (nat %amount)) ;
                         SWAP ;
                         UPDATE ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         SWAP ;
                         CAR ;
                         PAIR ;
                         DIP { DROP 4 } }
                       { DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         PUSH string "removeRole" ;
                         PAIR ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         SWAP ;
                         EXEC ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         PAIR ;
                         DUP ;
                         CAR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DUP ;
                         CAR ;
                         CDR ;
                         CAR ;
                         CDR ;
                         DUP ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         CAR ;
                         GET ;
                         IF_NONE
                           { PUSH string "No role to remove." ; FAILWITH }
                           { DUP ; DIP { DROP } } ;
                         DUP ;
                         DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         CDR ;
                         NONE bool ;
                         SWAP ;
                         UPDATE ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         DIG 7 ;
                         DUP ;
                         DUG 8 ;
                         CAR ;
                         SWAP ;
                         SOME ;
                         SWAP ;
                         UPDATE ;
                         DIP { DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               DUP ;
                               CAR ;
                               SWAP ;
                               CDR ;
                               DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               CAR } ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         DIP { DROP 7 } } ;
                     DIP { DROP } }
                   { DUP ;
                     IF_LEFT
                       { DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         PAIR ;
                         DUP ;
                         CDR ;
                         DUP ;
                         CAR ;
                         CAR ;
                         CDR ;
                         CDR ;
                         SENDER ;
                         COMPARE ;
                         EQ ;
                         IF { DUP ;
                              DIG 2 ;
                              DUP ;
                              DUG 3 ;
                              CAR ;
                              DIP { DUP ;
                                    CDR ;
                                    SWAP ;
                                    CAR ;
                                    DUP ;
                                    CDR ;
                                    SWAP ;
                                    CAR ;
                                    DUP ;
                                    CAR ;
                                    SWAP ;
                                    CDR ;
                                    CAR } ;
                              SWAP ;
                              PAIR ;
                              SWAP ;
                              PAIR ;
                              PAIR ;
                              PAIR }
                            { PUSH string "Permission denied." ; FAILWITH } ;
                         DIP { DROP 3 } }
                       { DIG 4 ;
                         DUP ;
                         DUG 5 ;
                         PUSH string "swap" ;
                         PAIR ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         SWAP ;
                         EXEC ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         PAIR ;
                         DUP ;
                         CDR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         DIP { DUP ;
                               CDR ;
                               SWAP ;
                               CAR ;
                               DUP ;
                               CAR ;
                               SWAP ;
                               CDR ;
                               DUP ;
                               CAR ;
                               SWAP ;
                               CDR ;
                               CDR } ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         PAIR ;
                         DIP { DROP 2 } } ;
                     DIP { DROP } } ;
                 DIP { DROP } } ;
             DIP { DROP } }
           { DUP ;
             IF_LEFT
               { DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 CAR ;
                 IF { PUSH string "Contract paused." ; FAILWITH } { DIG 2 ; DUP ; DUG 3 } ;
                 DUP ;
                 PUSH int 1 ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 CDR ;
                 ADD ;
                 DIP { DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       DUP ;
                       CDR ;
                       SWAP ;
                       CAR ;
                       CAR } ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 DIP { DROP } ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DUP ;
                 CDR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CAR ;
                 SENDER ;
                 PAIR ;
                 PAIR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 DIP { DROP 5 } }
               { DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 PUSH string "unpause" ;
                 PAIR ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 SWAP ;
                 EXEC ;
                 DUP ;
                 DUP ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 DUP ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 CDR ;
                 PUSH bool False ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 DIP { DROP 2 } } ;
             DIP { DROP } } ;
         NIL operation ;
         PAIR ;
         DIP { DROP 4 } } }