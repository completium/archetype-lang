archetype vehicle_lifecycle

asset owner {
  ido : role;
  fn  : string;
  ln  : string;
}

enum order_state =
  | Placed                      initial
  | Scheduled_for_manufacture
  | Vin_assigned
  | Owner_assigned
  | Delivered

asset vehicledetail {
  idv    : string;
  dcolor : string;
}

asset manufacturer {
  mid : string;
}

asset order {
  oid           : string;
  amanufacturer : pkey<manufacturer>;
  orderer       : pkey<owner>;
  details       : pkey<vehicledetail>;
} with states order_state

enum vehicle_state =
  | Off_the_road
  | Active
  | Scrapped

asset vehicle identified by vin {
   vin          : string;
   aowner       : pkey<owner>;
   detail       : pkey<vehicledetail>;
   color        : string;
   vstate       : vehicle_state = Off_the_road;
}

entry placeOrder (iid           : string,
                  imanufacturer : pkey<manufacturer>,
                  iorderer      : pkey<owner>,
                  idetails      : pkey<vehicledetail>) {
  called by iorderer
  effect {
    order.add({ iid; imanufacturer; iorderer; idetails})
  }
}

transition assign_vin (avin : string, adetail : pkey<vehicledetail>) on (ok : pkey<order>) {
  called by order[ok].orderer

  from Placed
  to Vin_assigned
  with effect {
     vehicle.add ({ vin = avin; aowner = order[ok].orderer; detail = adetail; color = vehicledetail[adetail].dcolor })
  }
}

transition assign_owner () on (ok : pkey<order>) {
  from any
  to Owner_assigned
  with effect {
    (* set vehicle state *)
    vehicle[vehicledetail[order[ok].details].idv].vstate := Active;
  }
}

entry vehicleTransfer (buyer : pkey<owner>, vk : pkey<vehicle>) {
  called by vehicle[vk].aowner
  effect {
    vehicle[vk].aowner := buyer
  }
}

entry scrapVehicle (vk : pkey<vehicle>) {
  called by vehicle[vk].aowner
  require {
      r1: vehicle[vk].vstate = Off_the_road or vehicle[vk].vstate = Active
  }
  effect {
      vehicle[vk].vstate := Scrapped
  }
}

entry scrapVehiclebyColor (acolor : string) {
  effect {
    for v in vehicle.select(color = acolor) do
      vehicle[v].vstate := Scrapped
    done
  }
}
