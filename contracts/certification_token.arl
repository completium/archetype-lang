archetype certification_token

asset learner {
  lid : role;
  ltokens : int = 0;
}

asset institution {
  iid : address;
  itokens : int = 0;
  ilearners : aggregate<learner> = [];
}

asset certifier {
  ccid : address;
}

asset certification {
  cid : string;
  cdate : date;
  ccer : string;
  clea : pkey<learner>;
  cins : pkey<institution>;
  ccertifier: pkey<certifier>;
}

constant dtkl : int = 1
constant dtki : int = 1

entry register_learner (do_add : bool) {
  effect {
   if (do_add) then
   (if (not learner.contains(caller)) then
     learner.add({lid= caller})
   else
     fail ("learner does not contain caller"))
   else
   (if (learner.contains(caller)) then
    learner.remove(caller)
   else
     fail ("learner does not contain caller"))
  }
}

entry register_learners (llid : role, lltokens : int, do_add : bool) {
  effect {
    if do_add then (
      learner.addupdate(llid, {ltokens = lltokens});
      institution[caller].ilearners.add(llid)
    ) else
      institution[caller].ilearners.remove(llid)
  }
}

entry register_institution (do_add : bool) {
  effect {
   if (do_add) then
   (if (not institution.contains(caller)) then
     institution.add({iid= caller})
   else
     fail ("institution does not contain caller"))
   else
   (if (institution.contains(caller)) then
    institution.remove(caller)
   else
     fail ("leainstitutionrner does not contain caller"))
  }
}

entry register_certifier (do_add : bool) {
  effect {
    if (do_add) then
    (if (not certifier.contains(caller)) then
      certifier.add({ccid= caller})
    else
      fail ("certifier does not contain caller"))
    else
    (if (certifier.contains(caller)) then
      certifier.remove(caller)
    else
      fail ("certifier does not contain caller"))
  }
}

entry certify (
  cert_cid : string,
  cert_cdate : date,
  cert_ccer : string,
  cert_clea : pkey<learner>,
  cert_cins : pkey<institution>,
  cert_ccertifier: pkey<certifier>) {
  require {
    r1: certifier.contains(caller);
  }
  effect {
    if (not institution[cert_cins].ilearners.contains(cert_clea)) then
      fail ("learner is not in institution");
    if (cert_ccertifier <> caller) then
      fail ("ccertifier must be caller value");
    certification.add({cert_cid; cert_cdate; cert_ccer; cert_clea; cert_cins; cert_ccertifier});
    learner.update (cert_clea, {ltokens += dtkl});
    institution.update (cert_cins, {itokens += dtki})
  }
}

entry transfer_learner_token (nb_tokens : int, dest : address) {
  require {
    r2: learner.contains(caller);
    r3: learner[caller].ltokens >= nb_tokens;
  }
  effect {
    learner.update(caller, {ltokens -= nb_tokens})
  }
}

entry transfer_institution_token (nb_tokens : int, dest : address) {
  require {
    r4: institution.contains(caller);
    r5: institution[caller].itokens >= nb_tokens;
  }
  effect {
    institution.update(caller, {itokens -= nb_tokens})
  }
}

