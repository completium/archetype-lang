archetype miles_with_expiration

variable admin : address = @tz1Lc2qBKEWCBeDU8npG6zCeCqpmaegRi6Jg

(* id is a string because it is generated off-chain *)
asset mile identified by id {
   id         : string;
   amount     : int;
   expiration : date
}

(* a partition ensures there is no direct access to mile collection *)
asset owner identified by addr {
  addr  : address;
  miles : partition<mile> = []
}

entry add (ow : address, newmile_id : string, newmile_amount : int, newmile_expiration : date) {
   called by admin
   require {
     c1 : newmile_amount > 0;
   }
   fail if {
     c2 : mile.contains(newmile_id);
   }
   effect {
     owner.add_update (ow, { miles += [{id = newmile_id; amount = newmile_amount; expiration = newmile_expiration} ] })
   }
}

entry consume (quantity : int) {
  require {
    r2 : quantity >= 0;
  }
  effect {
    var by_expiration = owner[caller].miles.sort(expiration).select(the.expiration >= now);
    do_require (by_expiration.sum(the.amount) >= quantity, "NotEnoughMiles");
    var remainder = quantity;
    for : loop m in by_expiration do
      if remainder > 0
      then (
        if mile[m].amount > remainder
        then (
          mile.update(m, { amount -= remainder });
          remainder := 0
        )
        else if mile[m].amount = remainder
        then (
          remainder := 0;
          owner[caller].miles.remove(m)
        ) else (
          remainder -= mile[m].amount;
          owner[caller].miles.remove(m)
        )
      )
    done;
    assert p1
  }
}

entry clear_expired () {
  called by admin
  effect {
    for : loop2 o in owner do
      owner[o].miles.remove_if(the.expiration < now)
    done
  }
}
