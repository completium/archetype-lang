archetype vehicle_lifecycle

asset owner {
  ido : role;
  fn  : string;
  ln  : string;
}

enum order_state =
  | Placed                      initial
  | Scheduled_for_manufacture
  | Vin_assigned
  | Owner_assigned
  | Delivered

asset vehicledetail {
  idv : string
}

asset order {
   status       : order_sate;
   manufacturer : manufacturer;
   orderer      : owner;
   details      : vehicledetail
}

enum vehicle_state =
  | Off_the_road               initial
  | Active
  | Scrapped

asset vehicle identified by vin {
   vin          : string;
   owner        : owner;
   detail       : vehicledetail;
   color        : string
} with states vehicle_state

action placeOrder (neworder : order) {
  called by neworder.orderer
  effect {
    order.add(neworder)
  }
}

transition assign_vin (vin : string) (detail : vehicledetail) on (ok : order) from Placed {
  called by order.orderer

  to Vin_assigned
  with effect {
     vehicule.add ({ vin = vin; detail = detail })
  }
}

transition assign_owner on (ok : order) from any {
  to Owner_assigned
  with effect {
    (* set vehicule state *)
    order.get(ok).vehicule.state := Active;
    (* set vehicule owner *)
    order.get(ok).vehicule.owner := order.orderer
  }
}

action vehiculeTransfer (buyer : owner) (vehicule : vehicule) {
  called by [%delegable%] vehicule.owner
  effect {
    vehicule.owner := buyer
  }
}

transition scrapVehicle on (vk : vehicule) from (Off_the_road or Active) {
  called by vehicle.owner

  to Scrapped
}

action scrapVehiclebyColor (color : string) {
  effect {
    for v in vehicule.select(vehicule.color = color) do
      v.state := Scrapped
    done
  }
}
