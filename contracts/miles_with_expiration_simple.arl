archetype miles_with_expiration_simple

constant admin : role = @tz1aazS5ms5cbGkb6FN1wvWmN7yrMTTcr6wB

asset mile identified by id {
    id : string;
    expiration : date;
    quantity : int
} with {
    i0: quantity > 0;
}

asset owner identified by addr {
    addr : address;
    miles : partition<mile> = [];
}

entry add (ow : address, newmile_id : string, newmile_expiration : date, newmile_quantity : int) {
    called by admin
	failif {
	    f1: mile.contains(newmile_id)
	}
	effect {
	    if owner.contains(ow) then
	        owner[ow].miles.add({newmile_id; newmile_expiration; newmile_quantity})
	    else
	        owner.add({ addr = ow; miles = [{newmile_id; newmile_expiration; newmile_quantity}] })

        // TODO: replace it by:
        // owner.addupdate(ow, { miles += [{newmile_id; newmile_expiration; newmile_quantity}] })
	}
}

entry consume (ow : address, qty : int) {
    specification {
        postcondition p0 {
            let some before_o = before.owner[ow] in
                let some after_o = owner[ow] in
                after_o.miles.sum(the.quantity) = before_o.miles.sum(the.quantity) - qty
                otherwise true
            otherwise true
            invariant for loop {
                let some before_o = before.owner[ow] in
                let some o = owner[ow] in
                    o.miles.sum(the.quantity) =
                        before_o.miles.sum(the.quantity) - qty + remainder
                otherwise true
                otherwise true;
                0 <= remainder <= toiterate.sum(the.quantity)
            }
        }
    }
    called by admin
    require {
        r2: qty > 0;
        r3: owner.contains(ow)
    }
    effect {
        var valid_miles = owner[ow].miles.select(the.expiration > now);
        dorequire ( valid_miles.sum(the.quantity) >= qty );
        var remainder = qty;
        for:loop m in valid_miles do
            if remainder > 0 then (
                if mile[m].quantity <= remainder then (
                    remainder -= mile[m].quantity;
                    owner[ow].miles.remove(m)
                ) else (
                    mile.update(m, { quantity -= remainder });
                    remainder := 0
                )
            )
        done
    }
}

security {
    s0 : only_by_role (anyentry, admin);
    s1 : no_storage_fail (add);
}
