archetype register_vote

// set contract caller address here
constant admin : role = @tz1Lc2qBKEWCBeDU8npG6zCeCqpmaegRi6Jg

variable quorum : rational = 0.2
variable threshold : rational = 0.5

contract contract_sig {
  // generate signature here
  action set_contact(cc : address)
  action register_candidate (candidate : address)
}

// set called contract address here
variable contract_instance : contract_sig = @KT1QwpAGX68z6XtnXBWQVdJ56AQtzPGrAKKv

asset voter {
  vaddr : address;
}

asset vote {
  vid : string;
  vcandidate : address;
  vcount : int = 0; // no error if names 'count'
  voters : voter collection = [];
} with {
  i0 : vcount > 0;
}

action add_voters (addrs : voter collection) {
  called by admin
  effect {
    for vter in addrs do
      voter.add(vter)
    done
  }
}

action add_vote (id : string, candidate : address) {
  called by admin
  effect {
    vote.add({ vid = id; vcandidate = candidate })
  }
}

action do_vote (id : string, decision : bool) { // cannot name this 'vote'
  require {
    r1 : voter.contains(caller);
  }
  failif {
    f1 : vote.get(id).voters.contains(caller);
  }
  effect {
    var v = vote.get(id);
    v.voters.add({ vaddr = caller });
    if decision then v.vcount += 1
  }
}

action execute (id : string) {
  called by admin
  effect {
    var v = vote.get(id);
    var nbvoters = v.voters.count();
    var count = v.vcount;
    if nbvoters >= quorum * voter.count() and count >= threshold * nbvoters then (
      // call contract action here
      contract_instance.register_candidate(v.vcandidate)
    )
  }
}
