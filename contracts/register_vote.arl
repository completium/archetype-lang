archetype register_vote

// set contract caller address here
constant admin : role = @tz1Lc2qBKEWCBeDU8npG6zCeCqpmaegRi6Jg

variable quorum : rational = 0.2
variable threshold : rational = 0.5

contract contract_sig {
  // generate signature here
  entry set_contact(cc : address)
  entry register_candidate (candidate : address)
}

// set called contract address here
variable contract_instance : contract_sig = @KT1QwpAGX68z6XtnXBWQVdJ56AQtzPGrAKKv

asset voter {
  vaddr : address;
}

asset vote {
  vid : string;
  vcandidate : address;
  vcount : int = 0; // no error if names 'count'
  voters : voter aggregate = [];
} with {
  i0 : vcount > 0;
}

entry addvoter (voter_id : pkey of voter) {
  called by admin
  effect {
    voter.add({voter_id})
  }
}

entry addvote (id : string, candidate : address) {
  called by admin
  effect {
    vote.add({ vid = id; vcandidate = candidate })
  }
}

entry do_vote (id : string, decision : bool) { // cannot name this 'vote'
  require {
    r1 : voter.contains(caller);
  }
  failif {
    f1 : vote[id].voters.contains(caller);
  }
  effect {
    voter.add({caller});
    vote[id].voters.add(caller);
    if decision then vote[id].vcount += 1
  }
}

entry execute (id : string) {
  called by admin
  effect {
    var nbvoters = vote[id].voters.count();
    var count = vote[id].vcount;
    if nbvoters >= quorum * voter.count() and count >= threshold * nbvoters then (
      // call contract action here
      transfer 0tz to contract_instance call register_candidate(vote[id].vcandidate)
    )
  }
}
